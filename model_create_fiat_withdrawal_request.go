/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFiatWithdrawalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFiatWithdrawalRequest{}

// CreateFiatWithdrawalRequest struct for CreateFiatWithdrawalRequest
type CreateFiatWithdrawalRequest struct {
	// The optional client-specified ID (for idempotence).
	RefId *string `json:"ref_id,omitempty"`
	// Amount to withdraw, excluding fees. Specify exactly one of `amount` or `total`. When `amount` is specified, Paxos initiates the withdrawal for `amount` and then charges fees.
	Amount *string `json:"amount,omitempty" validate:"regexp=^[0-9]*\\\\.?[0-9]{1,2}$"`
	// The asset to withdraw. Current supported asset: \"USD\".
	Asset string `json:"asset"`
	// The fiat account (`fiat_account_id`) destination.
	FiatAccountId string `json:"fiat_account_id"`
	// The Profile (`profile_id`) to withdraw from.
	ProfileId string `json:"profile_id"`
	// The Identity (`identity_id`) of the user making the withdrawal. Required only for customers with [3rd-Party integrations](https://docs.paxos.com/crypto-brokerage/ledger-type#fiat-and-crypto-subledger) initiating transfers on behalf of their end users.
	IdentityId *string `json:"identity_id,omitempty"`
	// The Account (`account_id`) associated with the Identity of the user making the withdrawal. Required only for customers with [3rd-Party integrations](https://docs.paxos.com/crypto-brokerage/ledger-type#fiat-and-crypto-subledger) initiating transfers on behalf of their end users.
	AccountId *string `json:"account_id,omitempty"`
	// Optional client-specified metadata. Up to 6 key/value pairs may be provided. Each key and value must be less than or equal to 100 characters.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// Optional additional memo to be set on the outgoing wire. Only used for wire withdrawals.
	Memo *string `json:"memo,omitempty" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]*$"`
	// Total to withdraw, including fees. Specify exactly one of `amount` or `total`. When `total` is specified, Paxos initiates the withdrawal for `total` minus the fee.
	Total *string `json:"total,omitempty"`
}

type _CreateFiatWithdrawalRequest CreateFiatWithdrawalRequest

// NewCreateFiatWithdrawalRequest instantiates a new CreateFiatWithdrawalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFiatWithdrawalRequest(asset string, fiatAccountId string, profileId string) *CreateFiatWithdrawalRequest {
	this := CreateFiatWithdrawalRequest{}
	this.Asset = asset
	this.FiatAccountId = fiatAccountId
	this.ProfileId = profileId
	return &this
}

// NewCreateFiatWithdrawalRequestWithDefaults instantiates a new CreateFiatWithdrawalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFiatWithdrawalRequestWithDefaults() *CreateFiatWithdrawalRequest {
	this := CreateFiatWithdrawalRequest{}
	return &this
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *CreateFiatWithdrawalRequest) SetRefId(v string) {
	o.RefId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CreateFiatWithdrawalRequest) SetAmount(v string) {
	o.Amount = &v
}

// GetAsset returns the Asset field value
func (o *CreateFiatWithdrawalRequest) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *CreateFiatWithdrawalRequest) SetAsset(v string) {
	o.Asset = v
}

// GetFiatAccountId returns the FiatAccountId field value
func (o *CreateFiatWithdrawalRequest) GetFiatAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FiatAccountId
}

// GetFiatAccountIdOk returns a tuple with the FiatAccountId field value
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetFiatAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiatAccountId, true
}

// SetFiatAccountId sets field value
func (o *CreateFiatWithdrawalRequest) SetFiatAccountId(v string) {
	o.FiatAccountId = v
}

// GetProfileId returns the ProfileId field value
func (o *CreateFiatWithdrawalRequest) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *CreateFiatWithdrawalRequest) SetProfileId(v string) {
	o.ProfileId = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *CreateFiatWithdrawalRequest) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreateFiatWithdrawalRequest) SetAccountId(v string) {
	o.AccountId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CreateFiatWithdrawalRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *CreateFiatWithdrawalRequest) SetMemo(v string) {
	o.Memo = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CreateFiatWithdrawalRequest) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFiatWithdrawalRequest) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CreateFiatWithdrawalRequest) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *CreateFiatWithdrawalRequest) SetTotal(v string) {
	o.Total = &v
}

func (o CreateFiatWithdrawalRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFiatWithdrawalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["asset"] = o.Asset
	toSerialize["fiat_account_id"] = o.FiatAccountId
	toSerialize["profile_id"] = o.ProfileId
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

func (o *CreateFiatWithdrawalRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset",
		"fiat_account_id",
		"profile_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFiatWithdrawalRequest := _CreateFiatWithdrawalRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFiatWithdrawalRequest)

	if err != nil {
		return err
	}

	*o = CreateFiatWithdrawalRequest(varCreateFiatWithdrawalRequest)

	return err
}

type NullableCreateFiatWithdrawalRequest struct {
	value *CreateFiatWithdrawalRequest
	isSet bool
}

func (v NullableCreateFiatWithdrawalRequest) Get() *CreateFiatWithdrawalRequest {
	return v.value
}

func (v *NullableCreateFiatWithdrawalRequest) Set(val *CreateFiatWithdrawalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFiatWithdrawalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFiatWithdrawalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFiatWithdrawalRequest(val *CreateFiatWithdrawalRequest) *NullableCreateFiatWithdrawalRequest {
	return &NullableCreateFiatWithdrawalRequest{value: val, isSet: true}
}

func (v NullableCreateFiatWithdrawalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFiatWithdrawalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


