/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// RegulationStatus the model 'RegulationStatus'
type RegulationStatus string

// List of RegulationStatus
const (
	US_REGULATED RegulationStatus = "US_REGULATED"
	INTL_REGULATED RegulationStatus = "INTL_REGULATED"
	NON_REGULATED RegulationStatus = "NON_REGULATED"
)

// All allowed values of RegulationStatus enum
var AllowedRegulationStatusEnumValues = []RegulationStatus{
	"US_REGULATED",
	"INTL_REGULATED",
	"NON_REGULATED",
}

func (v *RegulationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegulationStatus(value)
	for _, existing := range AllowedRegulationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegulationStatus", value)
}

// NewRegulationStatusFromValue returns a pointer to a valid RegulationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegulationStatusFromValue(v string) (*RegulationStatus, error) {
	ev := RegulationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegulationStatus: valid values are %v", v, AllowedRegulationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegulationStatus) IsValid() bool {
	for _, existing := range AllowedRegulationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegulationStatus value
func (v RegulationStatus) Ptr() *RegulationStatus {
	return &v
}

type NullableRegulationStatus struct {
	value *RegulationStatus
	isSet bool
}

func (v NullableRegulationStatus) Get() *RegulationStatus {
	return v.value
}

func (v *NullableRegulationStatus) Set(val *RegulationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRegulationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRegulationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegulationStatus(val *RegulationStatus) *NullableRegulationStatus {
	return &NullableRegulationStatus{value: val, isSet: true}
}

func (v NullableRegulationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegulationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

