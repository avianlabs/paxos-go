/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProfileBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileBalance{}

// ProfileBalance A ProfileBalance represents the holdings of a particular asset within a profile.
type ProfileBalance struct {
	Asset Asset `json:"asset"`
	// The available asset balance for new debit requests.
	Available string `json:"available"`
	// The asset amount committed to pending orders.
	Trading string `json:"trading"`
}

type _ProfileBalance ProfileBalance

// NewProfileBalance instantiates a new ProfileBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileBalance(asset Asset, available string, trading string) *ProfileBalance {
	this := ProfileBalance{}
	this.Asset = asset
	this.Available = available
	this.Trading = trading
	return &this
}

// NewProfileBalanceWithDefaults instantiates a new ProfileBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileBalanceWithDefaults() *ProfileBalance {
	this := ProfileBalance{}
	return &this
}

// GetAsset returns the Asset field value
func (o *ProfileBalance) GetAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *ProfileBalance) GetAssetOk() (*Asset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *ProfileBalance) SetAsset(v Asset) {
	o.Asset = v
}

// GetAvailable returns the Available field value
func (o *ProfileBalance) GetAvailable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *ProfileBalance) GetAvailableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *ProfileBalance) SetAvailable(v string) {
	o.Available = v
}

// GetTrading returns the Trading field value
func (o *ProfileBalance) GetTrading() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Trading
}

// GetTradingOk returns a tuple with the Trading field value
// and a boolean to check if the value has been set.
func (o *ProfileBalance) GetTradingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trading, true
}

// SetTrading sets field value
func (o *ProfileBalance) SetTrading(v string) {
	o.Trading = v
}

func (o ProfileBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset"] = o.Asset
	toSerialize["available"] = o.Available
	toSerialize["trading"] = o.Trading
	return toSerialize, nil
}

func (o *ProfileBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset",
		"available",
		"trading",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfileBalance := _ProfileBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProfileBalance)

	if err != nil {
		return err
	}

	*o = ProfileBalance(varProfileBalance)

	return err
}

type NullableProfileBalance struct {
	value *ProfileBalance
	isSet bool
}

func (v NullableProfileBalance) Get() *ProfileBalance {
	return v.value
}

func (v *NullableProfileBalance) Set(val *ProfileBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileBalance(val *ProfileBalance) *NullableProfileBalance {
	return &NullableProfileBalance{value: val, isSet: true}
}

func (v NullableProfileBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


