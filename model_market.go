/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// Market the model 'Market'
type Market string

// List of Market
const (
	ETHEUR_Market Market = "ETHEUR"
	ETHSGD_Market Market = "ETHSGD"
	ETHUSD_Market Market = "ETHUSD"
	BTCEUR_Market Market = "BTCEUR"
	BTCSGD_Market Market = "BTCSGD"
	BTCUSD_Market Market = "BTCUSD"
	PAXGUSD_Market Market = "PAXGUSD"
	BCHUSD_Market Market = "BCHUSD"
	LTCUSD_Market Market = "LTCUSD"
	USDPUSD_Market Market = "USDPUSD"
	LINKUSD_Market Market = "LINKUSD"
	MATICUSD_Market Market = "MATICUSD"
	AAVEUSD_Market Market = "AAVEUSD"
	UNIUSD_Market Market = "UNIUSD"
)

// All allowed values of Market enum
var AllowedMarketEnumValues = []Market{
	"ETHEUR",
	"ETHSGD",
	"ETHUSD",
	"BTCEUR",
	"BTCSGD",
	"BTCUSD",
	"PAXGUSD",
	"BCHUSD",
	"LTCUSD",
	"USDPUSD",
	"LINKUSD",
	"MATICUSD",
	"AAVEUSD",
	"UNIUSD",
}

func (v *Market) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Market(value)
	for _, existing := range AllowedMarketEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Market", value)
}

// NewMarketFromValue returns a pointer to a valid Market
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarketFromValue(v string) (*Market, error) {
	ev := Market(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Market: valid values are %v", v, AllowedMarketEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Market) IsValid() bool {
	for _, existing := range AllowedMarketEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Market value
func (v Market) Ptr() *Market {
	return &v
}

type NullableMarket struct {
	value *Market
	isSet bool
}

func (v NullableMarket) Get() *Market {
	return v.value
}

func (v *NullableMarket) Set(val *Market) {
	v.value = val
	v.isSet = true
}

func (v NullableMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarket(val *Market) *NullableMarket {
	return &NullableMarket{value: val, isSet: true}
}

func (v NullableMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

