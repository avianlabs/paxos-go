/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// EmploymentStatus the model 'EmploymentStatus'
type EmploymentStatus string

// List of EmploymentStatus
const (
	EmploymentStatus_CONTRACTUAL EmploymentStatus = "CONTRACTUAL"
	EmploymentStatus_FULL_TIME EmploymentStatus = "FULL_TIME"
	EmploymentStatus_PART_TIME EmploymentStatus = "PART_TIME"
	EmploymentStatus_RETIRED EmploymentStatus = "RETIRED"
	EmploymentStatus_SELF_EMPLOYED EmploymentStatus = "SELF_EMPLOYED"
	EmploymentStatus_STUDENT EmploymentStatus = "STUDENT"
	EmploymentStatus_UNEMPLOYED EmploymentStatus = "UNEMPLOYED"
)

// All allowed values of EmploymentStatus enum
var AllowedEmploymentStatusEnumValues = []EmploymentStatus{
	"CONTRACTUAL",
	"FULL_TIME",
	"PART_TIME",
	"RETIRED",
	"SELF_EMPLOYED",
	"STUDENT",
	"UNEMPLOYED",
}

func (v *EmploymentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmploymentStatus(value)
	for _, existing := range AllowedEmploymentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmploymentStatus", value)
}

// NewEmploymentStatusFromValue returns a pointer to a valid EmploymentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmploymentStatusFromValue(v string) (*EmploymentStatus, error) {
	ev := EmploymentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmploymentStatus: valid values are %v", v, AllowedEmploymentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmploymentStatus) IsValid() bool {
	for _, existing := range AllowedEmploymentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmploymentStatus value
func (v EmploymentStatus) Ptr() *EmploymentStatus {
	return &v
}

type NullableEmploymentStatus struct {
	value *EmploymentStatus
	isSet bool
}

func (v NullableEmploymentStatus) Get() *EmploymentStatus {
	return v.value
}

func (v *NullableEmploymentStatus) Set(val *EmploymentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEmploymentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEmploymentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmploymentStatus(val *EmploymentStatus) *NullableEmploymentStatus {
	return &NullableEmploymentStatus{value: val, isSet: true}
}

func (v NullableEmploymentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmploymentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

