/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// PricePriceMarket 
type PricePriceMarket string

// List of PricePriceMarket
const (
	PricePriceMarket_ETHUSD PricePriceMarket = "ETHUSD"
	PricePriceMarket_BTCUSD PricePriceMarket = "BTCUSD"
	PricePriceMarket_PAXGUSD PricePriceMarket = "PAXGUSD"
	PricePriceMarket_BCHUSD PricePriceMarket = "BCHUSD"
	PricePriceMarket_LTCUSD PricePriceMarket = "LTCUSD"
	PricePriceMarket_USDPUSD PricePriceMarket = "USDPUSD"
	PricePriceMarket_LINKUSD PricePriceMarket = "LINKUSD"
	PricePriceMarket_MATICUSD PricePriceMarket = "MATICUSD"
	PricePriceMarket_AAVEUSD PricePriceMarket = "AAVEUSD"
	PricePriceMarket_UNIUSD PricePriceMarket = "UNIUSD"
)

// All allowed values of PricePriceMarket enum
var AllowedPricePriceMarketEnumValues = []PricePriceMarket{
	"ETHUSD",
	"BTCUSD",
	"PAXGUSD",
	"BCHUSD",
	"LTCUSD",
	"USDPUSD",
	"LINKUSD",
	"MATICUSD",
	"AAVEUSD",
	"UNIUSD",
}

func (v *PricePriceMarket) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PricePriceMarket(value)
	for _, existing := range AllowedPricePriceMarketEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PricePriceMarket", value)
}

// NewPricePriceMarketFromValue returns a pointer to a valid PricePriceMarket
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPricePriceMarketFromValue(v string) (*PricePriceMarket, error) {
	ev := PricePriceMarket(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PricePriceMarket: valid values are %v", v, AllowedPricePriceMarketEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PricePriceMarket) IsValid() bool {
	for _, existing := range AllowedPricePriceMarketEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PricePriceMarket value
func (v PricePriceMarket) Ptr() *PricePriceMarket {
	return &v
}

type NullablePricePriceMarket struct {
	value *PricePriceMarket
	isSet bool
}

func (v NullablePricePriceMarket) Get() *PricePriceMarket {
	return v.value
}

func (v *NullablePricePriceMarket) Set(val *PricePriceMarket) {
	v.value = val
	v.isSet = true
}

func (v NullablePricePriceMarket) IsSet() bool {
	return v.isSet
}

func (v *NullablePricePriceMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricePriceMarket(val *PricePriceMarket) *NullablePricePriceMarket {
	return &NullablePricePriceMarket{value: val, isSet: true}
}

func (v NullablePricePriceMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricePriceMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

