/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the Execution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Execution{}

// Execution struct for Execution
type Execution struct {
	ExecutionId *string `json:"execution_id,omitempty"`
	// The UUID of the order associated with the execution.
	OrderId *string `json:"order_id,omitempty"`
	// Timestamp of the execution.
	ExecutedAt *time.Time `json:"executed_at,omitempty"`
	Market *Market `json:"market,omitempty"`
	Side *OrderSide `json:"side,omitempty"`
	// Execution amount.
	Amount *string `json:"amount,omitempty"`
	// Execution price.
	Price *string `json:"price,omitempty"`
	// Amount of commission paid.
	Commission *string `json:"commission,omitempty"`
	// Currency of Commission payment. Fiat Only (USD, EUR, SGD).
	CommissionAsset *string `json:"commission_asset,omitempty"`
	// Amount of rebate applied.
	Rebate *string `json:"rebate,omitempty"`
	// Currency of the rebate. Fiat Only (USD, EUR, SGD).
	RebateAsset *string `json:"rebate_asset,omitempty"`
	// Account ID associated with the execution.
	AccountId *string `json:"account_id,omitempty"`
	// The total asset traded (asset amount multiplied by price paid).
	GrossTradeAmount *string `json:"gross_trade_amount,omitempty"`
}

// NewExecution instantiates a new Execution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecution() *Execution {
	this := Execution{}
	return &this
}

// NewExecutionWithDefaults instantiates a new Execution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionWithDefaults() *Execution {
	this := Execution{}
	return &this
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *Execution) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *Execution) HasExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *Execution) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Execution) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Execution) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *Execution) SetOrderId(v string) {
	o.OrderId = &v
}

// GetExecutedAt returns the ExecutedAt field value if set, zero value otherwise.
func (o *Execution) GetExecutedAt() time.Time {
	if o == nil || IsNil(o.ExecutedAt) {
		var ret time.Time
		return ret
	}
	return *o.ExecutedAt
}

// GetExecutedAtOk returns a tuple with the ExecutedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExecutedAt) {
		return nil, false
	}
	return o.ExecutedAt, true
}

// HasExecutedAt returns a boolean if a field has been set.
func (o *Execution) HasExecutedAt() bool {
	if o != nil && !IsNil(o.ExecutedAt) {
		return true
	}

	return false
}

// SetExecutedAt gets a reference to the given time.Time and assigns it to the ExecutedAt field.
func (o *Execution) SetExecutedAt(v time.Time) {
	o.ExecutedAt = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *Execution) GetMarket() Market {
	if o == nil || IsNil(o.Market) {
		var ret Market
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetMarketOk() (*Market, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *Execution) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given Market and assigns it to the Market field.
func (o *Execution) SetMarket(v Market) {
	o.Market = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Execution) GetSide() OrderSide {
	if o == nil || IsNil(o.Side) {
		var ret OrderSide
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetSideOk() (*OrderSide, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Execution) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given OrderSide and assigns it to the Side field.
func (o *Execution) SetSide(v OrderSide) {
	o.Side = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Execution) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Execution) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *Execution) SetAmount(v string) {
	o.Amount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Execution) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Execution) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *Execution) SetPrice(v string) {
	o.Price = &v
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *Execution) GetCommission() string {
	if o == nil || IsNil(o.Commission) {
		var ret string
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetCommissionOk() (*string, bool) {
	if o == nil || IsNil(o.Commission) {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *Execution) HasCommission() bool {
	if o != nil && !IsNil(o.Commission) {
		return true
	}

	return false
}

// SetCommission gets a reference to the given string and assigns it to the Commission field.
func (o *Execution) SetCommission(v string) {
	o.Commission = &v
}

// GetCommissionAsset returns the CommissionAsset field value if set, zero value otherwise.
func (o *Execution) GetCommissionAsset() string {
	if o == nil || IsNil(o.CommissionAsset) {
		var ret string
		return ret
	}
	return *o.CommissionAsset
}

// GetCommissionAssetOk returns a tuple with the CommissionAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetCommissionAssetOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionAsset) {
		return nil, false
	}
	return o.CommissionAsset, true
}

// HasCommissionAsset returns a boolean if a field has been set.
func (o *Execution) HasCommissionAsset() bool {
	if o != nil && !IsNil(o.CommissionAsset) {
		return true
	}

	return false
}

// SetCommissionAsset gets a reference to the given string and assigns it to the CommissionAsset field.
func (o *Execution) SetCommissionAsset(v string) {
	o.CommissionAsset = &v
}

// GetRebate returns the Rebate field value if set, zero value otherwise.
func (o *Execution) GetRebate() string {
	if o == nil || IsNil(o.Rebate) {
		var ret string
		return ret
	}
	return *o.Rebate
}

// GetRebateOk returns a tuple with the Rebate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetRebateOk() (*string, bool) {
	if o == nil || IsNil(o.Rebate) {
		return nil, false
	}
	return o.Rebate, true
}

// HasRebate returns a boolean if a field has been set.
func (o *Execution) HasRebate() bool {
	if o != nil && !IsNil(o.Rebate) {
		return true
	}

	return false
}

// SetRebate gets a reference to the given string and assigns it to the Rebate field.
func (o *Execution) SetRebate(v string) {
	o.Rebate = &v
}

// GetRebateAsset returns the RebateAsset field value if set, zero value otherwise.
func (o *Execution) GetRebateAsset() string {
	if o == nil || IsNil(o.RebateAsset) {
		var ret string
		return ret
	}
	return *o.RebateAsset
}

// GetRebateAssetOk returns a tuple with the RebateAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetRebateAssetOk() (*string, bool) {
	if o == nil || IsNil(o.RebateAsset) {
		return nil, false
	}
	return o.RebateAsset, true
}

// HasRebateAsset returns a boolean if a field has been set.
func (o *Execution) HasRebateAsset() bool {
	if o != nil && !IsNil(o.RebateAsset) {
		return true
	}

	return false
}

// SetRebateAsset gets a reference to the given string and assigns it to the RebateAsset field.
func (o *Execution) SetRebateAsset(v string) {
	o.RebateAsset = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Execution) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Execution) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Execution) SetAccountId(v string) {
	o.AccountId = &v
}

// GetGrossTradeAmount returns the GrossTradeAmount field value if set, zero value otherwise.
func (o *Execution) GetGrossTradeAmount() string {
	if o == nil || IsNil(o.GrossTradeAmount) {
		var ret string
		return ret
	}
	return *o.GrossTradeAmount
}

// GetGrossTradeAmountOk returns a tuple with the GrossTradeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetGrossTradeAmountOk() (*string, bool) {
	if o == nil || IsNil(o.GrossTradeAmount) {
		return nil, false
	}
	return o.GrossTradeAmount, true
}

// HasGrossTradeAmount returns a boolean if a field has been set.
func (o *Execution) HasGrossTradeAmount() bool {
	if o != nil && !IsNil(o.GrossTradeAmount) {
		return true
	}

	return false
}

// SetGrossTradeAmount gets a reference to the given string and assigns it to the GrossTradeAmount field.
func (o *Execution) SetGrossTradeAmount(v string) {
	o.GrossTradeAmount = &v
}

func (o Execution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Execution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecutionId) {
		toSerialize["execution_id"] = o.ExecutionId
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.ExecutedAt) {
		toSerialize["executed_at"] = o.ExecutedAt
	}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Commission) {
		toSerialize["commission"] = o.Commission
	}
	if !IsNil(o.CommissionAsset) {
		toSerialize["commission_asset"] = o.CommissionAsset
	}
	if !IsNil(o.Rebate) {
		toSerialize["rebate"] = o.Rebate
	}
	if !IsNil(o.RebateAsset) {
		toSerialize["rebate_asset"] = o.RebateAsset
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.GrossTradeAmount) {
		toSerialize["gross_trade_amount"] = o.GrossTradeAmount
	}
	return toSerialize, nil
}

type NullableExecution struct {
	value *Execution
	isSet bool
}

func (v NullableExecution) Get() *Execution {
	return v.value
}

func (v *NullableExecution) Set(val *Execution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecution(val *Execution) *NullableExecution {
	return &NullableExecution{value: val, isSet: true}
}

func (v NullableExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


