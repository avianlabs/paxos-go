/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the CustomerDueDiligence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerDueDiligence{}

// CustomerDueDiligence struct for CustomerDueDiligence
type CustomerDueDiligence struct {
	// A list of alternate names or aliases associated with the Identity.
	Aliases []string `json:"aliases,omitempty"`
	EstimatedNetWorth *CustomerDueDiligenceNetWorthRange `json:"estimated_net_worth,omitempty"`
	EstimatedYearlyIncome *CustomerDueDiligenceYearlyIncomeRange `json:"estimated_yearly_income,omitempty"`
	ExpectedTransferValue *CustomerDueDiligenceTransferValueRange `json:"expected_transfer_value,omitempty"`
	SourceOfWealth *WealthSource `json:"source_of_wealth,omitempty"`
	SourceOfFunds *FundsSource `json:"source_of_funds,omitempty"`
	PurposeOfAccount *AccountPurpose `json:"purpose_of_account,omitempty"`
	EmploymentStatus *EmploymentStatus `json:"employment_status,omitempty"`
	EmploymentIndustrySector *InstitutionSubType `json:"employment_industry_sector,omitempty"`
	IndustrySector *InstitutionSubType `json:"industry_sector,omitempty"`
	// Whether or not the institution tied to the Identity has an underlying trust structure.
	HasUnderlyingTrustStructure *bool `json:"has_underlying_trust_structure,omitempty"`
	// Whether or not the institution tied to the Identity has nominee shareholders.
	HasNomineeShareholders *bool `json:"has_nominee_shareholders,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// `true` or `false` indicating whether or not the company is listed on a public stock exchange.
	IsPubliclyTraded *bool `json:"is_publicly_traded,omitempty"`
	MerchantFundingSource *MerchantFundingSourceFundingSource `json:"merchant_funding_source,omitempty"`
	// Regions where the customer base is located.
	CustomerRegions []CustomerRegion `json:"customer_regions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomerDueDiligence CustomerDueDiligence

// NewCustomerDueDiligence instantiates a new CustomerDueDiligence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerDueDiligence() *CustomerDueDiligence {
	this := CustomerDueDiligence{}
	return &this
}

// NewCustomerDueDiligenceWithDefaults instantiates a new CustomerDueDiligence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerDueDiligenceWithDefaults() *CustomerDueDiligence {
	this := CustomerDueDiligence{}
	return &this
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *CustomerDueDiligence) SetAliases(v []string) {
	o.Aliases = v
}

// GetEstimatedNetWorth returns the EstimatedNetWorth field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetEstimatedNetWorth() CustomerDueDiligenceNetWorthRange {
	if o == nil || IsNil(o.EstimatedNetWorth) {
		var ret CustomerDueDiligenceNetWorthRange
		return ret
	}
	return *o.EstimatedNetWorth
}

// GetEstimatedNetWorthOk returns a tuple with the EstimatedNetWorth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetEstimatedNetWorthOk() (*CustomerDueDiligenceNetWorthRange, bool) {
	if o == nil || IsNil(o.EstimatedNetWorth) {
		return nil, false
	}
	return o.EstimatedNetWorth, true
}

// HasEstimatedNetWorth returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasEstimatedNetWorth() bool {
	if o != nil && !IsNil(o.EstimatedNetWorth) {
		return true
	}

	return false
}

// SetEstimatedNetWorth gets a reference to the given CustomerDueDiligenceNetWorthRange and assigns it to the EstimatedNetWorth field.
func (o *CustomerDueDiligence) SetEstimatedNetWorth(v CustomerDueDiligenceNetWorthRange) {
	o.EstimatedNetWorth = &v
}

// GetEstimatedYearlyIncome returns the EstimatedYearlyIncome field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetEstimatedYearlyIncome() CustomerDueDiligenceYearlyIncomeRange {
	if o == nil || IsNil(o.EstimatedYearlyIncome) {
		var ret CustomerDueDiligenceYearlyIncomeRange
		return ret
	}
	return *o.EstimatedYearlyIncome
}

// GetEstimatedYearlyIncomeOk returns a tuple with the EstimatedYearlyIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetEstimatedYearlyIncomeOk() (*CustomerDueDiligenceYearlyIncomeRange, bool) {
	if o == nil || IsNil(o.EstimatedYearlyIncome) {
		return nil, false
	}
	return o.EstimatedYearlyIncome, true
}

// HasEstimatedYearlyIncome returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasEstimatedYearlyIncome() bool {
	if o != nil && !IsNil(o.EstimatedYearlyIncome) {
		return true
	}

	return false
}

// SetEstimatedYearlyIncome gets a reference to the given CustomerDueDiligenceYearlyIncomeRange and assigns it to the EstimatedYearlyIncome field.
func (o *CustomerDueDiligence) SetEstimatedYearlyIncome(v CustomerDueDiligenceYearlyIncomeRange) {
	o.EstimatedYearlyIncome = &v
}

// GetExpectedTransferValue returns the ExpectedTransferValue field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetExpectedTransferValue() CustomerDueDiligenceTransferValueRange {
	if o == nil || IsNil(o.ExpectedTransferValue) {
		var ret CustomerDueDiligenceTransferValueRange
		return ret
	}
	return *o.ExpectedTransferValue
}

// GetExpectedTransferValueOk returns a tuple with the ExpectedTransferValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetExpectedTransferValueOk() (*CustomerDueDiligenceTransferValueRange, bool) {
	if o == nil || IsNil(o.ExpectedTransferValue) {
		return nil, false
	}
	return o.ExpectedTransferValue, true
}

// HasExpectedTransferValue returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasExpectedTransferValue() bool {
	if o != nil && !IsNil(o.ExpectedTransferValue) {
		return true
	}

	return false
}

// SetExpectedTransferValue gets a reference to the given CustomerDueDiligenceTransferValueRange and assigns it to the ExpectedTransferValue field.
func (o *CustomerDueDiligence) SetExpectedTransferValue(v CustomerDueDiligenceTransferValueRange) {
	o.ExpectedTransferValue = &v
}

// GetSourceOfWealth returns the SourceOfWealth field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetSourceOfWealth() WealthSource {
	if o == nil || IsNil(o.SourceOfWealth) {
		var ret WealthSource
		return ret
	}
	return *o.SourceOfWealth
}

// GetSourceOfWealthOk returns a tuple with the SourceOfWealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetSourceOfWealthOk() (*WealthSource, bool) {
	if o == nil || IsNil(o.SourceOfWealth) {
		return nil, false
	}
	return o.SourceOfWealth, true
}

// HasSourceOfWealth returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasSourceOfWealth() bool {
	if o != nil && !IsNil(o.SourceOfWealth) {
		return true
	}

	return false
}

// SetSourceOfWealth gets a reference to the given WealthSource and assigns it to the SourceOfWealth field.
func (o *CustomerDueDiligence) SetSourceOfWealth(v WealthSource) {
	o.SourceOfWealth = &v
}

// GetSourceOfFunds returns the SourceOfFunds field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetSourceOfFunds() FundsSource {
	if o == nil || IsNil(o.SourceOfFunds) {
		var ret FundsSource
		return ret
	}
	return *o.SourceOfFunds
}

// GetSourceOfFundsOk returns a tuple with the SourceOfFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetSourceOfFundsOk() (*FundsSource, bool) {
	if o == nil || IsNil(o.SourceOfFunds) {
		return nil, false
	}
	return o.SourceOfFunds, true
}

// HasSourceOfFunds returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasSourceOfFunds() bool {
	if o != nil && !IsNil(o.SourceOfFunds) {
		return true
	}

	return false
}

// SetSourceOfFunds gets a reference to the given FundsSource and assigns it to the SourceOfFunds field.
func (o *CustomerDueDiligence) SetSourceOfFunds(v FundsSource) {
	o.SourceOfFunds = &v
}

// GetPurposeOfAccount returns the PurposeOfAccount field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetPurposeOfAccount() AccountPurpose {
	if o == nil || IsNil(o.PurposeOfAccount) {
		var ret AccountPurpose
		return ret
	}
	return *o.PurposeOfAccount
}

// GetPurposeOfAccountOk returns a tuple with the PurposeOfAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetPurposeOfAccountOk() (*AccountPurpose, bool) {
	if o == nil || IsNil(o.PurposeOfAccount) {
		return nil, false
	}
	return o.PurposeOfAccount, true
}

// HasPurposeOfAccount returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasPurposeOfAccount() bool {
	if o != nil && !IsNil(o.PurposeOfAccount) {
		return true
	}

	return false
}

// SetPurposeOfAccount gets a reference to the given AccountPurpose and assigns it to the PurposeOfAccount field.
func (o *CustomerDueDiligence) SetPurposeOfAccount(v AccountPurpose) {
	o.PurposeOfAccount = &v
}

// GetEmploymentStatus returns the EmploymentStatus field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetEmploymentStatus() EmploymentStatus {
	if o == nil || IsNil(o.EmploymentStatus) {
		var ret EmploymentStatus
		return ret
	}
	return *o.EmploymentStatus
}

// GetEmploymentStatusOk returns a tuple with the EmploymentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetEmploymentStatusOk() (*EmploymentStatus, bool) {
	if o == nil || IsNil(o.EmploymentStatus) {
		return nil, false
	}
	return o.EmploymentStatus, true
}

// HasEmploymentStatus returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasEmploymentStatus() bool {
	if o != nil && !IsNil(o.EmploymentStatus) {
		return true
	}

	return false
}

// SetEmploymentStatus gets a reference to the given EmploymentStatus and assigns it to the EmploymentStatus field.
func (o *CustomerDueDiligence) SetEmploymentStatus(v EmploymentStatus) {
	o.EmploymentStatus = &v
}

// GetEmploymentIndustrySector returns the EmploymentIndustrySector field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetEmploymentIndustrySector() InstitutionSubType {
	if o == nil || IsNil(o.EmploymentIndustrySector) {
		var ret InstitutionSubType
		return ret
	}
	return *o.EmploymentIndustrySector
}

// GetEmploymentIndustrySectorOk returns a tuple with the EmploymentIndustrySector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetEmploymentIndustrySectorOk() (*InstitutionSubType, bool) {
	if o == nil || IsNil(o.EmploymentIndustrySector) {
		return nil, false
	}
	return o.EmploymentIndustrySector, true
}

// HasEmploymentIndustrySector returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasEmploymentIndustrySector() bool {
	if o != nil && !IsNil(o.EmploymentIndustrySector) {
		return true
	}

	return false
}

// SetEmploymentIndustrySector gets a reference to the given InstitutionSubType and assigns it to the EmploymentIndustrySector field.
func (o *CustomerDueDiligence) SetEmploymentIndustrySector(v InstitutionSubType) {
	o.EmploymentIndustrySector = &v
}

// GetIndustrySector returns the IndustrySector field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetIndustrySector() InstitutionSubType {
	if o == nil || IsNil(o.IndustrySector) {
		var ret InstitutionSubType
		return ret
	}
	return *o.IndustrySector
}

// GetIndustrySectorOk returns a tuple with the IndustrySector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetIndustrySectorOk() (*InstitutionSubType, bool) {
	if o == nil || IsNil(o.IndustrySector) {
		return nil, false
	}
	return o.IndustrySector, true
}

// HasIndustrySector returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasIndustrySector() bool {
	if o != nil && !IsNil(o.IndustrySector) {
		return true
	}

	return false
}

// SetIndustrySector gets a reference to the given InstitutionSubType and assigns it to the IndustrySector field.
func (o *CustomerDueDiligence) SetIndustrySector(v InstitutionSubType) {
	o.IndustrySector = &v
}

// GetHasUnderlyingTrustStructure returns the HasUnderlyingTrustStructure field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetHasUnderlyingTrustStructure() bool {
	if o == nil || IsNil(o.HasUnderlyingTrustStructure) {
		var ret bool
		return ret
	}
	return *o.HasUnderlyingTrustStructure
}

// GetHasUnderlyingTrustStructureOk returns a tuple with the HasUnderlyingTrustStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetHasUnderlyingTrustStructureOk() (*bool, bool) {
	if o == nil || IsNil(o.HasUnderlyingTrustStructure) {
		return nil, false
	}
	return o.HasUnderlyingTrustStructure, true
}

// HasHasUnderlyingTrustStructure returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasHasUnderlyingTrustStructure() bool {
	if o != nil && !IsNil(o.HasUnderlyingTrustStructure) {
		return true
	}

	return false
}

// SetHasUnderlyingTrustStructure gets a reference to the given bool and assigns it to the HasUnderlyingTrustStructure field.
func (o *CustomerDueDiligence) SetHasUnderlyingTrustStructure(v bool) {
	o.HasUnderlyingTrustStructure = &v
}

// GetHasNomineeShareholders returns the HasNomineeShareholders field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetHasNomineeShareholders() bool {
	if o == nil || IsNil(o.HasNomineeShareholders) {
		var ret bool
		return ret
	}
	return *o.HasNomineeShareholders
}

// GetHasNomineeShareholdersOk returns a tuple with the HasNomineeShareholders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetHasNomineeShareholdersOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNomineeShareholders) {
		return nil, false
	}
	return o.HasNomineeShareholders, true
}

// HasHasNomineeShareholders returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasHasNomineeShareholders() bool {
	if o != nil && !IsNil(o.HasNomineeShareholders) {
		return true
	}

	return false
}

// SetHasNomineeShareholders gets a reference to the given bool and assigns it to the HasNomineeShareholders field.
func (o *CustomerDueDiligence) SetHasNomineeShareholders(v bool) {
	o.HasNomineeShareholders = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CustomerDueDiligence) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetIsPubliclyTraded returns the IsPubliclyTraded field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetIsPubliclyTraded() bool {
	if o == nil || IsNil(o.IsPubliclyTraded) {
		var ret bool
		return ret
	}
	return *o.IsPubliclyTraded
}

// GetIsPubliclyTradedOk returns a tuple with the IsPubliclyTraded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetIsPubliclyTradedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPubliclyTraded) {
		return nil, false
	}
	return o.IsPubliclyTraded, true
}

// HasIsPubliclyTraded returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasIsPubliclyTraded() bool {
	if o != nil && !IsNil(o.IsPubliclyTraded) {
		return true
	}

	return false
}

// SetIsPubliclyTraded gets a reference to the given bool and assigns it to the IsPubliclyTraded field.
func (o *CustomerDueDiligence) SetIsPubliclyTraded(v bool) {
	o.IsPubliclyTraded = &v
}

// GetMerchantFundingSource returns the MerchantFundingSource field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetMerchantFundingSource() MerchantFundingSourceFundingSource {
	if o == nil || IsNil(o.MerchantFundingSource) {
		var ret MerchantFundingSourceFundingSource
		return ret
	}
	return *o.MerchantFundingSource
}

// GetMerchantFundingSourceOk returns a tuple with the MerchantFundingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetMerchantFundingSourceOk() (*MerchantFundingSourceFundingSource, bool) {
	if o == nil || IsNil(o.MerchantFundingSource) {
		return nil, false
	}
	return o.MerchantFundingSource, true
}

// HasMerchantFundingSource returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasMerchantFundingSource() bool {
	if o != nil && !IsNil(o.MerchantFundingSource) {
		return true
	}

	return false
}

// SetMerchantFundingSource gets a reference to the given MerchantFundingSourceFundingSource and assigns it to the MerchantFundingSource field.
func (o *CustomerDueDiligence) SetMerchantFundingSource(v MerchantFundingSourceFundingSource) {
	o.MerchantFundingSource = &v
}

// GetCustomerRegions returns the CustomerRegions field value if set, zero value otherwise.
func (o *CustomerDueDiligence) GetCustomerRegions() []CustomerRegion {
	if o == nil || IsNil(o.CustomerRegions) {
		var ret []CustomerRegion
		return ret
	}
	return o.CustomerRegions
}

// GetCustomerRegionsOk returns a tuple with the CustomerRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDueDiligence) GetCustomerRegionsOk() ([]CustomerRegion, bool) {
	if o == nil || IsNil(o.CustomerRegions) {
		return nil, false
	}
	return o.CustomerRegions, true
}

// HasCustomerRegions returns a boolean if a field has been set.
func (o *CustomerDueDiligence) HasCustomerRegions() bool {
	if o != nil && !IsNil(o.CustomerRegions) {
		return true
	}

	return false
}

// SetCustomerRegions gets a reference to the given []CustomerRegion and assigns it to the CustomerRegions field.
func (o *CustomerDueDiligence) SetCustomerRegions(v []CustomerRegion) {
	o.CustomerRegions = v
}

func (o CustomerDueDiligence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerDueDiligence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.EstimatedNetWorth) {
		toSerialize["estimated_net_worth"] = o.EstimatedNetWorth
	}
	if !IsNil(o.EstimatedYearlyIncome) {
		toSerialize["estimated_yearly_income"] = o.EstimatedYearlyIncome
	}
	if !IsNil(o.ExpectedTransferValue) {
		toSerialize["expected_transfer_value"] = o.ExpectedTransferValue
	}
	if !IsNil(o.SourceOfWealth) {
		toSerialize["source_of_wealth"] = o.SourceOfWealth
	}
	if !IsNil(o.SourceOfFunds) {
		toSerialize["source_of_funds"] = o.SourceOfFunds
	}
	if !IsNil(o.PurposeOfAccount) {
		toSerialize["purpose_of_account"] = o.PurposeOfAccount
	}
	if !IsNil(o.EmploymentStatus) {
		toSerialize["employment_status"] = o.EmploymentStatus
	}
	if !IsNil(o.EmploymentIndustrySector) {
		toSerialize["employment_industry_sector"] = o.EmploymentIndustrySector
	}
	if !IsNil(o.IndustrySector) {
		toSerialize["industry_sector"] = o.IndustrySector
	}
	if !IsNil(o.HasUnderlyingTrustStructure) {
		toSerialize["has_underlying_trust_structure"] = o.HasUnderlyingTrustStructure
	}
	if !IsNil(o.HasNomineeShareholders) {
		toSerialize["has_nominee_shareholders"] = o.HasNomineeShareholders
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.IsPubliclyTraded) {
		toSerialize["is_publicly_traded"] = o.IsPubliclyTraded
	}
	if !IsNil(o.MerchantFundingSource) {
		toSerialize["merchant_funding_source"] = o.MerchantFundingSource
	}
	if !IsNil(o.CustomerRegions) {
		toSerialize["customer_regions"] = o.CustomerRegions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerDueDiligence) UnmarshalJSON(data []byte) (err error) {
	varCustomerDueDiligence := _CustomerDueDiligence{}

	err = json.Unmarshal(data, &varCustomerDueDiligence)

	if err != nil {
		return err
	}

	*o = CustomerDueDiligence(varCustomerDueDiligence)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aliases")
		delete(additionalProperties, "estimated_net_worth")
		delete(additionalProperties, "estimated_yearly_income")
		delete(additionalProperties, "expected_transfer_value")
		delete(additionalProperties, "source_of_wealth")
		delete(additionalProperties, "source_of_funds")
		delete(additionalProperties, "purpose_of_account")
		delete(additionalProperties, "employment_status")
		delete(additionalProperties, "employment_industry_sector")
		delete(additionalProperties, "industry_sector")
		delete(additionalProperties, "has_underlying_trust_structure")
		delete(additionalProperties, "has_nominee_shareholders")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "is_publicly_traded")
		delete(additionalProperties, "merchant_funding_source")
		delete(additionalProperties, "customer_regions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerDueDiligence struct {
	value *CustomerDueDiligence
	isSet bool
}

func (v NullableCustomerDueDiligence) Get() *CustomerDueDiligence {
	return v.value
}

func (v *NullableCustomerDueDiligence) Set(val *CustomerDueDiligence) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerDueDiligence) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerDueDiligence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerDueDiligence(val *CustomerDueDiligence) *NullableCustomerDueDiligence {
	return &NullableCustomerDueDiligence{value: val, isSet: true}
}

func (v NullableCustomerDueDiligence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerDueDiligence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


