/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// TransferStatus the model 'TransferStatus'
type TransferStatus string

// List of TransferStatus
const (
	PENDING TransferStatus = "PENDING"
	COMPLETED TransferStatus = "COMPLETED"
	FAILED TransferStatus = "FAILED"
)

// All allowed values of TransferStatus enum
var AllowedTransferStatusEnumValues = []TransferStatus{
	"PENDING",
	"COMPLETED",
	"FAILED",
}

func (v *TransferStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferStatus(value)
	for _, existing := range AllowedTransferStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferStatus", value)
}

// NewTransferStatusFromValue returns a pointer to a valid TransferStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferStatusFromValue(v string) (*TransferStatus, error) {
	ev := TransferStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferStatus: valid values are %v", v, AllowedTransferStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferStatus) IsValid() bool {
	for _, existing := range AllowedTransferStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferStatus value
func (v TransferStatus) Ptr() *TransferStatus {
	return &v
}

type NullableTransferStatus struct {
	value *TransferStatus
	isSet bool
}

func (v NullableTransferStatus) Get() *TransferStatus {
	return v.value
}

func (v *NullableTransferStatus) Set(val *TransferStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferStatus(val *TransferStatus) *NullableTransferStatus {
	return &NullableTransferStatus{value: val, isSet: true}
}

func (v NullableTransferStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

