/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// InstitutionDetailsCIPIDType the model 'InstitutionDetailsCIPIDType'
type InstitutionDetailsCIPIDType string

// List of InstitutionDetailsCIPIDType
const (
	INSTITUTIONDETAILSCIPIDTYPE_EIN InstitutionDetailsCIPIDType = "EIN"
	INSTITUTIONDETAILSCIPIDTYPE_SSN InstitutionDetailsCIPIDType = "SSN"
	INSTITUTIONDETAILSCIPIDTYPE_ITIN InstitutionDetailsCIPIDType = "ITIN"
	INSTITUTIONDETAILSCIPIDTYPE_REGISTRATION_NUMBER InstitutionDetailsCIPIDType = "REGISTRATION_NUMBER"
)

// All allowed values of InstitutionDetailsCIPIDType enum
var AllowedInstitutionDetailsCIPIDTypeEnumValues = []InstitutionDetailsCIPIDType{
	"EIN",
	"SSN",
	"ITIN",
	"REGISTRATION_NUMBER",
}

func (v *InstitutionDetailsCIPIDType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstitutionDetailsCIPIDType(value)
	for _, existing := range AllowedInstitutionDetailsCIPIDTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstitutionDetailsCIPIDType", value)
}

// NewInstitutionDetailsCIPIDTypeFromValue returns a pointer to a valid InstitutionDetailsCIPIDType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstitutionDetailsCIPIDTypeFromValue(v string) (*InstitutionDetailsCIPIDType, error) {
	ev := InstitutionDetailsCIPIDType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstitutionDetailsCIPIDType: valid values are %v", v, AllowedInstitutionDetailsCIPIDTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstitutionDetailsCIPIDType) IsValid() bool {
	for _, existing := range AllowedInstitutionDetailsCIPIDTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstitutionDetailsCIPIDType value
func (v InstitutionDetailsCIPIDType) Ptr() *InstitutionDetailsCIPIDType {
	return &v
}

type NullableInstitutionDetailsCIPIDType struct {
	value *InstitutionDetailsCIPIDType
	isSet bool
}

func (v NullableInstitutionDetailsCIPIDType) Get() *InstitutionDetailsCIPIDType {
	return v.value
}

func (v *NullableInstitutionDetailsCIPIDType) Set(val *InstitutionDetailsCIPIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionDetailsCIPIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionDetailsCIPIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionDetailsCIPIDType(val *InstitutionDetailsCIPIDType) *NullableInstitutionDetailsCIPIDType {
	return &NullableInstitutionDetailsCIPIDType{value: val, isSet: true}
}

func (v NullableInstitutionDetailsCIPIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionDetailsCIPIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

