/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote A Quote is a guaranteed price to buy or sell on a particular market for a limited period of time (a \"held rate\").
type Quote struct {
	// The UUID of the quote.
	Id string `json:"id"`
	Market Market `json:"market"`
	Side OrderSide `json:"side"`
	// The guaranteed price, held until expires_at.
	Price string `json:"price"`
	BaseAsset Asset `json:"base_asset"`
	QuoteAsset Asset `json:"quote_asset"`
	// The time at which the quote was first offered.
	CreatedAt time.Time `json:"created_at"`
	// The time at which the quote expires.
	ExpiresAt time.Time `json:"expires_at"`
}

type _Quote Quote

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote(id string, market Market, side OrderSide, price string, baseAsset Asset, quoteAsset Asset, createdAt time.Time, expiresAt time.Time) *Quote {
	this := Quote{}
	this.Id = id
	this.Market = market
	this.Side = side
	this.Price = price
	this.BaseAsset = baseAsset
	this.QuoteAsset = quoteAsset
	this.CreatedAt = createdAt
	this.ExpiresAt = expiresAt
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	return &this
}

// GetId returns the Id field value
func (o *Quote) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Quote) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Quote) SetId(v string) {
	o.Id = v
}

// GetMarket returns the Market field value
func (o *Quote) GetMarket() Market {
	if o == nil {
		var ret Market
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *Quote) GetMarketOk() (*Market, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *Quote) SetMarket(v Market) {
	o.Market = v
}

// GetSide returns the Side field value
func (o *Quote) GetSide() OrderSide {
	if o == nil {
		var ret OrderSide
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *Quote) GetSideOk() (*OrderSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *Quote) SetSide(v OrderSide) {
	o.Side = v
}

// GetPrice returns the Price field value
func (o *Quote) GetPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Quote) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Quote) SetPrice(v string) {
	o.Price = v
}

// GetBaseAsset returns the BaseAsset field value
func (o *Quote) GetBaseAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.BaseAsset
}

// GetBaseAssetOk returns a tuple with the BaseAsset field value
// and a boolean to check if the value has been set.
func (o *Quote) GetBaseAssetOk() (*Asset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAsset, true
}

// SetBaseAsset sets field value
func (o *Quote) SetBaseAsset(v Asset) {
	o.BaseAsset = v
}

// GetQuoteAsset returns the QuoteAsset field value
func (o *Quote) GetQuoteAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.QuoteAsset
}

// GetQuoteAssetOk returns a tuple with the QuoteAsset field value
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteAssetOk() (*Asset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteAsset, true
}

// SetQuoteAsset sets field value
func (o *Quote) SetQuoteAsset(v Asset) {
	o.QuoteAsset = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Quote) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Quote) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Quote) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *Quote) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Quote) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *Quote) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["market"] = o.Market
	toSerialize["side"] = o.Side
	toSerialize["price"] = o.Price
	toSerialize["base_asset"] = o.BaseAsset
	toSerialize["quote_asset"] = o.QuoteAsset
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["expires_at"] = o.ExpiresAt
	return toSerialize, nil
}

func (o *Quote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"market",
		"side",
		"price",
		"base_asset",
		"quote_asset",
		"created_at",
		"expires_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuote := _Quote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuote)

	if err != nil {
		return err
	}

	*o = Quote(varQuote)

	return err
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


