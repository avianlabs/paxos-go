/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// IdentityStatus the model 'IdentityStatus'
type IdentityStatus string

// List of IdentityStatus
const (
	IDENTITYSTATUS_PENDING IdentityStatus = "PENDING"
	IDENTITYSTATUS_ERROR IdentityStatus = "ERROR"
	IDENTITYSTATUS_APPROVED IdentityStatus = "APPROVED"
	IDENTITYSTATUS_DENIED IdentityStatus = "DENIED"
	IDENTITYSTATUS_DISABLED IdentityStatus = "DISABLED"
)

// All allowed values of IdentityStatus enum
var AllowedIdentityStatusEnumValues = []IdentityStatus{
	"PENDING",
	"ERROR",
	"APPROVED",
	"DENIED",
	"DISABLED",
}

func (v *IdentityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityStatus(value)
	for _, existing := range AllowedIdentityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityStatus", value)
}

// NewIdentityStatusFromValue returns a pointer to a valid IdentityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityStatusFromValue(v string) (*IdentityStatus, error) {
	ev := IdentityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityStatus: valid values are %v", v, AllowedIdentityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityStatus) IsValid() bool {
	for _, existing := range AllowedIdentityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityStatus value
func (v IdentityStatus) Ptr() *IdentityStatus {
	return &v
}

type NullableIdentityStatus struct {
	value *IdentityStatus
	isSet bool
}

func (v NullableIdentityStatus) Get() *IdentityStatus {
	return v.value
}

func (v *NullableIdentityStatus) Set(val *IdentityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityStatus(val *IdentityStatus) *NullableIdentityStatus {
	return &NullableIdentityStatus{value: val, isSet: true}
}

func (v NullableIdentityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

