/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// OrderStatus the model 'OrderStatus'
type OrderStatus string

// List of OrderStatus
const (
	OrderStatus_PENDING_SUBMISSION OrderStatus = "PENDING_SUBMISSION"
	OrderStatus_SUBMITTED OrderStatus = "SUBMITTED"
	OrderStatus_OPEN OrderStatus = "OPEN"
	OrderStatus_FILLED OrderStatus = "FILLED"
	OrderStatus_CANCELLED OrderStatus = "CANCELLED"
	OrderStatus_REJECTED OrderStatus = "REJECTED"
)

// All allowed values of OrderStatus enum
var AllowedOrderStatusEnumValues = []OrderStatus{
	"PENDING_SUBMISSION",
	"SUBMITTED",
	"OPEN",
	"FILLED",
	"CANCELLED",
	"REJECTED",
}

func (v *OrderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderStatus(value)
	for _, existing := range AllowedOrderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderStatus", value)
}

// NewOrderStatusFromValue returns a pointer to a valid OrderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStatusFromValue(v string) (*OrderStatus, error) {
	ev := OrderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderStatus: valid values are %v", v, AllowedOrderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderStatus) IsValid() bool {
	for _, existing := range AllowedOrderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderStatus value
func (v OrderStatus) Ptr() *OrderStatus {
	return &v
}

type NullableOrderStatus struct {
	value *OrderStatus
	isSet bool
}

func (v NullableOrderStatus) Get() *OrderStatus {
	return v.value
}

func (v *NullableOrderStatus) Set(val *OrderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStatus(val *OrderStatus) *NullableOrderStatus {
	return &NullableOrderStatus{value: val, isSet: true}
}

func (v NullableOrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

