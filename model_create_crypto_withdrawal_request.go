/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p>

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateCryptoWithdrawalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCryptoWithdrawalRequest{}

// CreateCryptoWithdrawalRequest struct for CreateCryptoWithdrawalRequest
type CreateCryptoWithdrawalRequest struct {
	Id string `json:"id"`
	// Client-specified ID for replay protection and lookup.
	RefId *string `json:"ref_id,omitempty"`
	// The profile from which to withdraw.
	ProfileId string `json:"profile_id"`
	// The Identity of the user making the withdrawal.
	IdentityId *string `json:"identity_id,omitempty"`
	// The destination address.
	DestinationAddress string `json:"destination_address"`
	// The asset to withdraw, e.g. \"BTC\" , \"ETH\". Always specify the `crypto_network` for all withdrawals.
	Asset string `json:"asset"`
	// The asset's balance to debit for withdrawals of Paxos-minted USD stablecoin.
	BalanceAsset *string `json:"balance_asset,omitempty"`
	// Optional client-specified metadata. Up to 6 key/value pairs may be provided. Each key and value must be less than or equal to 100 characters.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The Account associated to the identity of the user making the withdrawal.
	AccountId *string `json:"account_id,omitempty"`
	// Optional id of the guaranteed fee.
	FeeId         *string       `json:"fee_id,omitempty"`
	CryptoNetwork CryptoNetwork `json:"crypto_network"`
	// The amount to withdraw. Specify exactly one of `amount` or `total`, otherwise an error is returned.
	Amount *string `json:"amount,omitempty"`
	// Total amount to withdraw, including fees. Specify exactly one of `amount` or `total`, otherwise an error is returned.
	Total       *string      `json:"total,omitempty"`
	Beneficiary *Beneficiary `json:"beneficiary,omitempty"`
}

type _CreateCryptoWithdrawalRequest CreateCryptoWithdrawalRequest

// NewCreateCryptoWithdrawalRequest instantiates a new CreateCryptoWithdrawalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCryptoWithdrawalRequest(profileId string, destinationAddress string, asset string, cryptoNetwork CryptoNetwork) *CreateCryptoWithdrawalRequest {
	this := CreateCryptoWithdrawalRequest{}
	this.ProfileId = profileId
	this.DestinationAddress = destinationAddress
	this.Asset = asset
	this.CryptoNetwork = cryptoNetwork
	return &this
}

// NewCreateCryptoWithdrawalRequestWithDefaults instantiates a new CreateCryptoWithdrawalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCryptoWithdrawalRequestWithDefaults() *CreateCryptoWithdrawalRequest {
	this := CreateCryptoWithdrawalRequest{}
	return &this
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *CreateCryptoWithdrawalRequest) SetRefId(v string) {
	o.RefId = &v
}

// GetProfileId returns the ProfileId field value
func (o *CreateCryptoWithdrawalRequest) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *CreateCryptoWithdrawalRequest) SetProfileId(v string) {
	o.ProfileId = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *CreateCryptoWithdrawalRequest) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetDestinationAddress returns the DestinationAddress field value
func (o *CreateCryptoWithdrawalRequest) GetDestinationAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetDestinationAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationAddress, true
}

// SetDestinationAddress sets field value
func (o *CreateCryptoWithdrawalRequest) SetDestinationAddress(v string) {
	o.DestinationAddress = v
}

// GetAsset returns the Asset field value
func (o *CreateCryptoWithdrawalRequest) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *CreateCryptoWithdrawalRequest) SetAsset(v string) {
	o.Asset = v
}

// GetBalanceAsset returns the BalanceAsset field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetBalanceAsset() string {
	if o == nil || IsNil(o.BalanceAsset) {
		var ret string
		return ret
	}
	return *o.BalanceAsset
}

// GetBalanceAssetOk returns a tuple with the BalanceAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetBalanceAssetOk() (*string, bool) {
	if o == nil || IsNil(o.BalanceAsset) {
		return nil, false
	}
	return o.BalanceAsset, true
}

// HasBalanceAsset returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasBalanceAsset() bool {
	if o != nil && !IsNil(o.BalanceAsset) {
		return true
	}

	return false
}

// SetBalanceAsset gets a reference to the given string and assigns it to the BalanceAsset field.
func (o *CreateCryptoWithdrawalRequest) SetBalanceAsset(v string) {
	o.BalanceAsset = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CreateCryptoWithdrawalRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreateCryptoWithdrawalRequest) SetAccountId(v string) {
	o.AccountId = &v
}

// GetFeeId returns the FeeId field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetFeeId() string {
	if o == nil || IsNil(o.FeeId) {
		var ret string
		return ret
	}
	return *o.FeeId
}

// GetFeeIdOk returns a tuple with the FeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetFeeIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeeId) {
		return nil, false
	}
	return o.FeeId, true
}

// HasFeeId returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasFeeId() bool {
	if o != nil && !IsNil(o.FeeId) {
		return true
	}

	return false
}

// SetFeeId gets a reference to the given string and assigns it to the FeeId field.
func (o *CreateCryptoWithdrawalRequest) SetFeeId(v string) {
	o.FeeId = &v
}

// GetCryptoNetwork returns the CryptoNetwork field value
func (o *CreateCryptoWithdrawalRequest) GetCryptoNetwork() CryptoNetwork {
	if o == nil {
		var ret CryptoNetwork
		return ret
	}

	return o.CryptoNetwork
}

// GetCryptoNetworkOk returns a tuple with the CryptoNetwork field value
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetCryptoNetworkOk() (*CryptoNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoNetwork, true
}

// SetCryptoNetwork sets field value
func (o *CreateCryptoWithdrawalRequest) SetCryptoNetwork(v CryptoNetwork) {
	o.CryptoNetwork = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CreateCryptoWithdrawalRequest) SetAmount(v string) {
	o.Amount = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *CreateCryptoWithdrawalRequest) SetTotal(v string) {
	o.Total = &v
}

// GetBeneficiary returns the Beneficiary field value if set, zero value otherwise.
func (o *CreateCryptoWithdrawalRequest) GetBeneficiary() Beneficiary {
	if o == nil || IsNil(o.Beneficiary) {
		var ret Beneficiary
		return ret
	}
	return *o.Beneficiary
}

// GetBeneficiaryOk returns a tuple with the Beneficiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCryptoWithdrawalRequest) GetBeneficiaryOk() (*Beneficiary, bool) {
	if o == nil || IsNil(o.Beneficiary) {
		return nil, false
	}
	return o.Beneficiary, true
}

// HasBeneficiary returns a boolean if a field has been set.
func (o *CreateCryptoWithdrawalRequest) HasBeneficiary() bool {
	if o != nil && !IsNil(o.Beneficiary) {
		return true
	}

	return false
}

// SetBeneficiary gets a reference to the given Beneficiary and assigns it to the Beneficiary field.
func (o *CreateCryptoWithdrawalRequest) SetBeneficiary(v Beneficiary) {
	o.Beneficiary = &v
}

func (o CreateCryptoWithdrawalRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCryptoWithdrawalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	toSerialize["profile_id"] = o.ProfileId
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	toSerialize["destination_address"] = o.DestinationAddress
	toSerialize["asset"] = o.Asset
	if !IsNil(o.BalanceAsset) {
		toSerialize["balance_asset"] = o.BalanceAsset
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.FeeId) {
		toSerialize["fee_id"] = o.FeeId
	}
	toSerialize["crypto_network"] = o.CryptoNetwork
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Beneficiary) {
		toSerialize["beneficiary"] = o.Beneficiary
	}
	return toSerialize, nil
}

func (o *CreateCryptoWithdrawalRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"profile_id",
		"destination_address",
		"asset",
		"crypto_network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCryptoWithdrawalRequest := _CreateCryptoWithdrawalRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCryptoWithdrawalRequest)

	if err != nil {
		return err
	}

	*o = CreateCryptoWithdrawalRequest(varCreateCryptoWithdrawalRequest)

	return err
}

type NullableCreateCryptoWithdrawalRequest struct {
	value *CreateCryptoWithdrawalRequest
	isSet bool
}

func (v NullableCreateCryptoWithdrawalRequest) Get() *CreateCryptoWithdrawalRequest {
	return v.value
}

func (v *NullableCreateCryptoWithdrawalRequest) Set(val *CreateCryptoWithdrawalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCryptoWithdrawalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCryptoWithdrawalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCryptoWithdrawalRequest(val *CreateCryptoWithdrawalRequest) *NullableCreateCryptoWithdrawalRequest {
	return &NullableCreateCryptoWithdrawalRequest{value: val, isSet: true}
}

func (v NullableCreateCryptoWithdrawalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCryptoWithdrawalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
