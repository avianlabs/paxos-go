/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the HistoricalPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricalPrice{}

// HistoricalPrice struct for HistoricalPrice
type HistoricalPrice struct {
	// Time-weighted average price over the specified time period, beginning at the defined timestamp. For example, if `increment` is set to `ONE_HOUR`, then `average_price` is the time-weighted average for an hour. The entire time period must be completed to display results.
	AveragePrice *string `json:"average_price,omitempty"`
	// Timestamp at the beginning of an increment.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HistoricalPrice HistoricalPrice

// NewHistoricalPrice instantiates a new HistoricalPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricalPrice() *HistoricalPrice {
	this := HistoricalPrice{}
	return &this
}

// NewHistoricalPriceWithDefaults instantiates a new HistoricalPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricalPriceWithDefaults() *HistoricalPrice {
	this := HistoricalPrice{}
	return &this
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *HistoricalPrice) GetAveragePrice() string {
	if o == nil || IsNil(o.AveragePrice) {
		var ret string
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalPrice) GetAveragePriceOk() (*string, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *HistoricalPrice) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given string and assigns it to the AveragePrice field.
func (o *HistoricalPrice) SetAveragePrice(v string) {
	o.AveragePrice = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *HistoricalPrice) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalPrice) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *HistoricalPrice) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *HistoricalPrice) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o HistoricalPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricalPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AveragePrice) {
		toSerialize["average_price"] = o.AveragePrice
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HistoricalPrice) UnmarshalJSON(data []byte) (err error) {
	varHistoricalPrice := _HistoricalPrice{}

	err = json.Unmarshal(data, &varHistoricalPrice)

	if err != nil {
		return err
	}

	*o = HistoricalPrice(varHistoricalPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "average_price")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHistoricalPrice struct {
	value *HistoricalPrice
	isSet bool
}

func (v NullableHistoricalPrice) Get() *HistoricalPrice {
	return v.value
}

func (v *NullableHistoricalPrice) Set(val *HistoricalPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricalPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricalPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricalPrice(val *HistoricalPrice) *NullableHistoricalPrice {
	return &NullableHistoricalPrice{value: val, isSet: true}
}

func (v NullableHistoricalPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricalPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


