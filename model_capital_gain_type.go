/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// CapitalGainType the model 'CapitalGainType'
type CapitalGainType string

// List of CapitalGainType
const (
	LONG_TERM_CapitalGainType CapitalGainType = "LONG_TERM"
	SHORT_TERM_CapitalGainType CapitalGainType = "SHORT_TERM"
	EXEMPT_CapitalGainType CapitalGainType = "EXEMPT"
)

// All allowed values of CapitalGainType enum
var AllowedCapitalGainTypeEnumValues = []CapitalGainType{
	"LONG_TERM",
	"SHORT_TERM",
	"EXEMPT",
}

func (v *CapitalGainType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CapitalGainType(value)
	for _, existing := range AllowedCapitalGainTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CapitalGainType", value)
}

// NewCapitalGainTypeFromValue returns a pointer to a valid CapitalGainType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCapitalGainTypeFromValue(v string) (*CapitalGainType, error) {
	ev := CapitalGainType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CapitalGainType: valid values are %v", v, AllowedCapitalGainTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CapitalGainType) IsValid() bool {
	for _, existing := range AllowedCapitalGainTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CapitalGainType value
func (v CapitalGainType) Ptr() *CapitalGainType {
	return &v
}

type NullableCapitalGainType struct {
	value *CapitalGainType
	isSet bool
}

func (v NullableCapitalGainType) Get() *CapitalGainType {
	return v.value
}

func (v *NullableCapitalGainType) Set(val *CapitalGainType) {
	v.value = val
	v.isSet = true
}

func (v NullableCapitalGainType) IsSet() bool {
	return v.isSet
}

func (v *NullableCapitalGainType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapitalGainType(val *CapitalGainType) *NullableCapitalGainType {
	return &NullableCapitalGainType{value: val, isSet: true}
}

func (v NullableCapitalGainType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapitalGainType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

