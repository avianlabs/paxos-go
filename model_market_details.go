/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
)

// checks if the MarketDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketDetails{}

// MarketDetails struct for MarketDetails
type MarketDetails struct {
	Market *Market `json:"market,omitempty"`
	BaseAsset *string `json:"base_asset,omitempty"`
	// Quote asset. Fiat Only (USD, EUR, SGD).
	QuoteAsset *string `json:"quote_asset,omitempty"`
	TickRate *string `json:"tick_rate,omitempty"`
}

// NewMarketDetails instantiates a new MarketDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketDetails() *MarketDetails {
	this := MarketDetails{}
	return &this
}

// NewMarketDetailsWithDefaults instantiates a new MarketDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketDetailsWithDefaults() *MarketDetails {
	this := MarketDetails{}
	return &this
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *MarketDetails) GetMarket() Market {
	if o == nil || IsNil(o.Market) {
		var ret Market
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketDetails) GetMarketOk() (*Market, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *MarketDetails) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given Market and assigns it to the Market field.
func (o *MarketDetails) SetMarket(v Market) {
	o.Market = &v
}

// GetBaseAsset returns the BaseAsset field value if set, zero value otherwise.
func (o *MarketDetails) GetBaseAsset() string {
	if o == nil || IsNil(o.BaseAsset) {
		var ret string
		return ret
	}
	return *o.BaseAsset
}

// GetBaseAssetOk returns a tuple with the BaseAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketDetails) GetBaseAssetOk() (*string, bool) {
	if o == nil || IsNil(o.BaseAsset) {
		return nil, false
	}
	return o.BaseAsset, true
}

// HasBaseAsset returns a boolean if a field has been set.
func (o *MarketDetails) HasBaseAsset() bool {
	if o != nil && !IsNil(o.BaseAsset) {
		return true
	}

	return false
}

// SetBaseAsset gets a reference to the given string and assigns it to the BaseAsset field.
func (o *MarketDetails) SetBaseAsset(v string) {
	o.BaseAsset = &v
}

// GetQuoteAsset returns the QuoteAsset field value if set, zero value otherwise.
func (o *MarketDetails) GetQuoteAsset() string {
	if o == nil || IsNil(o.QuoteAsset) {
		var ret string
		return ret
	}
	return *o.QuoteAsset
}

// GetQuoteAssetOk returns a tuple with the QuoteAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketDetails) GetQuoteAssetOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteAsset) {
		return nil, false
	}
	return o.QuoteAsset, true
}

// HasQuoteAsset returns a boolean if a field has been set.
func (o *MarketDetails) HasQuoteAsset() bool {
	if o != nil && !IsNil(o.QuoteAsset) {
		return true
	}

	return false
}

// SetQuoteAsset gets a reference to the given string and assigns it to the QuoteAsset field.
func (o *MarketDetails) SetQuoteAsset(v string) {
	o.QuoteAsset = &v
}

// GetTickRate returns the TickRate field value if set, zero value otherwise.
func (o *MarketDetails) GetTickRate() string {
	if o == nil || IsNil(o.TickRate) {
		var ret string
		return ret
	}
	return *o.TickRate
}

// GetTickRateOk returns a tuple with the TickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketDetails) GetTickRateOk() (*string, bool) {
	if o == nil || IsNil(o.TickRate) {
		return nil, false
	}
	return o.TickRate, true
}

// HasTickRate returns a boolean if a field has been set.
func (o *MarketDetails) HasTickRate() bool {
	if o != nil && !IsNil(o.TickRate) {
		return true
	}

	return false
}

// SetTickRate gets a reference to the given string and assigns it to the TickRate field.
func (o *MarketDetails) SetTickRate(v string) {
	o.TickRate = &v
}

func (o MarketDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !IsNil(o.BaseAsset) {
		toSerialize["base_asset"] = o.BaseAsset
	}
	if !IsNil(o.QuoteAsset) {
		toSerialize["quote_asset"] = o.QuoteAsset
	}
	if !IsNil(o.TickRate) {
		toSerialize["tick_rate"] = o.TickRate
	}
	return toSerialize, nil
}

type NullableMarketDetails struct {
	value *MarketDetails
	isSet bool
}

func (v NullableMarketDetails) Get() *MarketDetails {
	return v.value
}

func (v *NullableMarketDetails) Set(val *MarketDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketDetails(val *MarketDetails) *NullableMarketDetails {
	return &NullableMarketDetails{value: val, isSet: true}
}

func (v NullableMarketDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


