/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// MerchantFundingSourceFundingSource the model 'MerchantFundingSourceFundingSource'
type MerchantFundingSourceFundingSource string

// List of MerchantFundingSourceFundingSource
const (
	BUSINESS_LOANS_FINANCING MerchantFundingSourceFundingSource = "BUSINESS_LOANS_FINANCING"
	SALARY_SAVINGS MerchantFundingSourceFundingSource = "SALARY_SAVINGS"
	INVESTMENT_GAINS MerchantFundingSourceFundingSource = "INVESTMENT_GAINS"
	INHERITANCE MerchantFundingSourceFundingSource = "INHERITANCE"
	REAL_ESTATE_INCOME MerchantFundingSourceFundingSource = "REAL_ESTATE_INCOME"
	NON_PROFIT_SOURCES MerchantFundingSourceFundingSource = "NON_PROFIT_SOURCES"
	OTHER_BUSINESS_INCOME MerchantFundingSourceFundingSource = "OTHER_BUSINESS_INCOME"
)

// All allowed values of MerchantFundingSourceFundingSource enum
var AllowedMerchantFundingSourceFundingSourceEnumValues = []MerchantFundingSourceFundingSource{
	"BUSINESS_LOANS_FINANCING",
	"SALARY_SAVINGS",
	"INVESTMENT_GAINS",
	"INHERITANCE",
	"REAL_ESTATE_INCOME",
	"NON_PROFIT_SOURCES",
	"OTHER_BUSINESS_INCOME",
}

func (v *MerchantFundingSourceFundingSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MerchantFundingSourceFundingSource(value)
	for _, existing := range AllowedMerchantFundingSourceFundingSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MerchantFundingSourceFundingSource", value)
}

// NewMerchantFundingSourceFundingSourceFromValue returns a pointer to a valid MerchantFundingSourceFundingSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMerchantFundingSourceFundingSourceFromValue(v string) (*MerchantFundingSourceFundingSource, error) {
	ev := MerchantFundingSourceFundingSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MerchantFundingSourceFundingSource: valid values are %v", v, AllowedMerchantFundingSourceFundingSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MerchantFundingSourceFundingSource) IsValid() bool {
	for _, existing := range AllowedMerchantFundingSourceFundingSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MerchantFundingSourceFundingSource value
func (v MerchantFundingSourceFundingSource) Ptr() *MerchantFundingSourceFundingSource {
	return &v
}

type NullableMerchantFundingSourceFundingSource struct {
	value *MerchantFundingSourceFundingSource
	isSet bool
}

func (v NullableMerchantFundingSourceFundingSource) Get() *MerchantFundingSourceFundingSource {
	return v.value
}

func (v *NullableMerchantFundingSourceFundingSource) Set(val *MerchantFundingSourceFundingSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantFundingSourceFundingSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantFundingSourceFundingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantFundingSourceFundingSource(val *MerchantFundingSourceFundingSource) *NullableMerchantFundingSourceFundingSource {
	return &NullableMerchantFundingSourceFundingSource{value: val, isSet: true}
}

func (v NullableMerchantFundingSourceFundingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantFundingSourceFundingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

