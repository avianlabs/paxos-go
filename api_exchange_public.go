/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// ExchangePublicAPIService ExchangePublicAPI service
type ExchangePublicAPIService service

type ApiListProfileExecutionsRequest struct {
	ctx context.Context
	ApiService *ExchangePublicAPIService
	profileId string
	orderId *string
	sinceExecutionId *string
	rangeBegin *time.Time
	rangeEnd *time.Time
	pageCursor *string
	limit *int32
}

// Filter executions for a single order id.
func (r ApiListProfileExecutionsRequest) OrderId(orderId string) ApiListProfileExecutionsRequest {
	r.orderId = &orderId
	return r
}

// Excludes executions after this id.
func (r ApiListProfileExecutionsRequest) SinceExecutionId(sinceExecutionId string) ApiListProfileExecutionsRequest {
	r.sinceExecutionId = &sinceExecutionId
	return r
}

// Only return records after this timestamp, inclusive. RFC3339 format, like &#x60;2006-01-02T15:04:05Z&#x60;.
func (r ApiListProfileExecutionsRequest) RangeBegin(rangeBegin time.Time) ApiListProfileExecutionsRequest {
	r.rangeBegin = &rangeBegin
	return r
}

// Only return records before this timestamp, inclusive. RFC3339 format, like &#x60;2006-01-02T15:04:05Z&#x60;.
func (r ApiListProfileExecutionsRequest) RangeEnd(rangeEnd time.Time) ApiListProfileExecutionsRequest {
	r.rangeEnd = &rangeEnd
	return r
}

// Cursor token for fetching the next page.
func (r ApiListProfileExecutionsRequest) PageCursor(pageCursor string) ApiListProfileExecutionsRequest {
	r.pageCursor = &pageCursor
	return r
}

// Number of results to return.
func (r ApiListProfileExecutionsRequest) Limit(limit int32) ApiListProfileExecutionsRequest {
	r.limit = &limit
	return r
}

func (r ApiListProfileExecutionsRequest) Execute() (*ListExecutionsResponse, *http.Response, error) {
	return r.ApiService.ListProfileExecutionsExecute(r)
}

/*
ListProfileExecutions List Executions

Retrieves full details of underlying executions for a profile id with optional filters.
If pagination details are not set the response will default to 20 items. Additionally, this endpoint will return a maximum of 500 items per page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId The ProfileId associated with the orders.
 @return ApiListProfileExecutionsRequest
*/
func (a *ExchangePublicAPIService) ListProfileExecutions(ctx context.Context, profileId string) ApiListProfileExecutionsRequest {
	return ApiListProfileExecutionsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ListExecutionsResponse
func (a *ExchangePublicAPIService) ListProfileExecutionsExecute(r ApiListProfileExecutionsRequest) (*ListExecutionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListExecutionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangePublicAPIService.ListProfileExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profile_id}/executions"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_id", r.orderId, "form", "")
	}
	if r.sinceExecutionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_execution_id", r.sinceExecutionId, "form", "")
	}
	if r.rangeBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range.begin", r.rangeBegin, "form", "")
	}
	if r.rangeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range.end", r.rangeEnd, "form", "")
	}
	if r.pageCursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_cursor", r.pageCursor, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProfileOrdersRequest struct {
	ctx context.Context
	ApiService *ExchangePublicAPIService
	profileId string
	market *string
	status *string
	orderTimeBegin *time.Time
	orderTimeEnd *time.Time
	refIds *[]string
	pageCursor *string
	limit *int32
}

// Filter by the trading pair.
func (r ApiListProfileOrdersRequest) Market(market string) ApiListProfileOrdersRequest {
	r.market = &market
	return r
}

// Filter by the status of the order.
func (r ApiListProfileOrdersRequest) Status(status string) ApiListProfileOrdersRequest {
	r.status = &status
	return r
}

// Only return records after this timestamp, inclusive. RFC3339 format, like &#x60;2006-01-02T15:04:05Z&#x60;.
func (r ApiListProfileOrdersRequest) OrderTimeBegin(orderTimeBegin time.Time) ApiListProfileOrdersRequest {
	r.orderTimeBegin = &orderTimeBegin
	return r
}

// Only return records before this timestamp, inclusive. RFC3339 format, like &#x60;2006-01-02T15:04:05Z&#x60;.
func (r ApiListProfileOrdersRequest) OrderTimeEnd(orderTimeEnd time.Time) ApiListProfileOrdersRequest {
	r.orderTimeEnd = &orderTimeEnd
	return r
}

// The idempotence ids provided during order creation.
func (r ApiListProfileOrdersRequest) RefIds(refIds []string) ApiListProfileOrdersRequest {
	r.refIds = &refIds
	return r
}

// Cursor token for fetching the next page. If using this then do not use paginationLimit and paginationOffset fields.
func (r ApiListProfileOrdersRequest) PageCursor(pageCursor string) ApiListProfileOrdersRequest {
	r.pageCursor = &pageCursor
	return r
}

// Number of results to return. If using this then do not use paginationLimit and paginationOffset fields.
func (r ApiListProfileOrdersRequest) Limit(limit int32) ApiListProfileOrdersRequest {
	r.limit = &limit
	return r
}

func (r ApiListProfileOrdersRequest) Execute() (*ListOrdersResponse, *http.Response, error) {
	return r.ApiService.ListProfileOrdersExecute(r)
}

/*
ListProfileOrders List Orders

Retrieves full details of orders associated with a profile id with optional filters.

Notes:
- Pagination Limit has a max of 1000 and Pagination Offset a max of 10000. If a larger Offset is needed, please contact support.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId The ProfileId associated with the orders.
 @return ApiListProfileOrdersRequest
*/
func (a *ExchangePublicAPIService) ListProfileOrders(ctx context.Context, profileId string) ApiListProfileOrdersRequest {
	return ApiListProfileOrdersRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return ListOrdersResponse
func (a *ExchangePublicAPIService) ListProfileOrdersExecute(r ApiListProfileOrdersRequest) (*ListOrdersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrdersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangePublicAPIService.ListProfileOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profile_id}/orders"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.market != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "market", r.market, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.orderTimeBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_time.begin", r.orderTimeBegin, "form", "")
	}
	if r.orderTimeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_time.end", r.orderTimeEnd, "form", "")
	}
	if r.refIds != nil {
		t := *r.refIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ref_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ref_ids", t, "form", "multi")
		}
	}
	if r.pageCursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_cursor", r.pageCursor, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
