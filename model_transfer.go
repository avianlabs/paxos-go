/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Transfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transfer{}

// Transfer struct for Transfer
type Transfer struct {
	// The Paxos transfer ID.
	Id string `json:"id"`
	// The Paxos customer ID.
	CustomerId string `json:"customer_id"`
	// The target Profile of the transfer. The profile asset balance is debited or credited by the transfer.
	ProfileId string `json:"profile_id"`
	// The Paxos ID of the Identity associated with the transfer.
	IdentityId *string `json:"identity_id,omitempty"`
	// The optional client-specified ID for replay protection and lookup.
	RefId *string `json:"ref_id,omitempty"`
	// The amount sent in the transfer.
	Amount string `json:"amount" validate:"regexp=^[0-9]*\\\\.?[0-9]+$"`
	// The balance change from this transfer: amount - fee for deposits, and amount + fee for withdrawals. Unsigned.
	Total string `json:"total" validate:"regexp=^[0-9]*\\\\.?[0-9]+$"`
	// The fee paid for the transfer.
	Fee string `json:"fee" validate:"regexp=^[0-9]*\\\\.?[0-9]+$"`
	// The asset for this transfer. This profile's balance of this asset will be debited or credited.
	Asset string `json:"asset"`
	// The balance_asset represents what asset's balance was affected at Paxos with this transfer. It only differs from Asset when the transfer includes conversion.
	BalanceAsset *string `json:"balance_asset,omitempty"`
	Direction TransferDirection `json:"direction"`
	Type TransferType `json:"type"`
	Status TransferStatus `json:"status"`
	// The time at which this transfer record was created.
	CreatedAt time.Time `json:"created_at"`
	// The time at which this transfer record was most recently updated.
	UpdatedAt time.Time `json:"updated_at"`
	// Optional client-specified stored metadata. For deposit event transfers this metadata is copied from the crypto deposit address or fiat deposit memo used for attribution. Up to 6 key/value pairs may be returned. Each key and value must be less than or equal to 100 characters.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The destination crypto address.
	DestinationAddress *string `json:"destination_address,omitempty"`
	CryptoNetwork *CryptoNetwork `json:"crypto_network,omitempty"`
	// For crypto transactions, the on-chain transaction hash.
	CryptoTxHash *string `json:"crypto_tx_hash,omitempty"`
	// For crypto transactions, the output index or output address.
	CryptoTxIndex *string `json:"crypto_tx_index,omitempty"`
	// The Paxos ID of the Account associated with the transfer.
	AccountId *string `json:"account_id,omitempty"`
	AutoConversion *AutoConversion `json:"auto_conversion,omitempty"`
	// Unique identifier linking the debit and credit sides of an internal or Paxos transfer.
	GroupId *string `json:"group_id,omitempty"`
	// For fiat withdrawals, the Paxos ID of the owner's fiat account (UUID).
	FiatAccountId *string `json:"fiat_account_id,omitempty"`
	SecondaryStatus *SecondaryStatus `json:"secondary_status,omitempty"`
}

type _Transfer Transfer

// NewTransfer instantiates a new Transfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfer(id string, customerId string, profileId string, amount string, total string, fee string, asset string, direction TransferDirection, type_ TransferType, status TransferStatus, createdAt time.Time, updatedAt time.Time) *Transfer {
	this := Transfer{}
	this.Id = id
	this.CustomerId = customerId
	this.ProfileId = profileId
	this.Amount = amount
	this.Total = total
	this.Fee = fee
	this.Asset = asset
	this.Direction = direction
	this.Type = type_
	this.Status = status
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewTransferWithDefaults instantiates a new Transfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferWithDefaults() *Transfer {
	this := Transfer{}
	return &this
}

// GetId returns the Id field value
func (o *Transfer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transfer) SetId(v string) {
	o.Id = v
}

// GetCustomerId returns the CustomerId field value
func (o *Transfer) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *Transfer) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetProfileId returns the ProfileId field value
func (o *Transfer) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *Transfer) SetProfileId(v string) {
	o.ProfileId = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *Transfer) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *Transfer) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *Transfer) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Transfer) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Transfer) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Transfer) SetRefId(v string) {
	o.RefId = &v
}

// GetAmount returns the Amount field value
func (o *Transfer) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transfer) SetAmount(v string) {
	o.Amount = v
}

// GetTotal returns the Total field value
func (o *Transfer) GetTotal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Transfer) SetTotal(v string) {
	o.Total = v
}

// GetFee returns the Fee field value
func (o *Transfer) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *Transfer) SetFee(v string) {
	o.Fee = v
}

// GetAsset returns the Asset field value
func (o *Transfer) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Transfer) SetAsset(v string) {
	o.Asset = v
}

// GetBalanceAsset returns the BalanceAsset field value if set, zero value otherwise.
func (o *Transfer) GetBalanceAsset() string {
	if o == nil || IsNil(o.BalanceAsset) {
		var ret string
		return ret
	}
	return *o.BalanceAsset
}

// GetBalanceAssetOk returns a tuple with the BalanceAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetBalanceAssetOk() (*string, bool) {
	if o == nil || IsNil(o.BalanceAsset) {
		return nil, false
	}
	return o.BalanceAsset, true
}

// HasBalanceAsset returns a boolean if a field has been set.
func (o *Transfer) HasBalanceAsset() bool {
	if o != nil && !IsNil(o.BalanceAsset) {
		return true
	}

	return false
}

// SetBalanceAsset gets a reference to the given string and assigns it to the BalanceAsset field.
func (o *Transfer) SetBalanceAsset(v string) {
	o.BalanceAsset = &v
}

// GetDirection returns the Direction field value
func (o *Transfer) GetDirection() TransferDirection {
	if o == nil {
		var ret TransferDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetDirectionOk() (*TransferDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *Transfer) SetDirection(v TransferDirection) {
	o.Direction = v
}

// GetType returns the Type field value
func (o *Transfer) GetType() TransferType {
	if o == nil {
		var ret TransferType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTypeOk() (*TransferType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transfer) SetType(v TransferType) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *Transfer) GetStatus() TransferStatus {
	if o == nil {
		var ret TransferStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetStatusOk() (*TransferStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transfer) SetStatus(v TransferStatus) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Transfer) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Transfer) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Transfer) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Transfer) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Transfer) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Transfer) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Transfer) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetDestinationAddress returns the DestinationAddress field value if set, zero value otherwise.
func (o *Transfer) GetDestinationAddress() string {
	if o == nil || IsNil(o.DestinationAddress) {
		var ret string
		return ret
	}
	return *o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetDestinationAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationAddress) {
		return nil, false
	}
	return o.DestinationAddress, true
}

// HasDestinationAddress returns a boolean if a field has been set.
func (o *Transfer) HasDestinationAddress() bool {
	if o != nil && !IsNil(o.DestinationAddress) {
		return true
	}

	return false
}

// SetDestinationAddress gets a reference to the given string and assigns it to the DestinationAddress field.
func (o *Transfer) SetDestinationAddress(v string) {
	o.DestinationAddress = &v
}

// GetCryptoNetwork returns the CryptoNetwork field value if set, zero value otherwise.
func (o *Transfer) GetCryptoNetwork() CryptoNetwork {
	if o == nil || IsNil(o.CryptoNetwork) {
		var ret CryptoNetwork
		return ret
	}
	return *o.CryptoNetwork
}

// GetCryptoNetworkOk returns a tuple with the CryptoNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetCryptoNetworkOk() (*CryptoNetwork, bool) {
	if o == nil || IsNil(o.CryptoNetwork) {
		return nil, false
	}
	return o.CryptoNetwork, true
}

// HasCryptoNetwork returns a boolean if a field has been set.
func (o *Transfer) HasCryptoNetwork() bool {
	if o != nil && !IsNil(o.CryptoNetwork) {
		return true
	}

	return false
}

// SetCryptoNetwork gets a reference to the given CryptoNetwork and assigns it to the CryptoNetwork field.
func (o *Transfer) SetCryptoNetwork(v CryptoNetwork) {
	o.CryptoNetwork = &v
}

// GetCryptoTxHash returns the CryptoTxHash field value if set, zero value otherwise.
func (o *Transfer) GetCryptoTxHash() string {
	if o == nil || IsNil(o.CryptoTxHash) {
		var ret string
		return ret
	}
	return *o.CryptoTxHash
}

// GetCryptoTxHashOk returns a tuple with the CryptoTxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetCryptoTxHashOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoTxHash) {
		return nil, false
	}
	return o.CryptoTxHash, true
}

// HasCryptoTxHash returns a boolean if a field has been set.
func (o *Transfer) HasCryptoTxHash() bool {
	if o != nil && !IsNil(o.CryptoTxHash) {
		return true
	}

	return false
}

// SetCryptoTxHash gets a reference to the given string and assigns it to the CryptoTxHash field.
func (o *Transfer) SetCryptoTxHash(v string) {
	o.CryptoTxHash = &v
}

// GetCryptoTxIndex returns the CryptoTxIndex field value if set, zero value otherwise.
func (o *Transfer) GetCryptoTxIndex() string {
	if o == nil || IsNil(o.CryptoTxIndex) {
		var ret string
		return ret
	}
	return *o.CryptoTxIndex
}

// GetCryptoTxIndexOk returns a tuple with the CryptoTxIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetCryptoTxIndexOk() (*string, bool) {
	if o == nil || IsNil(o.CryptoTxIndex) {
		return nil, false
	}
	return o.CryptoTxIndex, true
}

// HasCryptoTxIndex returns a boolean if a field has been set.
func (o *Transfer) HasCryptoTxIndex() bool {
	if o != nil && !IsNil(o.CryptoTxIndex) {
		return true
	}

	return false
}

// SetCryptoTxIndex gets a reference to the given string and assigns it to the CryptoTxIndex field.
func (o *Transfer) SetCryptoTxIndex(v string) {
	o.CryptoTxIndex = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Transfer) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Transfer) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Transfer) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAutoConversion returns the AutoConversion field value if set, zero value otherwise.
func (o *Transfer) GetAutoConversion() AutoConversion {
	if o == nil || IsNil(o.AutoConversion) {
		var ret AutoConversion
		return ret
	}
	return *o.AutoConversion
}

// GetAutoConversionOk returns a tuple with the AutoConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetAutoConversionOk() (*AutoConversion, bool) {
	if o == nil || IsNil(o.AutoConversion) {
		return nil, false
	}
	return o.AutoConversion, true
}

// HasAutoConversion returns a boolean if a field has been set.
func (o *Transfer) HasAutoConversion() bool {
	if o != nil && !IsNil(o.AutoConversion) {
		return true
	}

	return false
}

// SetAutoConversion gets a reference to the given AutoConversion and assigns it to the AutoConversion field.
func (o *Transfer) SetAutoConversion(v AutoConversion) {
	o.AutoConversion = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Transfer) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Transfer) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Transfer) SetGroupId(v string) {
	o.GroupId = &v
}

// GetFiatAccountId returns the FiatAccountId field value if set, zero value otherwise.
func (o *Transfer) GetFiatAccountId() string {
	if o == nil || IsNil(o.FiatAccountId) {
		var ret string
		return ret
	}
	return *o.FiatAccountId
}

// GetFiatAccountIdOk returns a tuple with the FiatAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetFiatAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.FiatAccountId) {
		return nil, false
	}
	return o.FiatAccountId, true
}

// HasFiatAccountId returns a boolean if a field has been set.
func (o *Transfer) HasFiatAccountId() bool {
	if o != nil && !IsNil(o.FiatAccountId) {
		return true
	}

	return false
}

// SetFiatAccountId gets a reference to the given string and assigns it to the FiatAccountId field.
func (o *Transfer) SetFiatAccountId(v string) {
	o.FiatAccountId = &v
}

// GetSecondaryStatus returns the SecondaryStatus field value if set, zero value otherwise.
func (o *Transfer) GetSecondaryStatus() SecondaryStatus {
	if o == nil || IsNil(o.SecondaryStatus) {
		var ret SecondaryStatus
		return ret
	}
	return *o.SecondaryStatus
}

// GetSecondaryStatusOk returns a tuple with the SecondaryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetSecondaryStatusOk() (*SecondaryStatus, bool) {
	if o == nil || IsNil(o.SecondaryStatus) {
		return nil, false
	}
	return o.SecondaryStatus, true
}

// HasSecondaryStatus returns a boolean if a field has been set.
func (o *Transfer) HasSecondaryStatus() bool {
	if o != nil && !IsNil(o.SecondaryStatus) {
		return true
	}

	return false
}

// SetSecondaryStatus gets a reference to the given SecondaryStatus and assigns it to the SecondaryStatus field.
func (o *Transfer) SetSecondaryStatus(v SecondaryStatus) {
	o.SecondaryStatus = &v
}

func (o Transfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["profile_id"] = o.ProfileId
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	toSerialize["amount"] = o.Amount
	toSerialize["total"] = o.Total
	toSerialize["fee"] = o.Fee
	toSerialize["asset"] = o.Asset
	if !IsNil(o.BalanceAsset) {
		toSerialize["balance_asset"] = o.BalanceAsset
	}
	toSerialize["direction"] = o.Direction
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.DestinationAddress) {
		toSerialize["destination_address"] = o.DestinationAddress
	}
	if !IsNil(o.CryptoNetwork) {
		toSerialize["crypto_network"] = o.CryptoNetwork
	}
	if !IsNil(o.CryptoTxHash) {
		toSerialize["crypto_tx_hash"] = o.CryptoTxHash
	}
	if !IsNil(o.CryptoTxIndex) {
		toSerialize["crypto_tx_index"] = o.CryptoTxIndex
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.AutoConversion) {
		toSerialize["auto_conversion"] = o.AutoConversion
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.FiatAccountId) {
		toSerialize["fiat_account_id"] = o.FiatAccountId
	}
	if !IsNil(o.SecondaryStatus) {
		toSerialize["secondary_status"] = o.SecondaryStatus
	}
	return toSerialize, nil
}

func (o *Transfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"customer_id",
		"profile_id",
		"amount",
		"total",
		"fee",
		"asset",
		"direction",
		"type",
		"status",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransfer := _Transfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransfer)

	if err != nil {
		return err
	}

	*o = Transfer(varTransfer)

	return err
}

type NullableTransfer struct {
	value *Transfer
	isSet bool
}

func (v NullableTransfer) Get() *Transfer {
	return v.value
}

func (v *NullableTransfer) Set(val *Transfer) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfer(val *Transfer) *NullableTransfer {
	return &NullableTransfer{value: val, isSet: true}
}

func (v NullableTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


