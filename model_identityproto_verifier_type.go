/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// IdentityprotoVerifierType the model 'IdentityprotoVerifierType'
type IdentityprotoVerifierType string

// List of identityprotoVerifierType
const (
	IDENTITYPROTOVERIFIERTYPE_JUMIO IdentityprotoVerifierType = "JUMIO"
	IDENTITYPROTOVERIFIERTYPE_PAXOS IdentityprotoVerifierType = "PAXOS"
	IDENTITYPROTOVERIFIERTYPE_PASSTHROUGH IdentityprotoVerifierType = "PASSTHROUGH"
	IDENTITYPROTOVERIFIERTYPE_MANUAL IdentityprotoVerifierType = "MANUAL"
)

// All allowed values of IdentityprotoVerifierType enum
var AllowedIdentityprotoVerifierTypeEnumValues = []IdentityprotoVerifierType{
	"JUMIO",
	"PAXOS",
	"PASSTHROUGH",
	"MANUAL",
}

func (v *IdentityprotoVerifierType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityprotoVerifierType(value)
	for _, existing := range AllowedIdentityprotoVerifierTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityprotoVerifierType", value)
}

// NewIdentityprotoVerifierTypeFromValue returns a pointer to a valid IdentityprotoVerifierType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityprotoVerifierTypeFromValue(v string) (*IdentityprotoVerifierType, error) {
	ev := IdentityprotoVerifierType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityprotoVerifierType: valid values are %v", v, AllowedIdentityprotoVerifierTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityprotoVerifierType) IsValid() bool {
	for _, existing := range AllowedIdentityprotoVerifierTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to identityprotoVerifierType value
func (v IdentityprotoVerifierType) Ptr() *IdentityprotoVerifierType {
	return &v
}

type NullableIdentityprotoVerifierType struct {
	value *IdentityprotoVerifierType
	isSet bool
}

func (v NullableIdentityprotoVerifierType) Get() *IdentityprotoVerifierType {
	return v.value
}

func (v *NullableIdentityprotoVerifierType) Set(val *IdentityprotoVerifierType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityprotoVerifierType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityprotoVerifierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityprotoVerifierType(val *IdentityprotoVerifierType) *NullableIdentityprotoVerifierType {
	return &NullableIdentityprotoVerifierType{value: val, isSet: true}
}

func (v NullableIdentityprotoVerifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityprotoVerifierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

