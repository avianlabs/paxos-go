/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the TickerRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TickerRecord{}

// TickerRecord struct for TickerRecord
type TickerRecord struct {
	Market *PricePriceMarket `json:"market,omitempty"`
	BestBid *BookLevel `json:"best_bid,omitempty"`
	BestAsk *BookLevel `json:"best_ask,omitempty"`
	LastExecution *BookLevel `json:"last_execution,omitempty"`
	LastDay *ExchangeStats `json:"last_day,omitempty"`
	Today *ExchangeStats `json:"today,omitempty"`
	// The time at which this data was retrieved.
	SnapshotAt *time.Time `json:"snapshot_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TickerRecord TickerRecord

// NewTickerRecord instantiates a new TickerRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTickerRecord() *TickerRecord {
	this := TickerRecord{}
	return &this
}

// NewTickerRecordWithDefaults instantiates a new TickerRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTickerRecordWithDefaults() *TickerRecord {
	this := TickerRecord{}
	return &this
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *TickerRecord) GetMarket() PricePriceMarket {
	if o == nil || IsNil(o.Market) {
		var ret PricePriceMarket
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetMarketOk() (*PricePriceMarket, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *TickerRecord) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given PricePriceMarket and assigns it to the Market field.
func (o *TickerRecord) SetMarket(v PricePriceMarket) {
	o.Market = &v
}

// GetBestBid returns the BestBid field value if set, zero value otherwise.
func (o *TickerRecord) GetBestBid() BookLevel {
	if o == nil || IsNil(o.BestBid) {
		var ret BookLevel
		return ret
	}
	return *o.BestBid
}

// GetBestBidOk returns a tuple with the BestBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetBestBidOk() (*BookLevel, bool) {
	if o == nil || IsNil(o.BestBid) {
		return nil, false
	}
	return o.BestBid, true
}

// HasBestBid returns a boolean if a field has been set.
func (o *TickerRecord) HasBestBid() bool {
	if o != nil && !IsNil(o.BestBid) {
		return true
	}

	return false
}

// SetBestBid gets a reference to the given BookLevel and assigns it to the BestBid field.
func (o *TickerRecord) SetBestBid(v BookLevel) {
	o.BestBid = &v
}

// GetBestAsk returns the BestAsk field value if set, zero value otherwise.
func (o *TickerRecord) GetBestAsk() BookLevel {
	if o == nil || IsNil(o.BestAsk) {
		var ret BookLevel
		return ret
	}
	return *o.BestAsk
}

// GetBestAskOk returns a tuple with the BestAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetBestAskOk() (*BookLevel, bool) {
	if o == nil || IsNil(o.BestAsk) {
		return nil, false
	}
	return o.BestAsk, true
}

// HasBestAsk returns a boolean if a field has been set.
func (o *TickerRecord) HasBestAsk() bool {
	if o != nil && !IsNil(o.BestAsk) {
		return true
	}

	return false
}

// SetBestAsk gets a reference to the given BookLevel and assigns it to the BestAsk field.
func (o *TickerRecord) SetBestAsk(v BookLevel) {
	o.BestAsk = &v
}

// GetLastExecution returns the LastExecution field value if set, zero value otherwise.
func (o *TickerRecord) GetLastExecution() BookLevel {
	if o == nil || IsNil(o.LastExecution) {
		var ret BookLevel
		return ret
	}
	return *o.LastExecution
}

// GetLastExecutionOk returns a tuple with the LastExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetLastExecutionOk() (*BookLevel, bool) {
	if o == nil || IsNil(o.LastExecution) {
		return nil, false
	}
	return o.LastExecution, true
}

// HasLastExecution returns a boolean if a field has been set.
func (o *TickerRecord) HasLastExecution() bool {
	if o != nil && !IsNil(o.LastExecution) {
		return true
	}

	return false
}

// SetLastExecution gets a reference to the given BookLevel and assigns it to the LastExecution field.
func (o *TickerRecord) SetLastExecution(v BookLevel) {
	o.LastExecution = &v
}

// GetLastDay returns the LastDay field value if set, zero value otherwise.
func (o *TickerRecord) GetLastDay() ExchangeStats {
	if o == nil || IsNil(o.LastDay) {
		var ret ExchangeStats
		return ret
	}
	return *o.LastDay
}

// GetLastDayOk returns a tuple with the LastDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetLastDayOk() (*ExchangeStats, bool) {
	if o == nil || IsNil(o.LastDay) {
		return nil, false
	}
	return o.LastDay, true
}

// HasLastDay returns a boolean if a field has been set.
func (o *TickerRecord) HasLastDay() bool {
	if o != nil && !IsNil(o.LastDay) {
		return true
	}

	return false
}

// SetLastDay gets a reference to the given ExchangeStats and assigns it to the LastDay field.
func (o *TickerRecord) SetLastDay(v ExchangeStats) {
	o.LastDay = &v
}

// GetToday returns the Today field value if set, zero value otherwise.
func (o *TickerRecord) GetToday() ExchangeStats {
	if o == nil || IsNil(o.Today) {
		var ret ExchangeStats
		return ret
	}
	return *o.Today
}

// GetTodayOk returns a tuple with the Today field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetTodayOk() (*ExchangeStats, bool) {
	if o == nil || IsNil(o.Today) {
		return nil, false
	}
	return o.Today, true
}

// HasToday returns a boolean if a field has been set.
func (o *TickerRecord) HasToday() bool {
	if o != nil && !IsNil(o.Today) {
		return true
	}

	return false
}

// SetToday gets a reference to the given ExchangeStats and assigns it to the Today field.
func (o *TickerRecord) SetToday(v ExchangeStats) {
	o.Today = &v
}

// GetSnapshotAt returns the SnapshotAt field value if set, zero value otherwise.
func (o *TickerRecord) GetSnapshotAt() time.Time {
	if o == nil || IsNil(o.SnapshotAt) {
		var ret time.Time
		return ret
	}
	return *o.SnapshotAt
}

// GetSnapshotAtOk returns a tuple with the SnapshotAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerRecord) GetSnapshotAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SnapshotAt) {
		return nil, false
	}
	return o.SnapshotAt, true
}

// HasSnapshotAt returns a boolean if a field has been set.
func (o *TickerRecord) HasSnapshotAt() bool {
	if o != nil && !IsNil(o.SnapshotAt) {
		return true
	}

	return false
}

// SetSnapshotAt gets a reference to the given time.Time and assigns it to the SnapshotAt field.
func (o *TickerRecord) SetSnapshotAt(v time.Time) {
	o.SnapshotAt = &v
}

func (o TickerRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TickerRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !IsNil(o.BestBid) {
		toSerialize["best_bid"] = o.BestBid
	}
	if !IsNil(o.BestAsk) {
		toSerialize["best_ask"] = o.BestAsk
	}
	if !IsNil(o.LastExecution) {
		toSerialize["last_execution"] = o.LastExecution
	}
	if !IsNil(o.LastDay) {
		toSerialize["last_day"] = o.LastDay
	}
	if !IsNil(o.Today) {
		toSerialize["today"] = o.Today
	}
	if !IsNil(o.SnapshotAt) {
		toSerialize["snapshot_at"] = o.SnapshotAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TickerRecord) UnmarshalJSON(data []byte) (err error) {
	varTickerRecord := _TickerRecord{}

	err = json.Unmarshal(data, &varTickerRecord)

	if err != nil {
		return err
	}

	*o = TickerRecord(varTickerRecord)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "market")
		delete(additionalProperties, "best_bid")
		delete(additionalProperties, "best_ask")
		delete(additionalProperties, "last_execution")
		delete(additionalProperties, "last_day")
		delete(additionalProperties, "today")
		delete(additionalProperties, "snapshot_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTickerRecord struct {
	value *TickerRecord
	isSet bool
}

func (v NullableTickerRecord) Get() *TickerRecord {
	return v.value
}

func (v *NullableTickerRecord) Set(val *TickerRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableTickerRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableTickerRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTickerRecord(val *TickerRecord) *NullableTickerRecord {
	return &NullableTickerRecord{value: val, isSet: true}
}

func (v NullableTickerRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTickerRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


