/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CryptoWithdrawalFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoWithdrawalFee{}

// CryptoWithdrawalFee struct for CryptoWithdrawalFee
type CryptoWithdrawalFee struct {
	// The id of the guaranteed fee.
	Id string `json:"id"`
	// The guaranteed fee value, in the same currency.
	Fee string `json:"fee"`
	// The currency to withdraw.
	Asset string `json:"asset"`
	// The expiration timestamp of the created fee.
	ExpiresAt time.Time `json:"expires_at"`
	// The destination address.
	DestinationAddress string `json:"destination_address"`
	CryptoNetwork CryptoNetwork `json:"crypto_network"`
	// The quoted amount to withdraw for which the fee is valid. Specify exactly one of `amount` or `total`, otherwise an error is returned.
	Amount *string `json:"amount,omitempty"`
	// Total amount to withdraw, including fees. Specify exactly one of `amount` or `total`, otherwise an error is returned.
	Total *string `json:"total,omitempty"`
}

type _CryptoWithdrawalFee CryptoWithdrawalFee

// NewCryptoWithdrawalFee instantiates a new CryptoWithdrawalFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoWithdrawalFee(id string, fee string, asset string, expiresAt time.Time, destinationAddress string, cryptoNetwork CryptoNetwork) *CryptoWithdrawalFee {
	this := CryptoWithdrawalFee{}
	this.Id = id
	this.Fee = fee
	this.Asset = asset
	this.ExpiresAt = expiresAt
	this.DestinationAddress = destinationAddress
	this.CryptoNetwork = cryptoNetwork
	return &this
}

// NewCryptoWithdrawalFeeWithDefaults instantiates a new CryptoWithdrawalFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoWithdrawalFeeWithDefaults() *CryptoWithdrawalFee {
	this := CryptoWithdrawalFee{}
	return &this
}

// GetId returns the Id field value
func (o *CryptoWithdrawalFee) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CryptoWithdrawalFee) SetId(v string) {
	o.Id = v
}

// GetFee returns the Fee field value
func (o *CryptoWithdrawalFee) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *CryptoWithdrawalFee) SetFee(v string) {
	o.Fee = v
}

// GetAsset returns the Asset field value
func (o *CryptoWithdrawalFee) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *CryptoWithdrawalFee) SetAsset(v string) {
	o.Asset = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *CryptoWithdrawalFee) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *CryptoWithdrawalFee) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetDestinationAddress returns the DestinationAddress field value
func (o *CryptoWithdrawalFee) GetDestinationAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetDestinationAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationAddress, true
}

// SetDestinationAddress sets field value
func (o *CryptoWithdrawalFee) SetDestinationAddress(v string) {
	o.DestinationAddress = v
}

// GetCryptoNetwork returns the CryptoNetwork field value
func (o *CryptoWithdrawalFee) GetCryptoNetwork() CryptoNetwork {
	if o == nil {
		var ret CryptoNetwork
		return ret
	}

	return o.CryptoNetwork
}

// GetCryptoNetworkOk returns a tuple with the CryptoNetwork field value
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetCryptoNetworkOk() (*CryptoNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoNetwork, true
}

// SetCryptoNetwork sets field value
func (o *CryptoWithdrawalFee) SetCryptoNetwork(v CryptoNetwork) {
	o.CryptoNetwork = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CryptoWithdrawalFee) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CryptoWithdrawalFee) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CryptoWithdrawalFee) SetAmount(v string) {
	o.Amount = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CryptoWithdrawalFee) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoWithdrawalFee) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CryptoWithdrawalFee) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *CryptoWithdrawalFee) SetTotal(v string) {
	o.Total = &v
}

func (o CryptoWithdrawalFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoWithdrawalFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["fee"] = o.Fee
	toSerialize["asset"] = o.Asset
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["destination_address"] = o.DestinationAddress
	toSerialize["crypto_network"] = o.CryptoNetwork
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

func (o *CryptoWithdrawalFee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"fee",
		"asset",
		"expires_at",
		"destination_address",
		"crypto_network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoWithdrawalFee := _CryptoWithdrawalFee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoWithdrawalFee)

	if err != nil {
		return err
	}

	*o = CryptoWithdrawalFee(varCryptoWithdrawalFee)

	return err
}

type NullableCryptoWithdrawalFee struct {
	value *CryptoWithdrawalFee
	isSet bool
}

func (v NullableCryptoWithdrawalFee) Get() *CryptoWithdrawalFee {
	return v.value
}

func (v *NullableCryptoWithdrawalFee) Set(val *CryptoWithdrawalFee) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoWithdrawalFee) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoWithdrawalFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoWithdrawalFee(val *CryptoWithdrawalFee) *NullableCryptoWithdrawalFee {
	return &NullableCryptoWithdrawalFee{value: val, isSet: true}
}

func (v NullableCryptoWithdrawalFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoWithdrawalFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


