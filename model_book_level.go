/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
)

// checks if the BookLevel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookLevel{}

// BookLevel struct for BookLevel
type BookLevel struct {
	// Price at level.
	Price *string `json:"price,omitempty"`
	// Amount of orders at pricing level.
	Amount *string `json:"amount,omitempty"`
}

// NewBookLevel instantiates a new BookLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookLevel() *BookLevel {
	this := BookLevel{}
	return &this
}

// NewBookLevelWithDefaults instantiates a new BookLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookLevelWithDefaults() *BookLevel {
	this := BookLevel{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BookLevel) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookLevel) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BookLevel) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *BookLevel) SetPrice(v string) {
	o.Price = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BookLevel) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookLevel) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BookLevel) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *BookLevel) SetAmount(v string) {
	o.Amount = &v
}

func (o BookLevel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookLevel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return toSerialize, nil
}

type NullableBookLevel struct {
	value *BookLevel
	isSet bool
}

func (v NullableBookLevel) Get() *BookLevel {
	return v.value
}

func (v *NullableBookLevel) Set(val *BookLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableBookLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableBookLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookLevel(val *BookLevel) *NullableBookLevel {
	return &NullableBookLevel{value: val, isSet: true}
}

func (v NullableBookLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


