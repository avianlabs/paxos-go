/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Identity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Identity{}

// Identity struct for Identity
type Identity struct {
	Id string `json:"id"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	SummaryStatus *IdentityStatus `json:"summary_status,omitempty"`
	UserDisabled *bool `json:"user_disabled,omitempty"`
	AdminDisabled *bool `json:"admin_disabled,omitempty"`
	PersonDetails *PersonDetails `json:"person_details,omitempty"`
	Type *IdentityType `json:"type,omitempty"`
	// A user-facing ID to prevent duplicate account creation. Unique for all accounts created by the same API user.
	RefId *string `json:"ref_id,omitempty"`
	InstitutionDetails *InstitutionDetails `json:"institution_details,omitempty"`
	InstitutionMembers []InstitutionMember `json:"institution_members,omitempty"`
	// The time at which the identity is created at. RFC3339 format, like `YYYY-MM-DDTHH:MM:SS.sssZ`. ex: `2006-01-02T15:04:05Z`.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The time at which the identity is updated at. RFC3339 format, like `YYYY-MM-DDTHH:MM:SS.sssZ`. ex: `2006-01-02T15:04:05Z`.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	TaxDetails []TaxDetail `json:"tax_details,omitempty"`
	TaxDetailsNotRequired *bool `json:"tax_details_not_required,omitempty"`
	SummaryTinVerificationStatus *TINVerificationStatus `json:"summary_tin_verification_status,omitempty"`
	CustomerDueDiligence *CustomerDueDiligence `json:"customer_due_diligence,omitempty"`
	// True if the identity is a merchant.
	IsMerchant *bool `json:"is_merchant,omitempty"`
	// The last timestamp the identity has undergone a periodic kyc refresh. RFC3339 format, like `YYYY-MM-DDTHH:MM:SS.sssZ`. ex: `2006-01-02T15:04:05Z`.
	LastKycRefreshDate *time.Time `json:"last_kyc_refresh_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Identity Identity

// NewIdentity instantiates a new Identity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentity(id string) *Identity {
	this := Identity{}
	this.Id = id
	return &this
}

// NewIdentityWithDefaults instantiates a new Identity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithDefaults() *Identity {
	this := Identity{}
	return &this
}

// GetId returns the Id field value
func (o *Identity) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Identity) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Identity) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Identity) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Identity) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Identity) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetSummaryStatus returns the SummaryStatus field value if set, zero value otherwise.
func (o *Identity) GetSummaryStatus() IdentityStatus {
	if o == nil || IsNil(o.SummaryStatus) {
		var ret IdentityStatus
		return ret
	}
	return *o.SummaryStatus
}

// GetSummaryStatusOk returns a tuple with the SummaryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetSummaryStatusOk() (*IdentityStatus, bool) {
	if o == nil || IsNil(o.SummaryStatus) {
		return nil, false
	}
	return o.SummaryStatus, true
}

// HasSummaryStatus returns a boolean if a field has been set.
func (o *Identity) HasSummaryStatus() bool {
	if o != nil && !IsNil(o.SummaryStatus) {
		return true
	}

	return false
}

// SetSummaryStatus gets a reference to the given IdentityStatus and assigns it to the SummaryStatus field.
func (o *Identity) SetSummaryStatus(v IdentityStatus) {
	o.SummaryStatus = &v
}

// GetUserDisabled returns the UserDisabled field value if set, zero value otherwise.
func (o *Identity) GetUserDisabled() bool {
	if o == nil || IsNil(o.UserDisabled) {
		var ret bool
		return ret
	}
	return *o.UserDisabled
}

// GetUserDisabledOk returns a tuple with the UserDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetUserDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserDisabled) {
		return nil, false
	}
	return o.UserDisabled, true
}

// HasUserDisabled returns a boolean if a field has been set.
func (o *Identity) HasUserDisabled() bool {
	if o != nil && !IsNil(o.UserDisabled) {
		return true
	}

	return false
}

// SetUserDisabled gets a reference to the given bool and assigns it to the UserDisabled field.
func (o *Identity) SetUserDisabled(v bool) {
	o.UserDisabled = &v
}

// GetAdminDisabled returns the AdminDisabled field value if set, zero value otherwise.
func (o *Identity) GetAdminDisabled() bool {
	if o == nil || IsNil(o.AdminDisabled) {
		var ret bool
		return ret
	}
	return *o.AdminDisabled
}

// GetAdminDisabledOk returns a tuple with the AdminDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetAdminDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminDisabled) {
		return nil, false
	}
	return o.AdminDisabled, true
}

// HasAdminDisabled returns a boolean if a field has been set.
func (o *Identity) HasAdminDisabled() bool {
	if o != nil && !IsNil(o.AdminDisabled) {
		return true
	}

	return false
}

// SetAdminDisabled gets a reference to the given bool and assigns it to the AdminDisabled field.
func (o *Identity) SetAdminDisabled(v bool) {
	o.AdminDisabled = &v
}

// GetPersonDetails returns the PersonDetails field value if set, zero value otherwise.
func (o *Identity) GetPersonDetails() PersonDetails {
	if o == nil || IsNil(o.PersonDetails) {
		var ret PersonDetails
		return ret
	}
	return *o.PersonDetails
}

// GetPersonDetailsOk returns a tuple with the PersonDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetPersonDetailsOk() (*PersonDetails, bool) {
	if o == nil || IsNil(o.PersonDetails) {
		return nil, false
	}
	return o.PersonDetails, true
}

// HasPersonDetails returns a boolean if a field has been set.
func (o *Identity) HasPersonDetails() bool {
	if o != nil && !IsNil(o.PersonDetails) {
		return true
	}

	return false
}

// SetPersonDetails gets a reference to the given PersonDetails and assigns it to the PersonDetails field.
func (o *Identity) SetPersonDetails(v PersonDetails) {
	o.PersonDetails = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Identity) GetType() IdentityType {
	if o == nil || IsNil(o.Type) {
		var ret IdentityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTypeOk() (*IdentityType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Identity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IdentityType and assigns it to the Type field.
func (o *Identity) SetType(v IdentityType) {
	o.Type = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Identity) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Identity) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Identity) SetRefId(v string) {
	o.RefId = &v
}

// GetInstitutionDetails returns the InstitutionDetails field value if set, zero value otherwise.
func (o *Identity) GetInstitutionDetails() InstitutionDetails {
	if o == nil || IsNil(o.InstitutionDetails) {
		var ret InstitutionDetails
		return ret
	}
	return *o.InstitutionDetails
}

// GetInstitutionDetailsOk returns a tuple with the InstitutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetInstitutionDetailsOk() (*InstitutionDetails, bool) {
	if o == nil || IsNil(o.InstitutionDetails) {
		return nil, false
	}
	return o.InstitutionDetails, true
}

// HasInstitutionDetails returns a boolean if a field has been set.
func (o *Identity) HasInstitutionDetails() bool {
	if o != nil && !IsNil(o.InstitutionDetails) {
		return true
	}

	return false
}

// SetInstitutionDetails gets a reference to the given InstitutionDetails and assigns it to the InstitutionDetails field.
func (o *Identity) SetInstitutionDetails(v InstitutionDetails) {
	o.InstitutionDetails = &v
}

// GetInstitutionMembers returns the InstitutionMembers field value if set, zero value otherwise.
func (o *Identity) GetInstitutionMembers() []InstitutionMember {
	if o == nil || IsNil(o.InstitutionMembers) {
		var ret []InstitutionMember
		return ret
	}
	return o.InstitutionMembers
}

// GetInstitutionMembersOk returns a tuple with the InstitutionMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetInstitutionMembersOk() ([]InstitutionMember, bool) {
	if o == nil || IsNil(o.InstitutionMembers) {
		return nil, false
	}
	return o.InstitutionMembers, true
}

// HasInstitutionMembers returns a boolean if a field has been set.
func (o *Identity) HasInstitutionMembers() bool {
	if o != nil && !IsNil(o.InstitutionMembers) {
		return true
	}

	return false
}

// SetInstitutionMembers gets a reference to the given []InstitutionMember and assigns it to the InstitutionMembers field.
func (o *Identity) SetInstitutionMembers(v []InstitutionMember) {
	o.InstitutionMembers = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Identity) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Identity) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Identity) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Identity) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Identity) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Identity) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetTaxDetails returns the TaxDetails field value if set, zero value otherwise.
func (o *Identity) GetTaxDetails() []TaxDetail {
	if o == nil || IsNil(o.TaxDetails) {
		var ret []TaxDetail
		return ret
	}
	return o.TaxDetails
}

// GetTaxDetailsOk returns a tuple with the TaxDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTaxDetailsOk() ([]TaxDetail, bool) {
	if o == nil || IsNil(o.TaxDetails) {
		return nil, false
	}
	return o.TaxDetails, true
}

// HasTaxDetails returns a boolean if a field has been set.
func (o *Identity) HasTaxDetails() bool {
	if o != nil && !IsNil(o.TaxDetails) {
		return true
	}

	return false
}

// SetTaxDetails gets a reference to the given []TaxDetail and assigns it to the TaxDetails field.
func (o *Identity) SetTaxDetails(v []TaxDetail) {
	o.TaxDetails = v
}

// GetTaxDetailsNotRequired returns the TaxDetailsNotRequired field value if set, zero value otherwise.
func (o *Identity) GetTaxDetailsNotRequired() bool {
	if o == nil || IsNil(o.TaxDetailsNotRequired) {
		var ret bool
		return ret
	}
	return *o.TaxDetailsNotRequired
}

// GetTaxDetailsNotRequiredOk returns a tuple with the TaxDetailsNotRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTaxDetailsNotRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TaxDetailsNotRequired) {
		return nil, false
	}
	return o.TaxDetailsNotRequired, true
}

// HasTaxDetailsNotRequired returns a boolean if a field has been set.
func (o *Identity) HasTaxDetailsNotRequired() bool {
	if o != nil && !IsNil(o.TaxDetailsNotRequired) {
		return true
	}

	return false
}

// SetTaxDetailsNotRequired gets a reference to the given bool and assigns it to the TaxDetailsNotRequired field.
func (o *Identity) SetTaxDetailsNotRequired(v bool) {
	o.TaxDetailsNotRequired = &v
}

// GetSummaryTinVerificationStatus returns the SummaryTinVerificationStatus field value if set, zero value otherwise.
func (o *Identity) GetSummaryTinVerificationStatus() TINVerificationStatus {
	if o == nil || IsNil(o.SummaryTinVerificationStatus) {
		var ret TINVerificationStatus
		return ret
	}
	return *o.SummaryTinVerificationStatus
}

// GetSummaryTinVerificationStatusOk returns a tuple with the SummaryTinVerificationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetSummaryTinVerificationStatusOk() (*TINVerificationStatus, bool) {
	if o == nil || IsNil(o.SummaryTinVerificationStatus) {
		return nil, false
	}
	return o.SummaryTinVerificationStatus, true
}

// HasSummaryTinVerificationStatus returns a boolean if a field has been set.
func (o *Identity) HasSummaryTinVerificationStatus() bool {
	if o != nil && !IsNil(o.SummaryTinVerificationStatus) {
		return true
	}

	return false
}

// SetSummaryTinVerificationStatus gets a reference to the given TINVerificationStatus and assigns it to the SummaryTinVerificationStatus field.
func (o *Identity) SetSummaryTinVerificationStatus(v TINVerificationStatus) {
	o.SummaryTinVerificationStatus = &v
}

// GetCustomerDueDiligence returns the CustomerDueDiligence field value if set, zero value otherwise.
func (o *Identity) GetCustomerDueDiligence() CustomerDueDiligence {
	if o == nil || IsNil(o.CustomerDueDiligence) {
		var ret CustomerDueDiligence
		return ret
	}
	return *o.CustomerDueDiligence
}

// GetCustomerDueDiligenceOk returns a tuple with the CustomerDueDiligence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetCustomerDueDiligenceOk() (*CustomerDueDiligence, bool) {
	if o == nil || IsNil(o.CustomerDueDiligence) {
		return nil, false
	}
	return o.CustomerDueDiligence, true
}

// HasCustomerDueDiligence returns a boolean if a field has been set.
func (o *Identity) HasCustomerDueDiligence() bool {
	if o != nil && !IsNil(o.CustomerDueDiligence) {
		return true
	}

	return false
}

// SetCustomerDueDiligence gets a reference to the given CustomerDueDiligence and assigns it to the CustomerDueDiligence field.
func (o *Identity) SetCustomerDueDiligence(v CustomerDueDiligence) {
	o.CustomerDueDiligence = &v
}

// GetIsMerchant returns the IsMerchant field value if set, zero value otherwise.
func (o *Identity) GetIsMerchant() bool {
	if o == nil || IsNil(o.IsMerchant) {
		var ret bool
		return ret
	}
	return *o.IsMerchant
}

// GetIsMerchantOk returns a tuple with the IsMerchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetIsMerchantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMerchant) {
		return nil, false
	}
	return o.IsMerchant, true
}

// HasIsMerchant returns a boolean if a field has been set.
func (o *Identity) HasIsMerchant() bool {
	if o != nil && !IsNil(o.IsMerchant) {
		return true
	}

	return false
}

// SetIsMerchant gets a reference to the given bool and assigns it to the IsMerchant field.
func (o *Identity) SetIsMerchant(v bool) {
	o.IsMerchant = &v
}

// GetLastKycRefreshDate returns the LastKycRefreshDate field value if set, zero value otherwise.
func (o *Identity) GetLastKycRefreshDate() time.Time {
	if o == nil || IsNil(o.LastKycRefreshDate) {
		var ret time.Time
		return ret
	}
	return *o.LastKycRefreshDate
}

// GetLastKycRefreshDateOk returns a tuple with the LastKycRefreshDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetLastKycRefreshDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastKycRefreshDate) {
		return nil, false
	}
	return o.LastKycRefreshDate, true
}

// HasLastKycRefreshDate returns a boolean if a field has been set.
func (o *Identity) HasLastKycRefreshDate() bool {
	if o != nil && !IsNil(o.LastKycRefreshDate) {
		return true
	}

	return false
}

// SetLastKycRefreshDate gets a reference to the given time.Time and assigns it to the LastKycRefreshDate field.
func (o *Identity) SetLastKycRefreshDate(v time.Time) {
	o.LastKycRefreshDate = &v
}

func (o Identity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Identity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.SummaryStatus) {
		toSerialize["summary_status"] = o.SummaryStatus
	}
	if !IsNil(o.UserDisabled) {
		toSerialize["user_disabled"] = o.UserDisabled
	}
	if !IsNil(o.AdminDisabled) {
		toSerialize["admin_disabled"] = o.AdminDisabled
	}
	if !IsNil(o.PersonDetails) {
		toSerialize["person_details"] = o.PersonDetails
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.InstitutionDetails) {
		toSerialize["institution_details"] = o.InstitutionDetails
	}
	if !IsNil(o.InstitutionMembers) {
		toSerialize["institution_members"] = o.InstitutionMembers
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.TaxDetails) {
		toSerialize["tax_details"] = o.TaxDetails
	}
	if !IsNil(o.TaxDetailsNotRequired) {
		toSerialize["tax_details_not_required"] = o.TaxDetailsNotRequired
	}
	if !IsNil(o.SummaryTinVerificationStatus) {
		toSerialize["summary_tin_verification_status"] = o.SummaryTinVerificationStatus
	}
	if !IsNil(o.CustomerDueDiligence) {
		toSerialize["customer_due_diligence"] = o.CustomerDueDiligence
	}
	if !IsNil(o.IsMerchant) {
		toSerialize["is_merchant"] = o.IsMerchant
	}
	if !IsNil(o.LastKycRefreshDate) {
		toSerialize["last_kyc_refresh_date"] = o.LastKycRefreshDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Identity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentity := _Identity{}

	err = json.Unmarshal(data, &varIdentity)

	if err != nil {
		return err
	}

	*o = Identity(varIdentity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "summary_status")
		delete(additionalProperties, "user_disabled")
		delete(additionalProperties, "admin_disabled")
		delete(additionalProperties, "person_details")
		delete(additionalProperties, "type")
		delete(additionalProperties, "ref_id")
		delete(additionalProperties, "institution_details")
		delete(additionalProperties, "institution_members")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "tax_details")
		delete(additionalProperties, "tax_details_not_required")
		delete(additionalProperties, "summary_tin_verification_status")
		delete(additionalProperties, "customer_due_diligence")
		delete(additionalProperties, "is_merchant")
		delete(additionalProperties, "last_kyc_refresh_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentity struct {
	value *Identity
	isSet bool
}

func (v NullableIdentity) Get() *Identity {
	return v.value
}

func (v *NullableIdentity) Set(val *Identity) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentity(val *Identity) *NullableIdentity {
	return &NullableIdentity{value: val, isSet: true}
}

func (v NullableIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


