/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// AccountMemberAccountRoleType the model 'AccountMemberAccountRoleType'
type AccountMemberAccountRoleType string

// List of AccountMemberAccountRoleType
const (
	BENEFICIAL_OWNER AccountMemberAccountRoleType = "BENEFICIAL_OWNER"
	AUTHORIZED_USER AccountMemberAccountRoleType = "AUTHORIZED_USER"
	FINANCIAL_ADVISOR AccountMemberAccountRoleType = "FINANCIAL_ADVISOR"
)

// All allowed values of AccountMemberAccountRoleType enum
var AllowedAccountMemberAccountRoleTypeEnumValues = []AccountMemberAccountRoleType{
	"BENEFICIAL_OWNER",
	"AUTHORIZED_USER",
	"FINANCIAL_ADVISOR",
}

func (v *AccountMemberAccountRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountMemberAccountRoleType(value)
	for _, existing := range AllowedAccountMemberAccountRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountMemberAccountRoleType", value)
}

// NewAccountMemberAccountRoleTypeFromValue returns a pointer to a valid AccountMemberAccountRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountMemberAccountRoleTypeFromValue(v string) (*AccountMemberAccountRoleType, error) {
	ev := AccountMemberAccountRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountMemberAccountRoleType: valid values are %v", v, AllowedAccountMemberAccountRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountMemberAccountRoleType) IsValid() bool {
	for _, existing := range AllowedAccountMemberAccountRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountMemberAccountRoleType value
func (v AccountMemberAccountRoleType) Ptr() *AccountMemberAccountRoleType {
	return &v
}

type NullableAccountMemberAccountRoleType struct {
	value *AccountMemberAccountRoleType
	isSet bool
}

func (v NullableAccountMemberAccountRoleType) Get() *AccountMemberAccountRoleType {
	return v.value
}

func (v *NullableAccountMemberAccountRoleType) Set(val *AccountMemberAccountRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountMemberAccountRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountMemberAccountRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountMemberAccountRoleType(val *AccountMemberAccountRoleType) *NullableAccountMemberAccountRoleType {
	return &NullableAccountMemberAccountRoleType{value: val, isSet: true}
}

func (v NullableAccountMemberAccountRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountMemberAccountRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

