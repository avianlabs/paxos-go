/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// SecondaryStatusName Identifier for secondary status.   - TRAVEL_RULE_INFO_REQUESTED: Travel rule information is required to continue processing the transfer.  - TRAVEL_RULE_REJECTED: Transfer has been terminally rejected due to failing travel rule checks.
type SecondaryStatusName string

// List of SecondaryStatusName
const (
	TRAVEL_RULE_INFO_REQUESTED SecondaryStatusName = "TRAVEL_RULE_INFO_REQUESTED"
	TRAVEL_RULE_REJECTED SecondaryStatusName = "TRAVEL_RULE_REJECTED"
)

// All allowed values of SecondaryStatusName enum
var AllowedSecondaryStatusNameEnumValues = []SecondaryStatusName{
	"TRAVEL_RULE_INFO_REQUESTED",
	"TRAVEL_RULE_REJECTED",
}

func (v *SecondaryStatusName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecondaryStatusName(value)
	for _, existing := range AllowedSecondaryStatusNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecondaryStatusName", value)
}

// NewSecondaryStatusNameFromValue returns a pointer to a valid SecondaryStatusName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecondaryStatusNameFromValue(v string) (*SecondaryStatusName, error) {
	ev := SecondaryStatusName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecondaryStatusName: valid values are %v", v, AllowedSecondaryStatusNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecondaryStatusName) IsValid() bool {
	for _, existing := range AllowedSecondaryStatusNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecondaryStatusName value
func (v SecondaryStatusName) Ptr() *SecondaryStatusName {
	return &v
}

type NullableSecondaryStatusName struct {
	value *SecondaryStatusName
	isSet bool
}

func (v NullableSecondaryStatusName) Get() *SecondaryStatusName {
	return v.value
}

func (v *NullableSecondaryStatusName) Set(val *SecondaryStatusName) {
	v.value = val
	v.isSet = true
}

func (v NullableSecondaryStatusName) IsSet() bool {
	return v.isSet
}

func (v *NullableSecondaryStatusName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecondaryStatusName(val *SecondaryStatusName) *NullableSecondaryStatusName {
	return &NullableSecondaryStatusName{value: val, isSet: true}
}

func (v NullableSecondaryStatusName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecondaryStatusName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

