/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// InstitutionSubType the model 'InstitutionSubType'
type InstitutionSubType string

// List of InstitutionSubType
const (
	INVESTMENT_InstitutionSubType InstitutionSubType = "INVESTMENT"
	HEDGE_FUND_InstitutionSubType InstitutionSubType = "HEDGE_FUND"
	MONEY_SERVICE_BUSINESS_InstitutionSubType InstitutionSubType = "MONEY_SERVICE_BUSINESS"
	STO_ISSUER_InstitutionSubType InstitutionSubType = "STO_ISSUER"
	PRECIOUS_METALS_InstitutionSubType InstitutionSubType = "PRECIOUS_METALS"
	NON_PROFIT_InstitutionSubType InstitutionSubType = "NON_PROFIT"
	REGISTERED_INVESTMENT_ADVISOR_InstitutionSubType InstitutionSubType = "REGISTERED_INVESTMENT_ADVISOR"
	AGRICULTURE_FORESTRY_FISHING_HUNTING_InstitutionSubType InstitutionSubType = "AGRICULTURE_FORESTRY_FISHING_HUNTING"
	MINING_InstitutionSubType InstitutionSubType = "MINING"
	UTILITIES_InstitutionSubType InstitutionSubType = "UTILITIES"
	CONSTRUCTION_InstitutionSubType InstitutionSubType = "CONSTRUCTION"
	MANUFACTURING_InstitutionSubType InstitutionSubType = "MANUFACTURING"
	WHOLESALE_TRADE_InstitutionSubType InstitutionSubType = "WHOLESALE_TRADE"
	RETAIL_TRADE_InstitutionSubType InstitutionSubType = "RETAIL_TRADE"
	TRANSPORTATION_WAREHOUSING_InstitutionSubType InstitutionSubType = "TRANSPORTATION_WAREHOUSING"
	INFORMATION_InstitutionSubType InstitutionSubType = "INFORMATION"
	FINANCE_INSURANCE_InstitutionSubType InstitutionSubType = "FINANCE_INSURANCE"
	REAL_ESTATE_RENTAL_LEASING_InstitutionSubType InstitutionSubType = "REAL_ESTATE_RENTAL_LEASING"
	PROFESSIONAL_SCIENTIFIC_TECHNICAL_SERVICES_InstitutionSubType InstitutionSubType = "PROFESSIONAL_SCIENTIFIC_TECHNICAL_SERVICES"
	MANAGEMENT_OF_COMPANIES_ENTERPRISES_InstitutionSubType InstitutionSubType = "MANAGEMENT_OF_COMPANIES_ENTERPRISES"
	ADMINISTRATIVE_SUPPORT_WASTE_MANAGEMENT_REMEDIATION_SERVICES_InstitutionSubType InstitutionSubType = "ADMINISTRATIVE_SUPPORT_WASTE_MANAGEMENT_REMEDIATION_SERVICES"
	EDUCATIONAL_SERVICES_InstitutionSubType InstitutionSubType = "EDUCATIONAL_SERVICES"
	HEALTH_CARE_SOCIAL_ASSISTANCE_InstitutionSubType InstitutionSubType = "HEALTH_CARE_SOCIAL_ASSISTANCE"
	ARTS_ENTERTAINMENT_RECREATION_InstitutionSubType InstitutionSubType = "ARTS_ENTERTAINMENT_RECREATION"
	ACCOMMODATION_FOOD_SERVICES_InstitutionSubType InstitutionSubType = "ACCOMMODATION_FOOD_SERVICES"
	OTHER_SERVICES_InstitutionSubType InstitutionSubType = "OTHER_SERVICES"
	PUBLIC_ADMINISTRATION_InstitutionSubType InstitutionSubType = "PUBLIC_ADMINISTRATION"
	NOT_CLASSIFIED_InstitutionSubType InstitutionSubType = "NOT_CLASSIFIED"
	ADULT_ENTERTAINMENT_InstitutionSubType InstitutionSubType = "ADULT_ENTERTAINMENT"
	AUCTIONS_InstitutionSubType InstitutionSubType = "AUCTIONS"
	AUTOMOBILES_InstitutionSubType InstitutionSubType = "AUTOMOBILES"
	BLOCKCHAIN_InstitutionSubType InstitutionSubType = "BLOCKCHAIN"
	CRYPTO_InstitutionSubType InstitutionSubType = "CRYPTO"
	DRUGS_InstitutionSubType InstitutionSubType = "DRUGS"
	EXPORT_IMPORT_InstitutionSubType InstitutionSubType = "EXPORT_IMPORT"
	E_COMMERCE_InstitutionSubType InstitutionSubType = "E_COMMERCE"
	FINANCIAL_INSTITUTION_InstitutionSubType InstitutionSubType = "FINANCIAL_INSTITUTION"
	GAMBLING_InstitutionSubType InstitutionSubType = "GAMBLING"
	INSURANCE_InstitutionSubType InstitutionSubType = "INSURANCE"
	MARKET_MAKER_InstitutionSubType InstitutionSubType = "MARKET_MAKER"
	RANSOMWARE_InstitutionSubType InstitutionSubType = "RANSOMWARE"
	SHELL_BANK_InstitutionSubType InstitutionSubType = "SHELL_BANK"
	TRAVEL_TRANSPORT_InstitutionSubType InstitutionSubType = "TRAVEL_TRANSPORT"
	WEAPONS_InstitutionSubType InstitutionSubType = "WEAPONS"
)

// All allowed values of InstitutionSubType enum
var AllowedInstitutionSubTypeEnumValues = []InstitutionSubType{
	"INVESTMENT",
	"HEDGE_FUND",
	"MONEY_SERVICE_BUSINESS",
	"STO_ISSUER",
	"PRECIOUS_METALS",
	"NON_PROFIT",
	"REGISTERED_INVESTMENT_ADVISOR",
	"AGRICULTURE_FORESTRY_FISHING_HUNTING",
	"MINING",
	"UTILITIES",
	"CONSTRUCTION",
	"MANUFACTURING",
	"WHOLESALE_TRADE",
	"RETAIL_TRADE",
	"TRANSPORTATION_WAREHOUSING",
	"INFORMATION",
	"FINANCE_INSURANCE",
	"REAL_ESTATE_RENTAL_LEASING",
	"PROFESSIONAL_SCIENTIFIC_TECHNICAL_SERVICES",
	"MANAGEMENT_OF_COMPANIES_ENTERPRISES",
	"ADMINISTRATIVE_SUPPORT_WASTE_MANAGEMENT_REMEDIATION_SERVICES",
	"EDUCATIONAL_SERVICES",
	"HEALTH_CARE_SOCIAL_ASSISTANCE",
	"ARTS_ENTERTAINMENT_RECREATION",
	"ACCOMMODATION_FOOD_SERVICES",
	"OTHER_SERVICES",
	"PUBLIC_ADMINISTRATION",
	"NOT_CLASSIFIED",
	"ADULT_ENTERTAINMENT",
	"AUCTIONS",
	"AUTOMOBILES",
	"BLOCKCHAIN",
	"CRYPTO",
	"DRUGS",
	"EXPORT_IMPORT",
	"E_COMMERCE",
	"FINANCIAL_INSTITUTION",
	"GAMBLING",
	"INSURANCE",
	"MARKET_MAKER",
	"RANSOMWARE",
	"SHELL_BANK",
	"TRAVEL_TRANSPORT",
	"WEAPONS",
}

func (v *InstitutionSubType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstitutionSubType(value)
	for _, existing := range AllowedInstitutionSubTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstitutionSubType", value)
}

// NewInstitutionSubTypeFromValue returns a pointer to a valid InstitutionSubType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstitutionSubTypeFromValue(v string) (*InstitutionSubType, error) {
	ev := InstitutionSubType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstitutionSubType: valid values are %v", v, AllowedInstitutionSubTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstitutionSubType) IsValid() bool {
	for _, existing := range AllowedInstitutionSubTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstitutionSubType value
func (v InstitutionSubType) Ptr() *InstitutionSubType {
	return &v
}

type NullableInstitutionSubType struct {
	value *InstitutionSubType
	isSet bool
}

func (v NullableInstitutionSubType) Get() *InstitutionSubType {
	return v.value
}

func (v *NullableInstitutionSubType) Set(val *InstitutionSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionSubType(val *InstitutionSubType) *NullableInstitutionSubType {
	return &NullableInstitutionSubType{value: val, isSet: true}
}

func (v NullableInstitutionSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

