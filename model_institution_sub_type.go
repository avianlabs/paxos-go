/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// InstitutionSubType the model 'InstitutionSubType'
type InstitutionSubType string

// List of InstitutionSubType
const (
	InstitutionSubType_INVESTMENT InstitutionSubType = "INVESTMENT"
	InstitutionSubType_HEDGE_FUND InstitutionSubType = "HEDGE_FUND"
	InstitutionSubType_MONEY_SERVICE_BUSINESS InstitutionSubType = "MONEY_SERVICE_BUSINESS"
	InstitutionSubType_STO_ISSUER InstitutionSubType = "STO_ISSUER"
	InstitutionSubType_PRECIOUS_METALS InstitutionSubType = "PRECIOUS_METALS"
	InstitutionSubType_NON_PROFIT InstitutionSubType = "NON_PROFIT"
	InstitutionSubType_REGISTERED_INVESTMENT_ADVISOR InstitutionSubType = "REGISTERED_INVESTMENT_ADVISOR"
	InstitutionSubType_AGRICULTURE_FORESTRY_FISHING_HUNTING InstitutionSubType = "AGRICULTURE_FORESTRY_FISHING_HUNTING"
	InstitutionSubType_MINING InstitutionSubType = "MINING"
	InstitutionSubType_UTILITIES InstitutionSubType = "UTILITIES"
	InstitutionSubType_CONSTRUCTION InstitutionSubType = "CONSTRUCTION"
	InstitutionSubType_MANUFACTURING InstitutionSubType = "MANUFACTURING"
	InstitutionSubType_WHOLESALE_TRADE InstitutionSubType = "WHOLESALE_TRADE"
	InstitutionSubType_RETAIL_TRADE InstitutionSubType = "RETAIL_TRADE"
	InstitutionSubType_TRANSPORTATION_WAREHOUSING InstitutionSubType = "TRANSPORTATION_WAREHOUSING"
	InstitutionSubType_INFORMATION InstitutionSubType = "INFORMATION"
	InstitutionSubType_FINANCE_INSURANCE InstitutionSubType = "FINANCE_INSURANCE"
	InstitutionSubType_REAL_ESTATE_RENTAL_LEASING InstitutionSubType = "REAL_ESTATE_RENTAL_LEASING"
	InstitutionSubType_PROFESSIONAL_SCIENTIFIC_TECHNICAL_SERVICES InstitutionSubType = "PROFESSIONAL_SCIENTIFIC_TECHNICAL_SERVICES"
	InstitutionSubType_MANAGEMENT_OF_COMPANIES_ENTERPRISES InstitutionSubType = "MANAGEMENT_OF_COMPANIES_ENTERPRISES"
	InstitutionSubType_ADMINISTRATIVE_SUPPORT_WASTE_MANAGEMENT_REMEDIATION_SERVICES InstitutionSubType = "ADMINISTRATIVE_SUPPORT_WASTE_MANAGEMENT_REMEDIATION_SERVICES"
	InstitutionSubType_EDUCATIONAL_SERVICES InstitutionSubType = "EDUCATIONAL_SERVICES"
	InstitutionSubType_HEALTH_CARE_SOCIAL_ASSISTANCE InstitutionSubType = "HEALTH_CARE_SOCIAL_ASSISTANCE"
	InstitutionSubType_ARTS_ENTERTAINMENT_RECREATION InstitutionSubType = "ARTS_ENTERTAINMENT_RECREATION"
	InstitutionSubType_ACCOMMODATION_FOOD_SERVICES InstitutionSubType = "ACCOMMODATION_FOOD_SERVICES"
	InstitutionSubType_OTHER_SERVICES InstitutionSubType = "OTHER_SERVICES"
	InstitutionSubType_PUBLIC_ADMINISTRATION InstitutionSubType = "PUBLIC_ADMINISTRATION"
	InstitutionSubType_NOT_CLASSIFIED InstitutionSubType = "NOT_CLASSIFIED"
	InstitutionSubType_ADULT_ENTERTAINMENT InstitutionSubType = "ADULT_ENTERTAINMENT"
	InstitutionSubType_AUCTIONS InstitutionSubType = "AUCTIONS"
	InstitutionSubType_AUTOMOBILES InstitutionSubType = "AUTOMOBILES"
	InstitutionSubType_BLOCKCHAIN InstitutionSubType = "BLOCKCHAIN"
	InstitutionSubType_CRYPTO InstitutionSubType = "CRYPTO"
	InstitutionSubType_DRUGS InstitutionSubType = "DRUGS"
	InstitutionSubType_EXPORT_IMPORT InstitutionSubType = "EXPORT_IMPORT"
	InstitutionSubType_E_COMMERCE InstitutionSubType = "E_COMMERCE"
	InstitutionSubType_FINANCIAL_INSTITUTION InstitutionSubType = "FINANCIAL_INSTITUTION"
	InstitutionSubType_GAMBLING InstitutionSubType = "GAMBLING"
	InstitutionSubType_INSURANCE InstitutionSubType = "INSURANCE"
	InstitutionSubType_MARKET_MAKER InstitutionSubType = "MARKET_MAKER"
	InstitutionSubType_SHELL_BANK InstitutionSubType = "SHELL_BANK"
	InstitutionSubType_TRAVEL_TRANSPORT InstitutionSubType = "TRAVEL_TRANSPORT"
	InstitutionSubType_WEAPONS InstitutionSubType = "WEAPONS"
)

// All allowed values of InstitutionSubType enum
var AllowedInstitutionSubTypeEnumValues = []InstitutionSubType{
	"INVESTMENT",
	"HEDGE_FUND",
	"MONEY_SERVICE_BUSINESS",
	"STO_ISSUER",
	"PRECIOUS_METALS",
	"NON_PROFIT",
	"REGISTERED_INVESTMENT_ADVISOR",
	"AGRICULTURE_FORESTRY_FISHING_HUNTING",
	"MINING",
	"UTILITIES",
	"CONSTRUCTION",
	"MANUFACTURING",
	"WHOLESALE_TRADE",
	"RETAIL_TRADE",
	"TRANSPORTATION_WAREHOUSING",
	"INFORMATION",
	"FINANCE_INSURANCE",
	"REAL_ESTATE_RENTAL_LEASING",
	"PROFESSIONAL_SCIENTIFIC_TECHNICAL_SERVICES",
	"MANAGEMENT_OF_COMPANIES_ENTERPRISES",
	"ADMINISTRATIVE_SUPPORT_WASTE_MANAGEMENT_REMEDIATION_SERVICES",
	"EDUCATIONAL_SERVICES",
	"HEALTH_CARE_SOCIAL_ASSISTANCE",
	"ARTS_ENTERTAINMENT_RECREATION",
	"ACCOMMODATION_FOOD_SERVICES",
	"OTHER_SERVICES",
	"PUBLIC_ADMINISTRATION",
	"NOT_CLASSIFIED",
	"ADULT_ENTERTAINMENT",
	"AUCTIONS",
	"AUTOMOBILES",
	"BLOCKCHAIN",
	"CRYPTO",
	"DRUGS",
	"EXPORT_IMPORT",
	"E_COMMERCE",
	"FINANCIAL_INSTITUTION",
	"GAMBLING",
	"INSURANCE",
	"MARKET_MAKER",
	"SHELL_BANK",
	"TRAVEL_TRANSPORT",
	"WEAPONS",
}

func (v *InstitutionSubType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstitutionSubType(value)
	for _, existing := range AllowedInstitutionSubTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstitutionSubType", value)
}

// NewInstitutionSubTypeFromValue returns a pointer to a valid InstitutionSubType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstitutionSubTypeFromValue(v string) (*InstitutionSubType, error) {
	ev := InstitutionSubType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstitutionSubType: valid values are %v", v, AllowedInstitutionSubTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstitutionSubType) IsValid() bool {
	for _, existing := range AllowedInstitutionSubTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstitutionSubType value
func (v InstitutionSubType) Ptr() *InstitutionSubType {
	return &v
}

type NullableInstitutionSubType struct {
	value *InstitutionSubType
	isSet bool
}

func (v NullableInstitutionSubType) Get() *InstitutionSubType {
	return v.value
}

func (v *NullableInstitutionSubType) Set(val *InstitutionSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionSubType(val *InstitutionSubType) *NullableInstitutionSubType {
	return &NullableInstitutionSubType{value: val, isSet: true}
}

func (v NullableInstitutionSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

