/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


// PricingAPIService PricingAPI service
type PricingAPIService service

type ApiListHistoricalPricesRequest struct {
	ctx context.Context
	ApiService *PricingAPIService
	market string
	maxDataPoints *int64
	rangeBegin *time.Time
	rangeEnd *time.Time
	paginationLimit *int32
	paginationOffset *int32
	increment *string
}

// Maximum number of data points to return.  The time frame of the increments will be inferred by finding the most granular increment without breaching the &#x60;max_data_points&#x60; value based on a set of recording data points.
func (r ApiListHistoricalPricesRequest) MaxDataPoints(maxDataPoints int64) ApiListHistoricalPricesRequest {
	r.maxDataPoints = &maxDataPoints
	return r
}

// Only return records after this timestamp, inclusive. RFC3339 format, like &#x60;2006-01-02T15:04:05Z&#x60;.
func (r ApiListHistoricalPricesRequest) RangeBegin(rangeBegin time.Time) ApiListHistoricalPricesRequest {
	r.rangeBegin = &rangeBegin
	return r
}

// Only return records before this timestamp, inclusive. RFC3339 format, like &#x60;2006-01-02T15:04:05Z&#x60;.
func (r ApiListHistoricalPricesRequest) RangeEnd(rangeEnd time.Time) ApiListHistoricalPricesRequest {
	r.rangeEnd = &rangeEnd
	return r
}

// Number of results to return
func (r ApiListHistoricalPricesRequest) PaginationLimit(paginationLimit int32) ApiListHistoricalPricesRequest {
	r.paginationLimit = &paginationLimit
	return r
}

// Number of results to skip
func (r ApiListHistoricalPricesRequest) PaginationOffset(paginationOffset int32) ApiListHistoricalPricesRequest {
	r.paginationOffset = &paginationOffset
	return r
}

// Time increment between prices. Returns data exclusive from &#x60;range.begin&#x60; and &#x60;range.end&#x60;. Do not use with &#x60;max_data_points&#x60;, as this results in an error.
func (r ApiListHistoricalPricesRequest) Increment(increment string) ApiListHistoricalPricesRequest {
	r.increment = &increment
	return r
}

func (r ApiListHistoricalPricesRequest) Execute() (*ListHistoricalPricesResponse, *http.Response, error) {
	return r.ApiService.ListHistoricalPricesExecute(r)
}

/*
ListHistoricalPrices List Historical Prices

Retrieves a set of average prices at a certain increment of time for the requested market.
This endpoint is suitable for retrieving historical average price trends where price precision, execution, and
other detailed information is not required.
To control the count, use either  `increment` or `max_data_points`.
List Historical Prices returns an error when an unexpected value is given, or when `increment` and
 `max_data_points` are both given or omitted.

When `range.begin` is omitted, the first data point shows the mid price, the average of the order book best bid
 and ask price, or the earliest available date. It is possible to set `range.begin` to a future date without error.

When `range.end` is omitted, the last data point will display current mid price (average of order book best bid
 and best ask) at the request timestamp. It is possible to set `range.end` to a future date without error.

When `pagination.limit` is omitted, the pagination limit will default to return the first 100 items.
If the pagination limit is set, the API will return up to the limit in one response. The pagination limit max is 1,000.

Time-series items are returned in chronological (ascending) order. All timestamps are in UTC.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param market Market of Order Book.
 @return ApiListHistoricalPricesRequest
*/
func (a *PricingAPIService) ListHistoricalPrices(ctx context.Context, market string) ApiListHistoricalPricesRequest {
	return ApiListHistoricalPricesRequest{
		ApiService: a,
		ctx: ctx,
		market: market,
	}
}

// Execute executes the request
//  @return ListHistoricalPricesResponse
func (a *PricingAPIService) ListHistoricalPricesExecute(r ApiListHistoricalPricesRequest) (*ListHistoricalPricesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListHistoricalPricesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingAPIService.ListHistoricalPrices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/markets/{market}/historical-prices"
	localVarPath = strings.Replace(localVarPath, "{"+"market"+"}", url.PathEscape(parameterValueToString(r.market, "market")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxDataPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_data_points", r.maxDataPoints, "form", "")
	}
	if r.rangeBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range.begin", r.rangeBegin, "form", "")
	}
	if r.rangeEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range.end", r.rangeEnd, "form", "")
	}
	if r.paginationLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.limit", r.paginationLimit, "form", "")
	}
	if r.paginationOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.offset", r.paginationOffset, "form", "")
	}
	if r.increment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "increment", r.increment, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPricesRequest struct {
	ctx context.Context
	ApiService *PricingAPIService
	markets *[]string
}

// 
func (r ApiListPricesRequest) Markets(markets []string) ApiListPricesRequest {
	r.markets = &markets
	return r
}

func (r ApiListPricesRequest) Execute() (*ListPricesResponse, *http.Response, error) {
	return r.ApiService.ListPricesExecute(r)
}

/*
ListPrices List Prices

Retrieve current prices, as well as 24 hour prior (yesterday) prices, for the specified markets.
Any single market that failed to be retrieved is excluded from the response.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPricesRequest
*/
func (a *PricingAPIService) ListPrices(ctx context.Context) ApiListPricesRequest {
	return ApiListPricesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPricesResponse
func (a *PricingAPIService) ListPricesExecute(r ApiListPricesRequest) (*ListPricesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPricesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingAPIService.ListPrices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/all-markets/prices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.markets == nil {
		return localVarReturnValue, nil, reportError("markets is required and must be specified")
	}

	{
		t := *r.markets
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "markets", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "markets", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTickersRequest struct {
	ctx context.Context
	ApiService *PricingAPIService
}

func (r ApiListTickersRequest) Execute() (*ListTickersResponse, *http.Response, error) {
	return r.ApiService.ListTickersExecute(r)
}

/*
ListTickers List Tickers

Retrieves order book statistics of the exchange for all markets over the last 24 hours and from midnight UTC until current time.

Please note: List Tickers displays pricing from external venues when the itBit exchange is not available.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListTickersRequest
*/
func (a *PricingAPIService) ListTickers(ctx context.Context) ApiListTickersRequest {
	return ApiListTickersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListTickersResponse
func (a *PricingAPIService) ListTickersExecute(r ApiListTickersRequest) (*ListTickersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTickersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingAPIService.ListTickers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/all-markets/ticker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
