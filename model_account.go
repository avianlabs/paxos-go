/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	// The id used for all other interactions with this account.
	Id *string `json:"id,omitempty"`
	// The primary identity associated with the account.
	IdentityId *string `json:"identity_id,omitempty"`
	// A free-text description of the account.
	Description *string `json:"description,omitempty"`
	// true if the account has been disabled by a Paxos admin.
	AdminDisabled *bool `json:"admin_disabled,omitempty"`
	// true if the account has been disabled by the API user.
	UserDisabled *bool `json:"user_disabled,omitempty"`
	// API User-facing metadata.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// A user-facing ID to prevent duplicate account creation. Unique for all accounts created by the same API user.
	RefId *string `json:"ref_id,omitempty"`
	// Additional Identities with varying types of access to this account.
	Members []AccountMember `json:"members,omitempty"`
	// The time this account was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	SummaryStatus *IdentityStatus `json:"summary_status,omitempty"`
	// The time this account was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The ID of the profile created for the account when `create_profile=true`. The [Profile](#tag/Profiles) type is `NORMAL`. The field is omitted when the account has no associated [Profile](#tag/Profiles).
	ProfileId *string `json:"profile_id,omitempty"`
	Type *AccountAccountType `json:"type,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Account) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Account) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Account) SetId(v string) {
	o.Id = &v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *Account) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *Account) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *Account) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Account) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Account) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Account) SetDescription(v string) {
	o.Description = &v
}

// GetAdminDisabled returns the AdminDisabled field value if set, zero value otherwise.
func (o *Account) GetAdminDisabled() bool {
	if o == nil || IsNil(o.AdminDisabled) {
		var ret bool
		return ret
	}
	return *o.AdminDisabled
}

// GetAdminDisabledOk returns a tuple with the AdminDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAdminDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminDisabled) {
		return nil, false
	}
	return o.AdminDisabled, true
}

// HasAdminDisabled returns a boolean if a field has been set.
func (o *Account) HasAdminDisabled() bool {
	if o != nil && !IsNil(o.AdminDisabled) {
		return true
	}

	return false
}

// SetAdminDisabled gets a reference to the given bool and assigns it to the AdminDisabled field.
func (o *Account) SetAdminDisabled(v bool) {
	o.AdminDisabled = &v
}

// GetUserDisabled returns the UserDisabled field value if set, zero value otherwise.
func (o *Account) GetUserDisabled() bool {
	if o == nil || IsNil(o.UserDisabled) {
		var ret bool
		return ret
	}
	return *o.UserDisabled
}

// GetUserDisabledOk returns a tuple with the UserDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUserDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserDisabled) {
		return nil, false
	}
	return o.UserDisabled, true
}

// HasUserDisabled returns a boolean if a field has been set.
func (o *Account) HasUserDisabled() bool {
	if o != nil && !IsNil(o.UserDisabled) {
		return true
	}

	return false
}

// SetUserDisabled gets a reference to the given bool and assigns it to the UserDisabled field.
func (o *Account) SetUserDisabled(v bool) {
	o.UserDisabled = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Account) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Account) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Account) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Account) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Account) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Account) SetRefId(v string) {
	o.RefId = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Account) GetMembers() []AccountMember {
	if o == nil || IsNil(o.Members) {
		var ret []AccountMember
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMembersOk() ([]AccountMember, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Account) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []AccountMember and assigns it to the Members field.
func (o *Account) SetMembers(v []AccountMember) {
	o.Members = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Account) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Account) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Account) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSummaryStatus returns the SummaryStatus field value if set, zero value otherwise.
func (o *Account) GetSummaryStatus() IdentityStatus {
	if o == nil || IsNil(o.SummaryStatus) {
		var ret IdentityStatus
		return ret
	}
	return *o.SummaryStatus
}

// GetSummaryStatusOk returns a tuple with the SummaryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSummaryStatusOk() (*IdentityStatus, bool) {
	if o == nil || IsNil(o.SummaryStatus) {
		return nil, false
	}
	return o.SummaryStatus, true
}

// HasSummaryStatus returns a boolean if a field has been set.
func (o *Account) HasSummaryStatus() bool {
	if o != nil && !IsNil(o.SummaryStatus) {
		return true
	}

	return false
}

// SetSummaryStatus gets a reference to the given IdentityStatus and assigns it to the SummaryStatus field.
func (o *Account) SetSummaryStatus(v IdentityStatus) {
	o.SummaryStatus = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Account) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Account) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Account) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *Account) GetProfileId() string {
	if o == nil || IsNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *Account) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *Account) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Account) GetType() AccountAccountType {
	if o == nil || IsNil(o.Type) {
		var ret AccountAccountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*AccountAccountType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Account) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AccountAccountType and assigns it to the Type field.
func (o *Account) SetType(v AccountAccountType) {
	o.Type = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AdminDisabled) {
		toSerialize["admin_disabled"] = o.AdminDisabled
	}
	if !IsNil(o.UserDisabled) {
		toSerialize["user_disabled"] = o.UserDisabled
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.SummaryStatus) {
		toSerialize["summary_status"] = o.SummaryStatus
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profile_id"] = o.ProfileId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


