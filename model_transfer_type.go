/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// TransferType Type of transfer.
type TransferType string

// List of TransferType
const (
	INTERNAL_TRANSFER_DEBIT TransferType = "INTERNAL_TRANSFER_DEBIT"
	INTERNAL_TRANSFER_CREDIT TransferType = "INTERNAL_TRANSFER_CREDIT"
	CRYPTO_DEPOSIT TransferType = "CRYPTO_DEPOSIT"
	CRYPTO_WITHDRAWAL TransferType = "CRYPTO_WITHDRAWAL"
	WIRE_DEPOSIT TransferType = "WIRE_DEPOSIT"
	WIRE_WITHDRAWAL TransferType = "WIRE_WITHDRAWAL"
	SEN_DEPOSIT TransferType = "SEN_DEPOSIT"
	SEN_WITHDRAWAL TransferType = "SEN_WITHDRAWAL"
	BANK_DEPOSIT TransferType = "BANK_DEPOSIT"
	BANK_WITHDRAWAL TransferType = "BANK_WITHDRAWAL"
	PAXOS_TRANSFER_DEBIT TransferType = "PAXOS_TRANSFER_DEBIT"
	PAXOS_TRANSFER_CREDIT TransferType = "PAXOS_TRANSFER_CREDIT"
	SIGNET_DEPOSIT TransferType = "SIGNET_DEPOSIT"
	SIGNET_WITHDRAWAL TransferType = "SIGNET_WITHDRAWAL"
	CBIT_WITHDRAWAL TransferType = "CBIT_WITHDRAWAL"
	CBIT_DEPOSIT TransferType = "CBIT_DEPOSIT"
)

// All allowed values of TransferType enum
var AllowedTransferTypeEnumValues = []TransferType{
	"INTERNAL_TRANSFER_DEBIT",
	"INTERNAL_TRANSFER_CREDIT",
	"CRYPTO_DEPOSIT",
	"CRYPTO_WITHDRAWAL",
	"WIRE_DEPOSIT",
	"WIRE_WITHDRAWAL",
	"SEN_DEPOSIT",
	"SEN_WITHDRAWAL",
	"BANK_DEPOSIT",
	"BANK_WITHDRAWAL",
	"PAXOS_TRANSFER_DEBIT",
	"PAXOS_TRANSFER_CREDIT",
	"SIGNET_DEPOSIT",
	"SIGNET_WITHDRAWAL",
	"CBIT_WITHDRAWAL",
	"CBIT_DEPOSIT",
}

func (v *TransferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferType(value)
	for _, existing := range AllowedTransferTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferType", value)
}

// NewTransferTypeFromValue returns a pointer to a valid TransferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferTypeFromValue(v string) (*TransferType, error) {
	ev := TransferType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferType: valid values are %v", v, AllowedTransferTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferType) IsValid() bool {
	for _, existing := range AllowedTransferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferType value
func (v TransferType) Ptr() *TransferType {
	return &v
}

type NullableTransferType struct {
	value *TransferType
	isSet bool
}

func (v NullableTransferType) Get() *TransferType {
	return v.value
}

func (v *NullableTransferType) Set(val *TransferType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferType(val *TransferType) *NullableTransferType {
	return &NullableTransferType{value: val, isSet: true}
}

func (v NullableTransferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

