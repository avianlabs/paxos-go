/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// FiatAccountStatus the model 'FiatAccountStatus'
type FiatAccountStatus string

// List of FiatAccountStatus
const (
	FIATACCOUNTSTATUS_PENDING FiatAccountStatus = "PENDING"
	FIATACCOUNTSTATUS_APPROVED FiatAccountStatus = "APPROVED"
	FIATACCOUNTSTATUS_REJECTED FiatAccountStatus = "REJECTED"
)

// All allowed values of FiatAccountStatus enum
var AllowedFiatAccountStatusEnumValues = []FiatAccountStatus{
	"PENDING",
	"APPROVED",
	"REJECTED",
}

func (v *FiatAccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FiatAccountStatus(value)
	for _, existing := range AllowedFiatAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FiatAccountStatus", value)
}

// NewFiatAccountStatusFromValue returns a pointer to a valid FiatAccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFiatAccountStatusFromValue(v string) (*FiatAccountStatus, error) {
	ev := FiatAccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FiatAccountStatus: valid values are %v", v, AllowedFiatAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FiatAccountStatus) IsValid() bool {
	for _, existing := range AllowedFiatAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FiatAccountStatus value
func (v FiatAccountStatus) Ptr() *FiatAccountStatus {
	return &v
}

type NullableFiatAccountStatus struct {
	value *FiatAccountStatus
	isSet bool
}

func (v NullableFiatAccountStatus) Get() *FiatAccountStatus {
	return v.value
}

func (v *NullableFiatAccountStatus) Set(val *FiatAccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFiatAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFiatAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiatAccountStatus(val *FiatAccountStatus) *NullableFiatAccountStatus {
	return &NullableFiatAccountStatus{value: val, isSet: true}
}

func (v NullableFiatAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiatAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

