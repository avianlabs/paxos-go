/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the IdentityPublicUpdateIdentityBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityPublicUpdateIdentityBody{}

// IdentityPublicUpdateIdentityBody struct for IdentityPublicUpdateIdentityBody
type IdentityPublicUpdateIdentityBody struct {
	PersonDetails *PersonDetails `json:"person_details,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	// `true` disables the identity. `false` re-enables it, unless it has been disabled by a Paxos admin.
	SetUserDisabled *bool `json:"set_user_disabled,omitempty"`
	InstitutionDetails *InstitutionDetails `json:"institution_details,omitempty"`
	// A user-facing ID to prevent duplicate identity creation. Unique for all identities created by the same API user.
	RefId *string `json:"ref_id,omitempty"`
	TaxDetails []TaxDetail `json:"tax_details,omitempty"`
	// Set to true if tax details are not legally required.
	SetTaxDetailsNotRequired *bool `json:"set_tax_details_not_required,omitempty"`
	CustomerDueDiligence *CustomerDueDiligence `json:"customer_due_diligence,omitempty"`
	// Set to true to indicate that this identity is a merchant.
	IsMerchant *bool `json:"is_merchant,omitempty"`
	// Set to the timestamp the identity has last undergone a periodic kyc refresh. If unset, the update is not for periodic kyc refresh. RFC3339 format, like `YYYY-MM-DDTHH:MM:SS.sssZ`. ex: `2006-01-02T15:04:05Z`.
	LastKycRefreshDate *time.Time `json:"last_kyc_refresh_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityPublicUpdateIdentityBody IdentityPublicUpdateIdentityBody

// NewIdentityPublicUpdateIdentityBody instantiates a new IdentityPublicUpdateIdentityBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityPublicUpdateIdentityBody() *IdentityPublicUpdateIdentityBody {
	this := IdentityPublicUpdateIdentityBody{}
	return &this
}

// NewIdentityPublicUpdateIdentityBodyWithDefaults instantiates a new IdentityPublicUpdateIdentityBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityPublicUpdateIdentityBodyWithDefaults() *IdentityPublicUpdateIdentityBody {
	this := IdentityPublicUpdateIdentityBody{}
	return &this
}

// GetPersonDetails returns the PersonDetails field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetPersonDetails() PersonDetails {
	if o == nil || IsNil(o.PersonDetails) {
		var ret PersonDetails
		return ret
	}
	return *o.PersonDetails
}

// GetPersonDetailsOk returns a tuple with the PersonDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetPersonDetailsOk() (*PersonDetails, bool) {
	if o == nil || IsNil(o.PersonDetails) {
		return nil, false
	}
	return o.PersonDetails, true
}

// HasPersonDetails returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasPersonDetails() bool {
	if o != nil && !IsNil(o.PersonDetails) {
		return true
	}

	return false
}

// SetPersonDetails gets a reference to the given PersonDetails and assigns it to the PersonDetails field.
func (o *IdentityPublicUpdateIdentityBody) SetPersonDetails(v PersonDetails) {
	o.PersonDetails = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IdentityPublicUpdateIdentityBody) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetSetUserDisabled returns the SetUserDisabled field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetSetUserDisabled() bool {
	if o == nil || IsNil(o.SetUserDisabled) {
		var ret bool
		return ret
	}
	return *o.SetUserDisabled
}

// GetSetUserDisabledOk returns a tuple with the SetUserDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetSetUserDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SetUserDisabled) {
		return nil, false
	}
	return o.SetUserDisabled, true
}

// HasSetUserDisabled returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasSetUserDisabled() bool {
	if o != nil && !IsNil(o.SetUserDisabled) {
		return true
	}

	return false
}

// SetSetUserDisabled gets a reference to the given bool and assigns it to the SetUserDisabled field.
func (o *IdentityPublicUpdateIdentityBody) SetSetUserDisabled(v bool) {
	o.SetUserDisabled = &v
}

// GetInstitutionDetails returns the InstitutionDetails field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetInstitutionDetails() InstitutionDetails {
	if o == nil || IsNil(o.InstitutionDetails) {
		var ret InstitutionDetails
		return ret
	}
	return *o.InstitutionDetails
}

// GetInstitutionDetailsOk returns a tuple with the InstitutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetInstitutionDetailsOk() (*InstitutionDetails, bool) {
	if o == nil || IsNil(o.InstitutionDetails) {
		return nil, false
	}
	return o.InstitutionDetails, true
}

// HasInstitutionDetails returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasInstitutionDetails() bool {
	if o != nil && !IsNil(o.InstitutionDetails) {
		return true
	}

	return false
}

// SetInstitutionDetails gets a reference to the given InstitutionDetails and assigns it to the InstitutionDetails field.
func (o *IdentityPublicUpdateIdentityBody) SetInstitutionDetails(v InstitutionDetails) {
	o.InstitutionDetails = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *IdentityPublicUpdateIdentityBody) SetRefId(v string) {
	o.RefId = &v
}

// GetTaxDetails returns the TaxDetails field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetTaxDetails() []TaxDetail {
	if o == nil || IsNil(o.TaxDetails) {
		var ret []TaxDetail
		return ret
	}
	return o.TaxDetails
}

// GetTaxDetailsOk returns a tuple with the TaxDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetTaxDetailsOk() ([]TaxDetail, bool) {
	if o == nil || IsNil(o.TaxDetails) {
		return nil, false
	}
	return o.TaxDetails, true
}

// HasTaxDetails returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasTaxDetails() bool {
	if o != nil && !IsNil(o.TaxDetails) {
		return true
	}

	return false
}

// SetTaxDetails gets a reference to the given []TaxDetail and assigns it to the TaxDetails field.
func (o *IdentityPublicUpdateIdentityBody) SetTaxDetails(v []TaxDetail) {
	o.TaxDetails = v
}

// GetSetTaxDetailsNotRequired returns the SetTaxDetailsNotRequired field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetSetTaxDetailsNotRequired() bool {
	if o == nil || IsNil(o.SetTaxDetailsNotRequired) {
		var ret bool
		return ret
	}
	return *o.SetTaxDetailsNotRequired
}

// GetSetTaxDetailsNotRequiredOk returns a tuple with the SetTaxDetailsNotRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetSetTaxDetailsNotRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.SetTaxDetailsNotRequired) {
		return nil, false
	}
	return o.SetTaxDetailsNotRequired, true
}

// HasSetTaxDetailsNotRequired returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasSetTaxDetailsNotRequired() bool {
	if o != nil && !IsNil(o.SetTaxDetailsNotRequired) {
		return true
	}

	return false
}

// SetSetTaxDetailsNotRequired gets a reference to the given bool and assigns it to the SetTaxDetailsNotRequired field.
func (o *IdentityPublicUpdateIdentityBody) SetSetTaxDetailsNotRequired(v bool) {
	o.SetTaxDetailsNotRequired = &v
}

// GetCustomerDueDiligence returns the CustomerDueDiligence field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetCustomerDueDiligence() CustomerDueDiligence {
	if o == nil || IsNil(o.CustomerDueDiligence) {
		var ret CustomerDueDiligence
		return ret
	}
	return *o.CustomerDueDiligence
}

// GetCustomerDueDiligenceOk returns a tuple with the CustomerDueDiligence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetCustomerDueDiligenceOk() (*CustomerDueDiligence, bool) {
	if o == nil || IsNil(o.CustomerDueDiligence) {
		return nil, false
	}
	return o.CustomerDueDiligence, true
}

// HasCustomerDueDiligence returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasCustomerDueDiligence() bool {
	if o != nil && !IsNil(o.CustomerDueDiligence) {
		return true
	}

	return false
}

// SetCustomerDueDiligence gets a reference to the given CustomerDueDiligence and assigns it to the CustomerDueDiligence field.
func (o *IdentityPublicUpdateIdentityBody) SetCustomerDueDiligence(v CustomerDueDiligence) {
	o.CustomerDueDiligence = &v
}

// GetIsMerchant returns the IsMerchant field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetIsMerchant() bool {
	if o == nil || IsNil(o.IsMerchant) {
		var ret bool
		return ret
	}
	return *o.IsMerchant
}

// GetIsMerchantOk returns a tuple with the IsMerchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetIsMerchantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMerchant) {
		return nil, false
	}
	return o.IsMerchant, true
}

// HasIsMerchant returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasIsMerchant() bool {
	if o != nil && !IsNil(o.IsMerchant) {
		return true
	}

	return false
}

// SetIsMerchant gets a reference to the given bool and assigns it to the IsMerchant field.
func (o *IdentityPublicUpdateIdentityBody) SetIsMerchant(v bool) {
	o.IsMerchant = &v
}

// GetLastKycRefreshDate returns the LastKycRefreshDate field value if set, zero value otherwise.
func (o *IdentityPublicUpdateIdentityBody) GetLastKycRefreshDate() time.Time {
	if o == nil || IsNil(o.LastKycRefreshDate) {
		var ret time.Time
		return ret
	}
	return *o.LastKycRefreshDate
}

// GetLastKycRefreshDateOk returns a tuple with the LastKycRefreshDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPublicUpdateIdentityBody) GetLastKycRefreshDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastKycRefreshDate) {
		return nil, false
	}
	return o.LastKycRefreshDate, true
}

// HasLastKycRefreshDate returns a boolean if a field has been set.
func (o *IdentityPublicUpdateIdentityBody) HasLastKycRefreshDate() bool {
	if o != nil && !IsNil(o.LastKycRefreshDate) {
		return true
	}

	return false
}

// SetLastKycRefreshDate gets a reference to the given time.Time and assigns it to the LastKycRefreshDate field.
func (o *IdentityPublicUpdateIdentityBody) SetLastKycRefreshDate(v time.Time) {
	o.LastKycRefreshDate = &v
}

func (o IdentityPublicUpdateIdentityBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityPublicUpdateIdentityBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PersonDetails) {
		toSerialize["person_details"] = o.PersonDetails
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.SetUserDisabled) {
		toSerialize["set_user_disabled"] = o.SetUserDisabled
	}
	if !IsNil(o.InstitutionDetails) {
		toSerialize["institution_details"] = o.InstitutionDetails
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.TaxDetails) {
		toSerialize["tax_details"] = o.TaxDetails
	}
	if !IsNil(o.SetTaxDetailsNotRequired) {
		toSerialize["set_tax_details_not_required"] = o.SetTaxDetailsNotRequired
	}
	if !IsNil(o.CustomerDueDiligence) {
		toSerialize["customer_due_diligence"] = o.CustomerDueDiligence
	}
	if !IsNil(o.IsMerchant) {
		toSerialize["is_merchant"] = o.IsMerchant
	}
	if !IsNil(o.LastKycRefreshDate) {
		toSerialize["last_kyc_refresh_date"] = o.LastKycRefreshDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityPublicUpdateIdentityBody) UnmarshalJSON(data []byte) (err error) {
	varIdentityPublicUpdateIdentityBody := _IdentityPublicUpdateIdentityBody{}

	err = json.Unmarshal(data, &varIdentityPublicUpdateIdentityBody)

	if err != nil {
		return err
	}

	*o = IdentityPublicUpdateIdentityBody(varIdentityPublicUpdateIdentityBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "person_details")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "set_user_disabled")
		delete(additionalProperties, "institution_details")
		delete(additionalProperties, "ref_id")
		delete(additionalProperties, "tax_details")
		delete(additionalProperties, "set_tax_details_not_required")
		delete(additionalProperties, "customer_due_diligence")
		delete(additionalProperties, "is_merchant")
		delete(additionalProperties, "last_kyc_refresh_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityPublicUpdateIdentityBody struct {
	value *IdentityPublicUpdateIdentityBody
	isSet bool
}

func (v NullableIdentityPublicUpdateIdentityBody) Get() *IdentityPublicUpdateIdentityBody {
	return v.value
}

func (v *NullableIdentityPublicUpdateIdentityBody) Set(val *IdentityPublicUpdateIdentityBody) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityPublicUpdateIdentityBody) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityPublicUpdateIdentityBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityPublicUpdateIdentityBody(val *IdentityPublicUpdateIdentityBody) *NullableIdentityPublicUpdateIdentityBody {
	return &NullableIdentityPublicUpdateIdentityBody{value: val, isSet: true}
}

func (v NullableIdentityPublicUpdateIdentityBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityPublicUpdateIdentityBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


