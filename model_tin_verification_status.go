/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// TINVerificationStatus The TIN verification status for the associated `tax_payer_id`.
type TINVerificationStatus string

// List of TINVerificationStatus
const (
	TINVerificationStatus_PENDING TINVerificationStatus = "TIN_VERIFICATION_PENDING"
	TINVerificationStatus_ERROR TINVerificationStatus = "TIN_VERIFICATION_ERROR"
	TINVerificationStatus_VALID TINVerificationStatus = "TIN_VERIFICATION_VALID"
)

// All allowed values of TINVerificationStatus enum
var AllowedTINVerificationStatusEnumValues = []TINVerificationStatus{
	"TIN_VERIFICATION_PENDING",
	"TIN_VERIFICATION_ERROR",
	"TIN_VERIFICATION_VALID",
}

func (v *TINVerificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TINVerificationStatus(value)
	for _, existing := range AllowedTINVerificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TINVerificationStatus", value)
}

// NewTINVerificationStatusFromValue returns a pointer to a valid TINVerificationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTINVerificationStatusFromValue(v string) (*TINVerificationStatus, error) {
	ev := TINVerificationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TINVerificationStatus: valid values are %v", v, AllowedTINVerificationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TINVerificationStatus) IsValid() bool {
	for _, existing := range AllowedTINVerificationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TINVerificationStatus value
func (v TINVerificationStatus) Ptr() *TINVerificationStatus {
	return &v
}

type NullableTINVerificationStatus struct {
	value *TINVerificationStatus
	isSet bool
}

func (v NullableTINVerificationStatus) Get() *TINVerificationStatus {
	return v.value
}

func (v *NullableTINVerificationStatus) Set(val *TINVerificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTINVerificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTINVerificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTINVerificationStatus(val *TINVerificationStatus) *NullableTINVerificationStatus {
	return &NullableTINVerificationStatus{value: val, isSet: true}
}

func (v NullableTINVerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTINVerificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

