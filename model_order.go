/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order struct for Order
type Order struct {
	// The UUID of the order.
	Id *string `json:"id,omitempty"`
	// The profile ID the order is associated with.
	ProfileId *string `json:"profile_id,omitempty"`
	// The idempotence ID for order creation. Can be reused if the order has been closed for more than 24 hours.
	RefId *string `json:"ref_id,omitempty"`
	Status *OrderStatus `json:"status,omitempty"`
	Side *OrderSide `json:"side,omitempty"`
	Market *Market `json:"market,omitempty"`
	Type *OrderType `json:"type,omitempty"`
	// The base amount or purchase amount for a market sell order.
	BaseAmount *string `json:"base_amount,omitempty"`
	// The quote price.
	Price *string `json:"price,omitempty"`
	// The quote amount of purchase for a market buy order.
	QuoteAmount *string `json:"quote_amount,omitempty"`
	// Client-specified metadata.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The time at which the order was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The time at which the order was last modified.
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The amount that was filled.
	AmountFilled *string `json:"amount_filled,omitempty"`
	// The volume-weighted average price.
	VolumeWeightedAveragePrice *string `json:"volume_weighted_average_price,omitempty"`
	TimeInForce *TimeInForce `json:"time_in_force,omitempty"`
	// The date the order will expire if not completed when specified time in force is GTT.
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	// The end user that requests the trade. This field must be used in conjunction with `identity_account_id`, otherwise the order is rejected. Depending on your integration type, `identity_id` and `identity_account_id` may be required.
	IdentityId *string `json:"identity_id,omitempty"`
	// The account under which this order is placed. The provided identity must be allowed to trade on behalf of this account. This field must be used in conjunction with `identity_id`, otherwise the order is rejected. Depending on your integration type, `identity_account_id` and `identity_id` may be required.
	IdentityAccountId *string `json:"identity_account_id,omitempty"`
	StopPrice *string `json:"stop_price,omitempty"`
	// The profileId that will receive settled currency (base for buy orders, quote for sell orders).
	RecipientProfileId *string `json:"recipient_profile_id,omitempty"`
	// Returns `true` when a stop order has been triggered.
	IsTriggered *bool `json:"is_triggered,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Order Order

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Order) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Order) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Order) SetId(v string) {
	o.Id = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *Order) GetProfileId() string {
	if o == nil || IsNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *Order) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *Order) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Order) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Order) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Order) SetRefId(v string) {
	o.RefId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Order) GetStatus() OrderStatus {
	if o == nil || IsNil(o.Status) {
		var ret OrderStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*OrderStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrderStatus and assigns it to the Status field.
func (o *Order) SetStatus(v OrderStatus) {
	o.Status = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Order) GetSide() OrderSide {
	if o == nil || IsNil(o.Side) {
		var ret OrderSide
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSideOk() (*OrderSide, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Order) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given OrderSide and assigns it to the Side field.
func (o *Order) SetSide(v OrderSide) {
	o.Side = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *Order) GetMarket() Market {
	if o == nil || IsNil(o.Market) {
		var ret Market
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetMarketOk() (*Market, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *Order) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given Market and assigns it to the Market field.
func (o *Order) SetMarket(v Market) {
	o.Market = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Order) GetType() OrderType {
	if o == nil || IsNil(o.Type) {
		var ret OrderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTypeOk() (*OrderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Order) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OrderType and assigns it to the Type field.
func (o *Order) SetType(v OrderType) {
	o.Type = &v
}

// GetBaseAmount returns the BaseAmount field value if set, zero value otherwise.
func (o *Order) GetBaseAmount() string {
	if o == nil || IsNil(o.BaseAmount) {
		var ret string
		return ret
	}
	return *o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBaseAmountOk() (*string, bool) {
	if o == nil || IsNil(o.BaseAmount) {
		return nil, false
	}
	return o.BaseAmount, true
}

// HasBaseAmount returns a boolean if a field has been set.
func (o *Order) HasBaseAmount() bool {
	if o != nil && !IsNil(o.BaseAmount) {
		return true
	}

	return false
}

// SetBaseAmount gets a reference to the given string and assigns it to the BaseAmount field.
func (o *Order) SetBaseAmount(v string) {
	o.BaseAmount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Order) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Order) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *Order) SetPrice(v string) {
	o.Price = &v
}

// GetQuoteAmount returns the QuoteAmount field value if set, zero value otherwise.
func (o *Order) GetQuoteAmount() string {
	if o == nil || IsNil(o.QuoteAmount) {
		var ret string
		return ret
	}
	return *o.QuoteAmount
}

// GetQuoteAmountOk returns a tuple with the QuoteAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuoteAmountOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteAmount) {
		return nil, false
	}
	return o.QuoteAmount, true
}

// HasQuoteAmount returns a boolean if a field has been set.
func (o *Order) HasQuoteAmount() bool {
	if o != nil && !IsNil(o.QuoteAmount) {
		return true
	}

	return false
}

// SetQuoteAmount gets a reference to the given string and assigns it to the QuoteAmount field.
func (o *Order) SetQuoteAmount(v string) {
	o.QuoteAmount = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Order) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Order) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Order) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Order) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Order) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Order) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Order) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Order) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *Order) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetAmountFilled returns the AmountFilled field value if set, zero value otherwise.
func (o *Order) GetAmountFilled() string {
	if o == nil || IsNil(o.AmountFilled) {
		var ret string
		return ret
	}
	return *o.AmountFilled
}

// GetAmountFilledOk returns a tuple with the AmountFilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAmountFilledOk() (*string, bool) {
	if o == nil || IsNil(o.AmountFilled) {
		return nil, false
	}
	return o.AmountFilled, true
}

// HasAmountFilled returns a boolean if a field has been set.
func (o *Order) HasAmountFilled() bool {
	if o != nil && !IsNil(o.AmountFilled) {
		return true
	}

	return false
}

// SetAmountFilled gets a reference to the given string and assigns it to the AmountFilled field.
func (o *Order) SetAmountFilled(v string) {
	o.AmountFilled = &v
}

// GetVolumeWeightedAveragePrice returns the VolumeWeightedAveragePrice field value if set, zero value otherwise.
func (o *Order) GetVolumeWeightedAveragePrice() string {
	if o == nil || IsNil(o.VolumeWeightedAveragePrice) {
		var ret string
		return ret
	}
	return *o.VolumeWeightedAveragePrice
}

// GetVolumeWeightedAveragePriceOk returns a tuple with the VolumeWeightedAveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetVolumeWeightedAveragePriceOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeWeightedAveragePrice) {
		return nil, false
	}
	return o.VolumeWeightedAveragePrice, true
}

// HasVolumeWeightedAveragePrice returns a boolean if a field has been set.
func (o *Order) HasVolumeWeightedAveragePrice() bool {
	if o != nil && !IsNil(o.VolumeWeightedAveragePrice) {
		return true
	}

	return false
}

// SetVolumeWeightedAveragePrice gets a reference to the given string and assigns it to the VolumeWeightedAveragePrice field.
func (o *Order) SetVolumeWeightedAveragePrice(v string) {
	o.VolumeWeightedAveragePrice = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *Order) GetTimeInForce() TimeInForce {
	if o == nil || IsNil(o.TimeInForce) {
		var ret TimeInForce
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTimeInForceOk() (*TimeInForce, bool) {
	if o == nil || IsNil(o.TimeInForce) {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *Order) HasTimeInForce() bool {
	if o != nil && !IsNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given TimeInForce and assigns it to the TimeInForce field.
func (o *Order) SetTimeInForce(v TimeInForce) {
	o.TimeInForce = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Order) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Order) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Order) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *Order) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *Order) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *Order) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetIdentityAccountId returns the IdentityAccountId field value if set, zero value otherwise.
func (o *Order) GetIdentityAccountId() string {
	if o == nil || IsNil(o.IdentityAccountId) {
		var ret string
		return ret
	}
	return *o.IdentityAccountId
}

// GetIdentityAccountIdOk returns a tuple with the IdentityAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdentityAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityAccountId) {
		return nil, false
	}
	return o.IdentityAccountId, true
}

// HasIdentityAccountId returns a boolean if a field has been set.
func (o *Order) HasIdentityAccountId() bool {
	if o != nil && !IsNil(o.IdentityAccountId) {
		return true
	}

	return false
}

// SetIdentityAccountId gets a reference to the given string and assigns it to the IdentityAccountId field.
func (o *Order) SetIdentityAccountId(v string) {
	o.IdentityAccountId = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *Order) GetStopPrice() string {
	if o == nil || IsNil(o.StopPrice) {
		var ret string
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopPriceOk() (*string, bool) {
	if o == nil || IsNil(o.StopPrice) {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *Order) HasStopPrice() bool {
	if o != nil && !IsNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given string and assigns it to the StopPrice field.
func (o *Order) SetStopPrice(v string) {
	o.StopPrice = &v
}

// GetRecipientProfileId returns the RecipientProfileId field value if set, zero value otherwise.
func (o *Order) GetRecipientProfileId() string {
	if o == nil || IsNil(o.RecipientProfileId) {
		var ret string
		return ret
	}
	return *o.RecipientProfileId
}

// GetRecipientProfileIdOk returns a tuple with the RecipientProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRecipientProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientProfileId) {
		return nil, false
	}
	return o.RecipientProfileId, true
}

// HasRecipientProfileId returns a boolean if a field has been set.
func (o *Order) HasRecipientProfileId() bool {
	if o != nil && !IsNil(o.RecipientProfileId) {
		return true
	}

	return false
}

// SetRecipientProfileId gets a reference to the given string and assigns it to the RecipientProfileId field.
func (o *Order) SetRecipientProfileId(v string) {
	o.RecipientProfileId = &v
}

// GetIsTriggered returns the IsTriggered field value if set, zero value otherwise.
func (o *Order) GetIsTriggered() bool {
	if o == nil || IsNil(o.IsTriggered) {
		var ret bool
		return ret
	}
	return *o.IsTriggered
}

// GetIsTriggeredOk returns a tuple with the IsTriggered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIsTriggeredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTriggered) {
		return nil, false
	}
	return o.IsTriggered, true
}

// HasIsTriggered returns a boolean if a field has been set.
func (o *Order) HasIsTriggered() bool {
	if o != nil && !IsNil(o.IsTriggered) {
		return true
	}

	return false
}

// SetIsTriggered gets a reference to the given bool and assigns it to the IsTriggered field.
func (o *Order) SetIsTriggered(v bool) {
	o.IsTriggered = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profile_id"] = o.ProfileId
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.BaseAmount) {
		toSerialize["base_amount"] = o.BaseAmount
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.QuoteAmount) {
		toSerialize["quote_amount"] = o.QuoteAmount
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	if !IsNil(o.AmountFilled) {
		toSerialize["amount_filled"] = o.AmountFilled
	}
	if !IsNil(o.VolumeWeightedAveragePrice) {
		toSerialize["volume_weighted_average_price"] = o.VolumeWeightedAveragePrice
	}
	if !IsNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	if !IsNil(o.IdentityAccountId) {
		toSerialize["identity_account_id"] = o.IdentityAccountId
	}
	if !IsNil(o.StopPrice) {
		toSerialize["stop_price"] = o.StopPrice
	}
	if !IsNil(o.RecipientProfileId) {
		toSerialize["recipient_profile_id"] = o.RecipientProfileId
	}
	if !IsNil(o.IsTriggered) {
		toSerialize["is_triggered"] = o.IsTriggered
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Order) UnmarshalJSON(data []byte) (err error) {
	varOrder := _Order{}

	err = json.Unmarshal(data, &varOrder)

	if err != nil {
		return err
	}

	*o = Order(varOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "profile_id")
		delete(additionalProperties, "ref_id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "side")
		delete(additionalProperties, "market")
		delete(additionalProperties, "type")
		delete(additionalProperties, "base_amount")
		delete(additionalProperties, "price")
		delete(additionalProperties, "quote_amount")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "modified_at")
		delete(additionalProperties, "amount_filled")
		delete(additionalProperties, "volume_weighted_average_price")
		delete(additionalProperties, "time_in_force")
		delete(additionalProperties, "expiration_date")
		delete(additionalProperties, "identity_id")
		delete(additionalProperties, "identity_account_id")
		delete(additionalProperties, "stop_price")
		delete(additionalProperties, "recipient_profile_id")
		delete(additionalProperties, "is_triggered")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


