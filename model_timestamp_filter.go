/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the TimestampFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimestampFilter{}

// TimestampFilter struct for TimestampFilter
type TimestampFilter struct {
	// Include timestamps strictly less than lt. RFC3339 format, like `2006-01-02T15:04:05Z`.
	Lt *time.Time `json:"lt,omitempty"`
	// Include timestamps less than or equal to lte. RFC3339 format, like `2006-01-02T15:04:05Z`.
	Lte *time.Time `json:"lte,omitempty"`
	// Include timestamps exactly equal to eq. RFC3339 format, like `2006-01-02T15:04:05Z`.
	Eq *time.Time `json:"eq,omitempty"`
	// Include timestamps greater than or equal to lte. RFC3339 format, like `2006-01-02T15:04:05Z`.
	Gte *time.Time `json:"gte,omitempty"`
	// Include timestamps strictly greater than gt. RFC3339 format, like `2006-01-02T15:04:05Z`.
	Gt *time.Time `json:"gt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TimestampFilter TimestampFilter

// NewTimestampFilter instantiates a new TimestampFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestampFilter() *TimestampFilter {
	this := TimestampFilter{}
	return &this
}

// NewTimestampFilterWithDefaults instantiates a new TimestampFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampFilterWithDefaults() *TimestampFilter {
	this := TimestampFilter{}
	return &this
}

// GetLt returns the Lt field value if set, zero value otherwise.
func (o *TimestampFilter) GetLt() time.Time {
	if o == nil || IsNil(o.Lt) {
		var ret time.Time
		return ret
	}
	return *o.Lt
}

// GetLtOk returns a tuple with the Lt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampFilter) GetLtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Lt) {
		return nil, false
	}
	return o.Lt, true
}

// HasLt returns a boolean if a field has been set.
func (o *TimestampFilter) HasLt() bool {
	if o != nil && !IsNil(o.Lt) {
		return true
	}

	return false
}

// SetLt gets a reference to the given time.Time and assigns it to the Lt field.
func (o *TimestampFilter) SetLt(v time.Time) {
	o.Lt = &v
}

// GetLte returns the Lte field value if set, zero value otherwise.
func (o *TimestampFilter) GetLte() time.Time {
	if o == nil || IsNil(o.Lte) {
		var ret time.Time
		return ret
	}
	return *o.Lte
}

// GetLteOk returns a tuple with the Lte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampFilter) GetLteOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Lte) {
		return nil, false
	}
	return o.Lte, true
}

// HasLte returns a boolean if a field has been set.
func (o *TimestampFilter) HasLte() bool {
	if o != nil && !IsNil(o.Lte) {
		return true
	}

	return false
}

// SetLte gets a reference to the given time.Time and assigns it to the Lte field.
func (o *TimestampFilter) SetLte(v time.Time) {
	o.Lte = &v
}

// GetEq returns the Eq field value if set, zero value otherwise.
func (o *TimestampFilter) GetEq() time.Time {
	if o == nil || IsNil(o.Eq) {
		var ret time.Time
		return ret
	}
	return *o.Eq
}

// GetEqOk returns a tuple with the Eq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampFilter) GetEqOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Eq) {
		return nil, false
	}
	return o.Eq, true
}

// HasEq returns a boolean if a field has been set.
func (o *TimestampFilter) HasEq() bool {
	if o != nil && !IsNil(o.Eq) {
		return true
	}

	return false
}

// SetEq gets a reference to the given time.Time and assigns it to the Eq field.
func (o *TimestampFilter) SetEq(v time.Time) {
	o.Eq = &v
}

// GetGte returns the Gte field value if set, zero value otherwise.
func (o *TimestampFilter) GetGte() time.Time {
	if o == nil || IsNil(o.Gte) {
		var ret time.Time
		return ret
	}
	return *o.Gte
}

// GetGteOk returns a tuple with the Gte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampFilter) GetGteOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Gte) {
		return nil, false
	}
	return o.Gte, true
}

// HasGte returns a boolean if a field has been set.
func (o *TimestampFilter) HasGte() bool {
	if o != nil && !IsNil(o.Gte) {
		return true
	}

	return false
}

// SetGte gets a reference to the given time.Time and assigns it to the Gte field.
func (o *TimestampFilter) SetGte(v time.Time) {
	o.Gte = &v
}

// GetGt returns the Gt field value if set, zero value otherwise.
func (o *TimestampFilter) GetGt() time.Time {
	if o == nil || IsNil(o.Gt) {
		var ret time.Time
		return ret
	}
	return *o.Gt
}

// GetGtOk returns a tuple with the Gt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampFilter) GetGtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Gt) {
		return nil, false
	}
	return o.Gt, true
}

// HasGt returns a boolean if a field has been set.
func (o *TimestampFilter) HasGt() bool {
	if o != nil && !IsNil(o.Gt) {
		return true
	}

	return false
}

// SetGt gets a reference to the given time.Time and assigns it to the Gt field.
func (o *TimestampFilter) SetGt(v time.Time) {
	o.Gt = &v
}

func (o TimestampFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimestampFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lt) {
		toSerialize["lt"] = o.Lt
	}
	if !IsNil(o.Lte) {
		toSerialize["lte"] = o.Lte
	}
	if !IsNil(o.Eq) {
		toSerialize["eq"] = o.Eq
	}
	if !IsNil(o.Gte) {
		toSerialize["gte"] = o.Gte
	}
	if !IsNil(o.Gt) {
		toSerialize["gt"] = o.Gt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TimestampFilter) UnmarshalJSON(data []byte) (err error) {
	varTimestampFilter := _TimestampFilter{}

	err = json.Unmarshal(data, &varTimestampFilter)

	if err != nil {
		return err
	}

	*o = TimestampFilter(varTimestampFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lt")
		delete(additionalProperties, "lte")
		delete(additionalProperties, "eq")
		delete(additionalProperties, "gte")
		delete(additionalProperties, "gt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTimestampFilter struct {
	value *TimestampFilter
	isSet bool
}

func (v NullableTimestampFilter) Get() *TimestampFilter {
	return v.value
}

func (v *NullableTimestampFilter) Set(val *TimestampFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestampFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestampFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestampFilter(val *TimestampFilter) *NullableTimestampFilter {
	return &NullableTimestampFilter{value: val, isSet: true}
}

func (v NullableTimestampFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestampFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


