/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// IdentityType the model 'IdentityType'
type IdentityType string

// List of IdentityType
const (
	PERSON_IdentityType IdentityType = "PERSON"
	INSTITUTION_IdentityType IdentityType = "INSTITUTION"
)

// All allowed values of IdentityType enum
var AllowedIdentityTypeEnumValues = []IdentityType{
	"PERSON",
	"INSTITUTION",
}

func (v *IdentityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityType(value)
	for _, existing := range AllowedIdentityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityType", value)
}

// NewIdentityTypeFromValue returns a pointer to a valid IdentityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityTypeFromValue(v string) (*IdentityType, error) {
	ev := IdentityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityType: valid values are %v", v, AllowedIdentityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityType) IsValid() bool {
	for _, existing := range AllowedIdentityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityType value
func (v IdentityType) Ptr() *IdentityType {
	return &v
}

type NullableIdentityType struct {
	value *IdentityType
	isSet bool
}

func (v NullableIdentityType) Get() *IdentityType {
	return v.value
}

func (v *NullableIdentityType) Set(val *IdentityType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityType(val *IdentityType) *NullableIdentityType {
	return &NullableIdentityType{value: val, isSet: true}
}

func (v NullableIdentityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

