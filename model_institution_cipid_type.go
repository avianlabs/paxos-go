/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// InstitutionCIPIDType the model 'InstitutionCIPIDType'
type InstitutionCIPIDType string

// List of InstitutionCIPIDType
const (
	EIN InstitutionCIPIDType = "EIN"
	SSN InstitutionCIPIDType = "SSN"
	ITIN InstitutionCIPIDType = "ITIN"
	REGISTRATION_NUMBER InstitutionCIPIDType = "REGISTRATION_NUMBER"
)

// All allowed values of InstitutionCIPIDType enum
var AllowedInstitutionCIPIDTypeEnumValues = []InstitutionCIPIDType{
	"EIN",
	"SSN",
	"ITIN",
	"REGISTRATION_NUMBER",
}

func (v *InstitutionCIPIDType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstitutionCIPIDType(value)
	for _, existing := range AllowedInstitutionCIPIDTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstitutionCIPIDType", value)
}

// NewInstitutionCIPIDTypeFromValue returns a pointer to a valid InstitutionCIPIDType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstitutionCIPIDTypeFromValue(v string) (*InstitutionCIPIDType, error) {
	ev := InstitutionCIPIDType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstitutionCIPIDType: valid values are %v", v, AllowedInstitutionCIPIDTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstitutionCIPIDType) IsValid() bool {
	for _, existing := range AllowedInstitutionCIPIDTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstitutionCIPIDType value
func (v InstitutionCIPIDType) Ptr() *InstitutionCIPIDType {
	return &v
}

type NullableInstitutionCIPIDType struct {
	value *InstitutionCIPIDType
	isSet bool
}

func (v NullableInstitutionCIPIDType) Get() *InstitutionCIPIDType {
	return v.value
}

func (v *NullableInstitutionCIPIDType) Set(val *InstitutionCIPIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionCIPIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionCIPIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionCIPIDType(val *InstitutionCIPIDType) *NullableInstitutionCIPIDType {
	return &NullableInstitutionCIPIDType{value: val, isSet: true}
}

func (v NullableInstitutionCIPIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionCIPIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

