/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the DocumentDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentDescription{}

// DocumentDescription struct for DocumentDescription
type DocumentDescription struct {
	FileId *string `json:"file_id,omitempty"`
	Name *string `json:"name,omitempty"`
	DocumentTypes []DocumentType `json:"document_types,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DocumentDescription DocumentDescription

// NewDocumentDescription instantiates a new DocumentDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentDescription() *DocumentDescription {
	this := DocumentDescription{}
	return &this
}

// NewDocumentDescriptionWithDefaults instantiates a new DocumentDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDescriptionWithDefaults() *DocumentDescription {
	this := DocumentDescription{}
	return &this
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *DocumentDescription) GetFileId() string {
	if o == nil || IsNil(o.FileId) {
		var ret string
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDescription) GetFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *DocumentDescription) HasFileId() bool {
	if o != nil && !IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given string and assigns it to the FileId field.
func (o *DocumentDescription) SetFileId(v string) {
	o.FileId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DocumentDescription) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDescription) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DocumentDescription) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DocumentDescription) SetName(v string) {
	o.Name = &v
}

// GetDocumentTypes returns the DocumentTypes field value if set, zero value otherwise.
func (o *DocumentDescription) GetDocumentTypes() []DocumentType {
	if o == nil || IsNil(o.DocumentTypes) {
		var ret []DocumentType
		return ret
	}
	return o.DocumentTypes
}

// GetDocumentTypesOk returns a tuple with the DocumentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDescription) GetDocumentTypesOk() ([]DocumentType, bool) {
	if o == nil || IsNil(o.DocumentTypes) {
		return nil, false
	}
	return o.DocumentTypes, true
}

// HasDocumentTypes returns a boolean if a field has been set.
func (o *DocumentDescription) HasDocumentTypes() bool {
	if o != nil && !IsNil(o.DocumentTypes) {
		return true
	}

	return false
}

// SetDocumentTypes gets a reference to the given []DocumentType and assigns it to the DocumentTypes field.
func (o *DocumentDescription) SetDocumentTypes(v []DocumentType) {
	o.DocumentTypes = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DocumentDescription) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDescription) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DocumentDescription) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DocumentDescription) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *DocumentDescription) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDescription) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *DocumentDescription) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given time.Time and assigns it to the ArchivedAt field.
func (o *DocumentDescription) SetArchivedAt(v time.Time) {
	o.ArchivedAt = &v
}

func (o DocumentDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileId) {
		toSerialize["file_id"] = o.FileId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DocumentTypes) {
		toSerialize["document_types"] = o.DocumentTypes
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archived_at"] = o.ArchivedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DocumentDescription) UnmarshalJSON(data []byte) (err error) {
	varDocumentDescription := _DocumentDescription{}

	err = json.Unmarshal(data, &varDocumentDescription)

	if err != nil {
		return err
	}

	*o = DocumentDescription(varDocumentDescription)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "file_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "document_types")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "archived_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDocumentDescription struct {
	value *DocumentDescription
	isSet bool
}

func (v NullableDocumentDescription) Get() *DocumentDescription {
	return v.value
}

func (v *NullableDocumentDescription) Set(val *DocumentDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentDescription(val *DocumentDescription) *NullableDocumentDescription {
	return &NullableDocumentDescription{value: val, isSet: true}
}

func (v NullableDocumentDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


