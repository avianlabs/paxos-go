/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SandboxDepositsAPIService SandboxDepositsAPI service
type SandboxDepositsAPIService service

type ApiCreateSandboxDepositRequest struct {
	ctx context.Context
	ApiService *SandboxDepositsAPIService
	profileId string
	fundingSandboxCreateSandboxDepositBody *FundingSandboxCreateSandboxDepositBody
}

func (r ApiCreateSandboxDepositRequest) FundingSandboxCreateSandboxDepositBody(fundingSandboxCreateSandboxDepositBody FundingSandboxCreateSandboxDepositBody) ApiCreateSandboxDepositRequest {
	r.fundingSandboxCreateSandboxDepositBody = &fundingSandboxCreateSandboxDepositBody
	return r
}

func (r ApiCreateSandboxDepositRequest) Execute() (*CreateSandboxDepositResponse, *http.Response, error) {
	return r.ApiService.CreateSandboxDepositExecute(r)
}

/*
CreateSandboxDeposit Create Sandbox Deposit

Create a test deposit to fund a profile in the sandbox environment.

Always specify `crypto_network` when making a crypto sandbox deposit. Omit the parameter when depositing fiat.

*This functionality is only available in the sandbox environment.*

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId The ID of the profile that will credited with the assets.
 @return ApiCreateSandboxDepositRequest
*/
func (a *SandboxDepositsAPIService) CreateSandboxDeposit(ctx context.Context, profileId string) ApiCreateSandboxDepositRequest {
	return ApiCreateSandboxDepositRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return CreateSandboxDepositResponse
func (a *SandboxDepositsAPIService) CreateSandboxDepositExecute(r ApiCreateSandboxDepositRequest) (*CreateSandboxDepositResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSandboxDepositResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SandboxDepositsAPIService.CreateSandboxDeposit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sandbox/profiles/{profile_id}/deposit"
	localVarPath = strings.Replace(localVarPath, "{"+"profile_id"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fundingSandboxCreateSandboxDepositBody == nil {
		return localVarReturnValue, nil, reportError("fundingSandboxCreateSandboxDepositBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fundingSandboxCreateSandboxDepositBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
