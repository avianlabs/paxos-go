/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// PassthroughVerifierType the model 'PassthroughVerifierType'
type PassthroughVerifierType string

// List of PassthroughVerifierType
const (
	JUMIO PassthroughVerifierType = "JUMIO"
	ALLOY PassthroughVerifierType = "ALLOY"
	LEXISNEXIS PassthroughVerifierType = "LEXISNEXIS"
	MITEK PassthroughVerifierType = "MITEK"
	SUMSUB PassthroughVerifierType = "SUMSUB"
	MICROBILT PassthroughVerifierType = "MICROBILT"
	ONFIDO PassthroughVerifierType = "ONFIDO"
	CUSTOMER PassthroughVerifierType = "CUSTOMER"
	EQUIFAX PassthroughVerifierType = "EQUIFAX"
	ID3_AUTHENTICATE PassthroughVerifierType = "ID3_AUTHENTICATE"
	FIS PassthroughVerifierType = "FIS"
	PROVE PassthroughVerifierType = "PROVE"
)

// All allowed values of PassthroughVerifierType enum
var AllowedPassthroughVerifierTypeEnumValues = []PassthroughVerifierType{
	"JUMIO",
	"ALLOY",
	"LEXISNEXIS",
	"MITEK",
	"SUMSUB",
	"MICROBILT",
	"ONFIDO",
	"CUSTOMER",
	"EQUIFAX",
	"ID3_AUTHENTICATE",
	"FIS",
	"PROVE",
}

func (v *PassthroughVerifierType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PassthroughVerifierType(value)
	for _, existing := range AllowedPassthroughVerifierTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PassthroughVerifierType", value)
}

// NewPassthroughVerifierTypeFromValue returns a pointer to a valid PassthroughVerifierType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPassthroughVerifierTypeFromValue(v string) (*PassthroughVerifierType, error) {
	ev := PassthroughVerifierType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PassthroughVerifierType: valid values are %v", v, AllowedPassthroughVerifierTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PassthroughVerifierType) IsValid() bool {
	for _, existing := range AllowedPassthroughVerifierTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PassthroughVerifierType value
func (v PassthroughVerifierType) Ptr() *PassthroughVerifierType {
	return &v
}

type NullablePassthroughVerifierType struct {
	value *PassthroughVerifierType
	isSet bool
}

func (v NullablePassthroughVerifierType) Get() *PassthroughVerifierType {
	return v.value
}

func (v *NullablePassthroughVerifierType) Set(val *PassthroughVerifierType) {
	v.value = val
	v.isSet = true
}

func (v NullablePassthroughVerifierType) IsSet() bool {
	return v.isSet
}

func (v *NullablePassthroughVerifierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePassthroughVerifierType(val *PassthroughVerifierType) *NullablePassthroughVerifierType {
	return &NullablePassthroughVerifierType{value: val, isSet: true}
}

func (v NullablePassthroughVerifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePassthroughVerifierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

