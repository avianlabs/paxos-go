/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
)

// checks if the ListMarketsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListMarketsResponse{}

// ListMarketsResponse struct for ListMarketsResponse
type ListMarketsResponse struct {
	Markets []MarketDetails `json:"markets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListMarketsResponse ListMarketsResponse

// NewListMarketsResponse instantiates a new ListMarketsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListMarketsResponse() *ListMarketsResponse {
	this := ListMarketsResponse{}
	return &this
}

// NewListMarketsResponseWithDefaults instantiates a new ListMarketsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListMarketsResponseWithDefaults() *ListMarketsResponse {
	this := ListMarketsResponse{}
	return &this
}

// GetMarkets returns the Markets field value if set, zero value otherwise.
func (o *ListMarketsResponse) GetMarkets() []MarketDetails {
	if o == nil || IsNil(o.Markets) {
		var ret []MarketDetails
		return ret
	}
	return o.Markets
}

// GetMarketsOk returns a tuple with the Markets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMarketsResponse) GetMarketsOk() ([]MarketDetails, bool) {
	if o == nil || IsNil(o.Markets) {
		return nil, false
	}
	return o.Markets, true
}

// HasMarkets returns a boolean if a field has been set.
func (o *ListMarketsResponse) HasMarkets() bool {
	if o != nil && !IsNil(o.Markets) {
		return true
	}

	return false
}

// SetMarkets gets a reference to the given []MarketDetails and assigns it to the Markets field.
func (o *ListMarketsResponse) SetMarkets(v []MarketDetails) {
	o.Markets = v
}

func (o ListMarketsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListMarketsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Markets) {
		toSerialize["markets"] = o.Markets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListMarketsResponse) UnmarshalJSON(data []byte) (err error) {
	varListMarketsResponse := _ListMarketsResponse{}

	err = json.Unmarshal(data, &varListMarketsResponse)

	if err != nil {
		return err
	}

	*o = ListMarketsResponse(varListMarketsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "markets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListMarketsResponse struct {
	value *ListMarketsResponse
	isSet bool
}

func (v NullableListMarketsResponse) Get() *ListMarketsResponse {
	return v.value
}

func (v *NullableListMarketsResponse) Set(val *ListMarketsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMarketsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMarketsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMarketsResponse(val *ListMarketsResponse) *NullableListMarketsResponse {
	return &NullableListMarketsResponse{value: val, isSet: true}
}

func (v NullableListMarketsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMarketsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


