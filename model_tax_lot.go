/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
)

// checks if the TaxLot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxLot{}

// TaxLot struct for TaxLot
type TaxLot struct {
	// The tax lot ID.
	Id *string `json:"id,omitempty"`
	// Profile ID.
	ProfileId *string `json:"profile_id,omitempty"`
	// Account ID.
	AccountId *string `json:"account_id,omitempty"`
	// The timestamp at which the asset was acquired.
	AcquiredAt *time.Time `json:"Acquired_at,omitempty"`
	// The currency for numeric fields in Crypto.
	Cryptocurrency *string `json:"cryptocurrency,omitempty"`
	// The currency for numeric fields in Fiat.
	FiatCurrency *string `json:"fiat_currency,omitempty"`
	// The cost basis.
	CostBasis *string `json:"cost_basis,omitempty"`
	// The cost basis per crypto coin.
	CostBasisPerCoin *string `json:"cost_basis_per_coin,omitempty"`
	// The quantity of total crypto coins.
	Quantity *string `json:"quantity,omitempty"`
	TransactionType *TransactionType `json:"transaction_type,omitempty"`
	// Transaction id.
	TransactionId *string `json:"transaction_id,omitempty"`
	// The capital gain for the tax lot, estimated with current crypto price for open tax lots.
	CapitalGain *string `json:"capital_gain,omitempty"`
	CapitalGainType *CapitalGainType `json:"capital_gain_type,omitempty"`
	// The percentage of capital gain over cost basis.
	PercentageCapitalGain *string `json:"percentage_capital_gain,omitempty"`
	// The current market value calculated by current Crypto price.
	CurrentMarketValue *string `json:"current_market_value,omitempty"`
	// The number of days left until capital gain type is LONG_TERM. Return 999 if acquisition time is unknown.
	DaysToLongTerm *string `json:"days_to_long_term,omitempty"`
	Status *TaxLotStatus `json:"status,omitempty"`
	// The timestamp at which tax lot is created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The timestamp at which tax lot is closed.
	ClosedAt *time.Time `json:"closed_at,omitempty"`
}

// NewTaxLot instantiates a new TaxLot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxLot() *TaxLot {
	this := TaxLot{}
	return &this
}

// NewTaxLotWithDefaults instantiates a new TaxLot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxLotWithDefaults() *TaxLot {
	this := TaxLot{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxLot) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxLot) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaxLot) SetId(v string) {
	o.Id = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *TaxLot) GetProfileId() string {
	if o == nil || IsNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *TaxLot) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *TaxLot) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TaxLot) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TaxLot) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *TaxLot) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAcquiredAt returns the AcquiredAt field value if set, zero value otherwise.
func (o *TaxLot) GetAcquiredAt() time.Time {
	if o == nil || IsNil(o.AcquiredAt) {
		var ret time.Time
		return ret
	}
	return *o.AcquiredAt
}

// GetAcquiredAtOk returns a tuple with the AcquiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetAcquiredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcquiredAt) {
		return nil, false
	}
	return o.AcquiredAt, true
}

// HasAcquiredAt returns a boolean if a field has been set.
func (o *TaxLot) HasAcquiredAt() bool {
	if o != nil && !IsNil(o.AcquiredAt) {
		return true
	}

	return false
}

// SetAcquiredAt gets a reference to the given time.Time and assigns it to the AcquiredAt field.
func (o *TaxLot) SetAcquiredAt(v time.Time) {
	o.AcquiredAt = &v
}

// GetCryptocurrency returns the Cryptocurrency field value if set, zero value otherwise.
func (o *TaxLot) GetCryptocurrency() string {
	if o == nil || IsNil(o.Cryptocurrency) {
		var ret string
		return ret
	}
	return *o.Cryptocurrency
}

// GetCryptocurrencyOk returns a tuple with the Cryptocurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCryptocurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Cryptocurrency) {
		return nil, false
	}
	return o.Cryptocurrency, true
}

// HasCryptocurrency returns a boolean if a field has been set.
func (o *TaxLot) HasCryptocurrency() bool {
	if o != nil && !IsNil(o.Cryptocurrency) {
		return true
	}

	return false
}

// SetCryptocurrency gets a reference to the given string and assigns it to the Cryptocurrency field.
func (o *TaxLot) SetCryptocurrency(v string) {
	o.Cryptocurrency = &v
}

// GetFiatCurrency returns the FiatCurrency field value if set, zero value otherwise.
func (o *TaxLot) GetFiatCurrency() string {
	if o == nil || IsNil(o.FiatCurrency) {
		var ret string
		return ret
	}
	return *o.FiatCurrency
}

// GetFiatCurrencyOk returns a tuple with the FiatCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetFiatCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.FiatCurrency) {
		return nil, false
	}
	return o.FiatCurrency, true
}

// HasFiatCurrency returns a boolean if a field has been set.
func (o *TaxLot) HasFiatCurrency() bool {
	if o != nil && !IsNil(o.FiatCurrency) {
		return true
	}

	return false
}

// SetFiatCurrency gets a reference to the given string and assigns it to the FiatCurrency field.
func (o *TaxLot) SetFiatCurrency(v string) {
	o.FiatCurrency = &v
}

// GetCostBasis returns the CostBasis field value if set, zero value otherwise.
func (o *TaxLot) GetCostBasis() string {
	if o == nil || IsNil(o.CostBasis) {
		var ret string
		return ret
	}
	return *o.CostBasis
}

// GetCostBasisOk returns a tuple with the CostBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCostBasisOk() (*string, bool) {
	if o == nil || IsNil(o.CostBasis) {
		return nil, false
	}
	return o.CostBasis, true
}

// HasCostBasis returns a boolean if a field has been set.
func (o *TaxLot) HasCostBasis() bool {
	if o != nil && !IsNil(o.CostBasis) {
		return true
	}

	return false
}

// SetCostBasis gets a reference to the given string and assigns it to the CostBasis field.
func (o *TaxLot) SetCostBasis(v string) {
	o.CostBasis = &v
}

// GetCostBasisPerCoin returns the CostBasisPerCoin field value if set, zero value otherwise.
func (o *TaxLot) GetCostBasisPerCoin() string {
	if o == nil || IsNil(o.CostBasisPerCoin) {
		var ret string
		return ret
	}
	return *o.CostBasisPerCoin
}

// GetCostBasisPerCoinOk returns a tuple with the CostBasisPerCoin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCostBasisPerCoinOk() (*string, bool) {
	if o == nil || IsNil(o.CostBasisPerCoin) {
		return nil, false
	}
	return o.CostBasisPerCoin, true
}

// HasCostBasisPerCoin returns a boolean if a field has been set.
func (o *TaxLot) HasCostBasisPerCoin() bool {
	if o != nil && !IsNil(o.CostBasisPerCoin) {
		return true
	}

	return false
}

// SetCostBasisPerCoin gets a reference to the given string and assigns it to the CostBasisPerCoin field.
func (o *TaxLot) SetCostBasisPerCoin(v string) {
	o.CostBasisPerCoin = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *TaxLot) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *TaxLot) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *TaxLot) SetQuantity(v string) {
	o.Quantity = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *TaxLot) GetTransactionType() TransactionType {
	if o == nil || IsNil(o.TransactionType) {
		var ret TransactionType
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetTransactionTypeOk() (*TransactionType, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *TaxLot) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given TransactionType and assigns it to the TransactionType field.
func (o *TaxLot) SetTransactionType(v TransactionType) {
	o.TransactionType = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *TaxLot) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *TaxLot) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *TaxLot) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetCapitalGain returns the CapitalGain field value if set, zero value otherwise.
func (o *TaxLot) GetCapitalGain() string {
	if o == nil || IsNil(o.CapitalGain) {
		var ret string
		return ret
	}
	return *o.CapitalGain
}

// GetCapitalGainOk returns a tuple with the CapitalGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCapitalGainOk() (*string, bool) {
	if o == nil || IsNil(o.CapitalGain) {
		return nil, false
	}
	return o.CapitalGain, true
}

// HasCapitalGain returns a boolean if a field has been set.
func (o *TaxLot) HasCapitalGain() bool {
	if o != nil && !IsNil(o.CapitalGain) {
		return true
	}

	return false
}

// SetCapitalGain gets a reference to the given string and assigns it to the CapitalGain field.
func (o *TaxLot) SetCapitalGain(v string) {
	o.CapitalGain = &v
}

// GetCapitalGainType returns the CapitalGainType field value if set, zero value otherwise.
func (o *TaxLot) GetCapitalGainType() CapitalGainType {
	if o == nil || IsNil(o.CapitalGainType) {
		var ret CapitalGainType
		return ret
	}
	return *o.CapitalGainType
}

// GetCapitalGainTypeOk returns a tuple with the CapitalGainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCapitalGainTypeOk() (*CapitalGainType, bool) {
	if o == nil || IsNil(o.CapitalGainType) {
		return nil, false
	}
	return o.CapitalGainType, true
}

// HasCapitalGainType returns a boolean if a field has been set.
func (o *TaxLot) HasCapitalGainType() bool {
	if o != nil && !IsNil(o.CapitalGainType) {
		return true
	}

	return false
}

// SetCapitalGainType gets a reference to the given CapitalGainType and assigns it to the CapitalGainType field.
func (o *TaxLot) SetCapitalGainType(v CapitalGainType) {
	o.CapitalGainType = &v
}

// GetPercentageCapitalGain returns the PercentageCapitalGain field value if set, zero value otherwise.
func (o *TaxLot) GetPercentageCapitalGain() string {
	if o == nil || IsNil(o.PercentageCapitalGain) {
		var ret string
		return ret
	}
	return *o.PercentageCapitalGain
}

// GetPercentageCapitalGainOk returns a tuple with the PercentageCapitalGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetPercentageCapitalGainOk() (*string, bool) {
	if o == nil || IsNil(o.PercentageCapitalGain) {
		return nil, false
	}
	return o.PercentageCapitalGain, true
}

// HasPercentageCapitalGain returns a boolean if a field has been set.
func (o *TaxLot) HasPercentageCapitalGain() bool {
	if o != nil && !IsNil(o.PercentageCapitalGain) {
		return true
	}

	return false
}

// SetPercentageCapitalGain gets a reference to the given string and assigns it to the PercentageCapitalGain field.
func (o *TaxLot) SetPercentageCapitalGain(v string) {
	o.PercentageCapitalGain = &v
}

// GetCurrentMarketValue returns the CurrentMarketValue field value if set, zero value otherwise.
func (o *TaxLot) GetCurrentMarketValue() string {
	if o == nil || IsNil(o.CurrentMarketValue) {
		var ret string
		return ret
	}
	return *o.CurrentMarketValue
}

// GetCurrentMarketValueOk returns a tuple with the CurrentMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCurrentMarketValueOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentMarketValue) {
		return nil, false
	}
	return o.CurrentMarketValue, true
}

// HasCurrentMarketValue returns a boolean if a field has been set.
func (o *TaxLot) HasCurrentMarketValue() bool {
	if o != nil && !IsNil(o.CurrentMarketValue) {
		return true
	}

	return false
}

// SetCurrentMarketValue gets a reference to the given string and assigns it to the CurrentMarketValue field.
func (o *TaxLot) SetCurrentMarketValue(v string) {
	o.CurrentMarketValue = &v
}

// GetDaysToLongTerm returns the DaysToLongTerm field value if set, zero value otherwise.
func (o *TaxLot) GetDaysToLongTerm() string {
	if o == nil || IsNil(o.DaysToLongTerm) {
		var ret string
		return ret
	}
	return *o.DaysToLongTerm
}

// GetDaysToLongTermOk returns a tuple with the DaysToLongTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetDaysToLongTermOk() (*string, bool) {
	if o == nil || IsNil(o.DaysToLongTerm) {
		return nil, false
	}
	return o.DaysToLongTerm, true
}

// HasDaysToLongTerm returns a boolean if a field has been set.
func (o *TaxLot) HasDaysToLongTerm() bool {
	if o != nil && !IsNil(o.DaysToLongTerm) {
		return true
	}

	return false
}

// SetDaysToLongTerm gets a reference to the given string and assigns it to the DaysToLongTerm field.
func (o *TaxLot) SetDaysToLongTerm(v string) {
	o.DaysToLongTerm = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaxLot) GetStatus() TaxLotStatus {
	if o == nil || IsNil(o.Status) {
		var ret TaxLotStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetStatusOk() (*TaxLotStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaxLot) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TaxLotStatus and assigns it to the Status field.
func (o *TaxLot) SetStatus(v TaxLotStatus) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TaxLot) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TaxLot) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TaxLot) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetClosedAt returns the ClosedAt field value if set, zero value otherwise.
func (o *TaxLot) GetClosedAt() time.Time {
	if o == nil || IsNil(o.ClosedAt) {
		var ret time.Time
		return ret
	}
	return *o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxLot) GetClosedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedAt) {
		return nil, false
	}
	return o.ClosedAt, true
}

// HasClosedAt returns a boolean if a field has been set.
func (o *TaxLot) HasClosedAt() bool {
	if o != nil && !IsNil(o.ClosedAt) {
		return true
	}

	return false
}

// SetClosedAt gets a reference to the given time.Time and assigns it to the ClosedAt field.
func (o *TaxLot) SetClosedAt(v time.Time) {
	o.ClosedAt = &v
}

func (o TaxLot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxLot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profile_id"] = o.ProfileId
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.AcquiredAt) {
		toSerialize["Acquired_at"] = o.AcquiredAt
	}
	if !IsNil(o.Cryptocurrency) {
		toSerialize["cryptocurrency"] = o.Cryptocurrency
	}
	if !IsNil(o.FiatCurrency) {
		toSerialize["fiat_currency"] = o.FiatCurrency
	}
	if !IsNil(o.CostBasis) {
		toSerialize["cost_basis"] = o.CostBasis
	}
	if !IsNil(o.CostBasisPerCoin) {
		toSerialize["cost_basis_per_coin"] = o.CostBasisPerCoin
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.CapitalGain) {
		toSerialize["capital_gain"] = o.CapitalGain
	}
	if !IsNil(o.CapitalGainType) {
		toSerialize["capital_gain_type"] = o.CapitalGainType
	}
	if !IsNil(o.PercentageCapitalGain) {
		toSerialize["percentage_capital_gain"] = o.PercentageCapitalGain
	}
	if !IsNil(o.CurrentMarketValue) {
		toSerialize["current_market_value"] = o.CurrentMarketValue
	}
	if !IsNil(o.DaysToLongTerm) {
		toSerialize["days_to_long_term"] = o.DaysToLongTerm
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ClosedAt) {
		toSerialize["closed_at"] = o.ClosedAt
	}
	return toSerialize, nil
}

type NullableTaxLot struct {
	value *TaxLot
	isSet bool
}

func (v NullableTaxLot) Get() *TaxLot {
	return v.value
}

func (v *NullableTaxLot) Set(val *TaxLot) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxLot) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxLot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxLot(val *TaxLot) *NullableTaxLot {
	return &NullableTaxLot{value: val, isSet: true}
}

func (v NullableTaxLot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxLot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


