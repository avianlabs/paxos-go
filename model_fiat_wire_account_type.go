/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// FiatWireAccountType the model 'FiatWireAccountType'
type FiatWireAccountType string

// List of FiatWireAccountType
const (
	ABA_FiatWireAccountType FiatWireAccountType = "ABA"
	SWIFT_FiatWireAccountType FiatWireAccountType = "SWIFT"
)

// All allowed values of FiatWireAccountType enum
var AllowedFiatWireAccountTypeEnumValues = []FiatWireAccountType{
	"ABA",
	"SWIFT",
}

func (v *FiatWireAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FiatWireAccountType(value)
	for _, existing := range AllowedFiatWireAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FiatWireAccountType", value)
}

// NewFiatWireAccountTypeFromValue returns a pointer to a valid FiatWireAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFiatWireAccountTypeFromValue(v string) (*FiatWireAccountType, error) {
	ev := FiatWireAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FiatWireAccountType: valid values are %v", v, AllowedFiatWireAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FiatWireAccountType) IsValid() bool {
	for _, existing := range AllowedFiatWireAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FiatWireAccountType value
func (v FiatWireAccountType) Ptr() *FiatWireAccountType {
	return &v
}

type NullableFiatWireAccountType struct {
	value *FiatWireAccountType
	isSet bool
}

func (v NullableFiatWireAccountType) Get() *FiatWireAccountType {
	return v.value
}

func (v *NullableFiatWireAccountType) Set(val *FiatWireAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiatWireAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiatWireAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiatWireAccountType(val *FiatWireAccountType) *NullableFiatWireAccountType {
	return &NullableFiatWireAccountType{value: val, isSet: true}
}

func (v NullableFiatWireAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiatWireAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

