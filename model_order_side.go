/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// OrderSide Trade side.
type OrderSide string

// List of OrderSide
const (
	OrderSide_BUY OrderSide = "BUY"
	OrderSide_SELL OrderSide = "SELL"
)

// All allowed values of OrderSide enum
var AllowedOrderSideEnumValues = []OrderSide{
	"BUY",
	"SELL",
}

func (v *OrderSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderSide(value)
	for _, existing := range AllowedOrderSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderSide", value)
}

// NewOrderSideFromValue returns a pointer to a valid OrderSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderSideFromValue(v string) (*OrderSide, error) {
	ev := OrderSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderSide: valid values are %v", v, AllowedOrderSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderSide) IsValid() bool {
	for _, existing := range AllowedOrderSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderSide value
func (v OrderSide) Ptr() *OrderSide {
	return &v
}

type NullableOrderSide struct {
	value *OrderSide
	isSet bool
}

func (v NullableOrderSide) Get() *OrderSide {
	return v.value
}

func (v *NullableOrderSide) Set(val *OrderSide) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderSide) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderSide(val *OrderSide) *NullableOrderSide {
	return &NullableOrderSide{value: val, isSet: true}
}

func (v NullableOrderSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

