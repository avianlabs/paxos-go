/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// DepositAddressConversionTargetAsset Asset to credit for deposits of Paxos-minted USD stablecoin.
type DepositAddressConversionTargetAsset string

// List of DepositAddressConversionTargetAsset
const (
	DEPOSITADDRESSCONVERSIONTARGETASSET_NO_CONVERSION DepositAddressConversionTargetAsset = "NO_CONVERSION"
	DEPOSITADDRESSCONVERSIONTARGETASSET_USD DepositAddressConversionTargetAsset = "USD"
)

// All allowed values of DepositAddressConversionTargetAsset enum
var AllowedDepositAddressConversionTargetAssetEnumValues = []DepositAddressConversionTargetAsset{
	"NO_CONVERSION",
	"USD",
}

func (v *DepositAddressConversionTargetAsset) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DepositAddressConversionTargetAsset(value)
	for _, existing := range AllowedDepositAddressConversionTargetAssetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DepositAddressConversionTargetAsset", value)
}

// NewDepositAddressConversionTargetAssetFromValue returns a pointer to a valid DepositAddressConversionTargetAsset
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDepositAddressConversionTargetAssetFromValue(v string) (*DepositAddressConversionTargetAsset, error) {
	ev := DepositAddressConversionTargetAsset(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DepositAddressConversionTargetAsset: valid values are %v", v, AllowedDepositAddressConversionTargetAssetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DepositAddressConversionTargetAsset) IsValid() bool {
	for _, existing := range AllowedDepositAddressConversionTargetAssetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DepositAddressConversionTargetAsset value
func (v DepositAddressConversionTargetAsset) Ptr() *DepositAddressConversionTargetAsset {
	return &v
}

type NullableDepositAddressConversionTargetAsset struct {
	value *DepositAddressConversionTargetAsset
	isSet bool
}

func (v NullableDepositAddressConversionTargetAsset) Get() *DepositAddressConversionTargetAsset {
	return v.value
}

func (v *NullableDepositAddressConversionTargetAsset) Set(val *DepositAddressConversionTargetAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositAddressConversionTargetAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositAddressConversionTargetAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositAddressConversionTargetAsset(val *DepositAddressConversionTargetAsset) *NullableDepositAddressConversionTargetAsset {
	return &NullableDepositAddressConversionTargetAsset{value: val, isSet: true}
}

func (v NullableDepositAddressConversionTargetAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositAddressConversionTargetAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

