/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// InstitutionRoleType the model 'InstitutionRoleType'
type InstitutionRoleType string

// List of InstitutionRoleType
const (
	BENEFICIAL_OWNER_InstitutionRoleType InstitutionRoleType = "BENEFICIAL_OWNER"
	ACCOUNT_OPENER_InstitutionRoleType InstitutionRoleType = "ACCOUNT_OPENER"
	TRUSTEE_InstitutionRoleType InstitutionRoleType = "TRUSTEE"
	AUTHORIZED_USER_InstitutionRoleType InstitutionRoleType = "AUTHORIZED_USER"
	GRANTOR_InstitutionRoleType InstitutionRoleType = "GRANTOR"
	MANAGEMENT_CONTROL_PERSON_InstitutionRoleType InstitutionRoleType = "MANAGEMENT_CONTROL_PERSON"
	BENEFICIARY_InstitutionRoleType InstitutionRoleType = "BENEFICIARY"
)

// All allowed values of InstitutionRoleType enum
var AllowedInstitutionRoleTypeEnumValues = []InstitutionRoleType{
	"BENEFICIAL_OWNER",
	"ACCOUNT_OPENER",
	"TRUSTEE",
	"AUTHORIZED_USER",
	"GRANTOR",
	"MANAGEMENT_CONTROL_PERSON",
	"BENEFICIARY",
}

func (v *InstitutionRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstitutionRoleType(value)
	for _, existing := range AllowedInstitutionRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstitutionRoleType", value)
}

// NewInstitutionRoleTypeFromValue returns a pointer to a valid InstitutionRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstitutionRoleTypeFromValue(v string) (*InstitutionRoleType, error) {
	ev := InstitutionRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstitutionRoleType: valid values are %v", v, AllowedInstitutionRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstitutionRoleType) IsValid() bool {
	for _, existing := range AllowedInstitutionRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstitutionRoleType value
func (v InstitutionRoleType) Ptr() *InstitutionRoleType {
	return &v
}

type NullableInstitutionRoleType struct {
	value *InstitutionRoleType
	isSet bool
}

func (v NullableInstitutionRoleType) Get() *InstitutionRoleType {
	return v.value
}

func (v *NullableInstitutionRoleType) Set(val *InstitutionRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionRoleType(val *InstitutionRoleType) *NullableInstitutionRoleType {
	return &NullableInstitutionRoleType{value: val, isSet: true}
}

func (v NullableInstitutionRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

