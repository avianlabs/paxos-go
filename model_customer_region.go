/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// CustomerRegion the model 'CustomerRegion'
type CustomerRegion string

// List of CustomerRegion
const (
	CustomerRegion_US_CANADA CustomerRegion = "US_CANADA"
	CustomerRegion_MEXICO_CENTRAL_AMERICA CustomerRegion = "MEXICO_CENTRAL_AMERICA"
	CustomerRegion_SOUTH_AMERICA CustomerRegion = "SOUTH_AMERICA"
	CustomerRegion_EUROPE CustomerRegion = "EUROPE"
	CustomerRegion_ASIA CustomerRegion = "ASIA"
	CustomerRegion_AFRICA CustomerRegion = "AFRICA"
	CustomerRegion_OCEANIA CustomerRegion = "OCEANIA"
)

// All allowed values of CustomerRegion enum
var AllowedCustomerRegionEnumValues = []CustomerRegion{
	"US_CANADA",
	"MEXICO_CENTRAL_AMERICA",
	"SOUTH_AMERICA",
	"EUROPE",
	"ASIA",
	"AFRICA",
	"OCEANIA",
}

func (v *CustomerRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomerRegion(value)
	for _, existing := range AllowedCustomerRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomerRegion", value)
}

// NewCustomerRegionFromValue returns a pointer to a valid CustomerRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomerRegionFromValue(v string) (*CustomerRegion, error) {
	ev := CustomerRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomerRegion: valid values are %v", v, AllowedCustomerRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomerRegion) IsValid() bool {
	for _, existing := range AllowedCustomerRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomerRegion value
func (v CustomerRegion) Ptr() *CustomerRegion {
	return &v
}

type NullableCustomerRegion struct {
	value *CustomerRegion
	isSet bool
}

func (v NullableCustomerRegion) Get() *CustomerRegion {
	return v.value
}

func (v *NullableCustomerRegion) Set(val *CustomerRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerRegion(val *CustomerRegion) *NullableCustomerRegion {
	return &NullableCustomerRegion{value: val, isSet: true}
}

func (v NullableCustomerRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

