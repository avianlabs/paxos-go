/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SandboxIdentityAPIService SandboxIdentityAPI service
type SandboxIdentityAPIService service

type ApiSandboxSetIdentityStatusRequest struct {
	ctx context.Context
	ApiService *SandboxIdentityAPIService
	id string
	identitySandboxSandboxSetIdentityStatusBody *IdentitySandboxSandboxSetIdentityStatusBody
}

func (r ApiSandboxSetIdentityStatusRequest) IdentitySandboxSandboxSetIdentityStatusBody(identitySandboxSandboxSetIdentityStatusBody IdentitySandboxSandboxSetIdentityStatusBody) ApiSandboxSetIdentityStatusRequest {
	r.identitySandboxSandboxSetIdentityStatusBody = &identitySandboxSandboxSetIdentityStatusBody
	return r
}

func (r ApiSandboxSetIdentityStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.SandboxSetIdentityStatusExecute(r)
}

/*
SandboxSetIdentityStatus Sandbox Set Identity Status

Set the various statuses for the given Identity. To enable the Person Identity to transact,
set both `id_verification_status` and `sanctions_verification_status` to `"APPROVED"`.
To enable the Institution to transact, set both `sanctions_verification_status` to `"APPROVED"`.
This endpoint also allows you to set the statuses for `document_verification_status` and
`additional_screening_status`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiSandboxSetIdentityStatusRequest
*/
func (a *SandboxIdentityAPIService) SandboxSetIdentityStatus(ctx context.Context, id string) ApiSandboxSetIdentityStatusRequest {
	return ApiSandboxSetIdentityStatusRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *SandboxIdentityAPIService) SandboxSetIdentityStatusExecute(r ApiSandboxSetIdentityStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SandboxIdentityAPIService.SandboxSetIdentityStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/identities/{id}/sandbox-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.identitySandboxSandboxSetIdentityStatusBody == nil {
		return localVarReturnValue, nil, reportError("identitySandboxSandboxSetIdentityStatusBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identitySandboxSandboxSetIdentityStatusBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
