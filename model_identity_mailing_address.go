/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdentityMailingAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityMailingAddress{}

// IdentityMailingAddress A mailing address.
type IdentityMailingAddress struct {
	Country string `json:"country" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]+$"`
	Address1 string `json:"address1" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]+$"`
	// To clear address2 (i.e. when updating an identity), set address2 to an empty string (\"\").
	Address2 *string `json:"address2,omitempty" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]+$"`
	City string `json:"city" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]+$"`
	Province string `json:"province" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]+$"`
	ZipCode *string `json:"zip_code,omitempty" validate:"regexp=^[0-9A-Za-z \\/?:().,&'+-]+$"`
}

type _IdentityMailingAddress IdentityMailingAddress

// NewIdentityMailingAddress instantiates a new IdentityMailingAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityMailingAddress(country string, address1 string, city string, province string) *IdentityMailingAddress {
	this := IdentityMailingAddress{}
	this.Country = country
	this.Address1 = address1
	this.City = city
	this.Province = province
	return &this
}

// NewIdentityMailingAddressWithDefaults instantiates a new IdentityMailingAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityMailingAddressWithDefaults() *IdentityMailingAddress {
	this := IdentityMailingAddress{}
	return &this
}

// GetCountry returns the Country field value
func (o *IdentityMailingAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *IdentityMailingAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *IdentityMailingAddress) SetCountry(v string) {
	o.Country = v
}

// GetAddress1 returns the Address1 field value
func (o *IdentityMailingAddress) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *IdentityMailingAddress) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *IdentityMailingAddress) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *IdentityMailingAddress) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMailingAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *IdentityMailingAddress) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *IdentityMailingAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value
func (o *IdentityMailingAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *IdentityMailingAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *IdentityMailingAddress) SetCity(v string) {
	o.City = v
}

// GetProvince returns the Province field value
func (o *IdentityMailingAddress) GetProvince() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Province
}

// GetProvinceOk returns a tuple with the Province field value
// and a boolean to check if the value has been set.
func (o *IdentityMailingAddress) GetProvinceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Province, true
}

// SetProvince sets field value
func (o *IdentityMailingAddress) SetProvince(v string) {
	o.Province = v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *IdentityMailingAddress) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode) {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMailingAddress) GetZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCode) {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *IdentityMailingAddress) HasZipCode() bool {
	if o != nil && !IsNil(o.ZipCode) {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *IdentityMailingAddress) SetZipCode(v string) {
	o.ZipCode = &v
}

func (o IdentityMailingAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityMailingAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country"] = o.Country
	toSerialize["address1"] = o.Address1
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	toSerialize["city"] = o.City
	toSerialize["province"] = o.Province
	if !IsNil(o.ZipCode) {
		toSerialize["zip_code"] = o.ZipCode
	}
	return toSerialize, nil
}

func (o *IdentityMailingAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country",
		"address1",
		"city",
		"province",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityMailingAddress := _IdentityMailingAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityMailingAddress)

	if err != nil {
		return err
	}

	*o = IdentityMailingAddress(varIdentityMailingAddress)

	return err
}

type NullableIdentityMailingAddress struct {
	value *IdentityMailingAddress
	isSet bool
}

func (v NullableIdentityMailingAddress) Get() *IdentityMailingAddress {
	return v.value
}

func (v *NullableIdentityMailingAddress) Set(val *IdentityMailingAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityMailingAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityMailingAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityMailingAddress(val *IdentityMailingAddress) *NullableIdentityMailingAddress {
	return &NullableIdentityMailingAddress{value: val, isSet: true}
}

func (v NullableIdentityMailingAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityMailingAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


