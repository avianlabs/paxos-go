/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// ProfileType The profile type.   - NORMAL: A client-created profile. All Profiles created using the `CreateProfile` endpoint are of this type.  - DEFAULT: A system-generated profile.
type ProfileType string

// List of ProfileType
const (
	PROFILETYPE_NORMAL ProfileType = "NORMAL"
	PROFILETYPE_DEFAULT ProfileType = "DEFAULT"
)

// All allowed values of ProfileType enum
var AllowedProfileTypeEnumValues = []ProfileType{
	"NORMAL",
	"DEFAULT",
}

func (v *ProfileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileType(value)
	for _, existing := range AllowedProfileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileType", value)
}

// NewProfileTypeFromValue returns a pointer to a valid ProfileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileTypeFromValue(v string) (*ProfileType, error) {
	ev := ProfileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileType: valid values are %v", v, AllowedProfileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileType) IsValid() bool {
	for _, existing := range AllowedProfileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileType value
func (v ProfileType) Ptr() *ProfileType {
	return &v
}

type NullableProfileType struct {
	value *ProfileType
	isSet bool
}

func (v NullableProfileType) Get() *ProfileType {
	return v.value
}

func (v *NullableProfileType) Set(val *ProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileType(val *ProfileType) *NullableProfileType {
	return &NullableProfileType{value: val, isSet: true}
}

func (v NullableProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

