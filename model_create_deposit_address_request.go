/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDepositAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDepositAddressRequest{}

// CreateDepositAddressRequest struct for CreateDepositAddressRequest
type CreateDepositAddressRequest struct {
	// The target profile for deposit crediting.
	ProfileId string `json:"profile_id"`
	CryptoNetwork CryptoNetwork `json:"crypto_network"`
	// The Identity of the end user who will make deposits to the created address.
	IdentityId *string `json:"identity_id,omitempty"`
	// Client-specified ID for replay protection and lookup.
	RefId *string `json:"ref_id,omitempty"`
	// Optional client-specified metadata, which will be added to the deposit address but not to deposit transfers to the created address. Up to 6 key/value pairs may be provided. Each key and value must be less than or equal to 100 characters.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The Account associated to the identity of the user that will be linked to the created address.
	AccountId *string `json:"account_id,omitempty"`
	ConversionTargetAsset *DepositAddressConversionTargetAsset `json:"conversion_target_asset,omitempty"`
}

type _CreateDepositAddressRequest CreateDepositAddressRequest

// NewCreateDepositAddressRequest instantiates a new CreateDepositAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDepositAddressRequest(profileId string, cryptoNetwork CryptoNetwork) *CreateDepositAddressRequest {
	this := CreateDepositAddressRequest{}
	this.ProfileId = profileId
	this.CryptoNetwork = cryptoNetwork
	return &this
}

// NewCreateDepositAddressRequestWithDefaults instantiates a new CreateDepositAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDepositAddressRequestWithDefaults() *CreateDepositAddressRequest {
	this := CreateDepositAddressRequest{}
	return &this
}

// GetProfileId returns the ProfileId field value
func (o *CreateDepositAddressRequest) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *CreateDepositAddressRequest) SetProfileId(v string) {
	o.ProfileId = v
}

// GetCryptoNetwork returns the CryptoNetwork field value
func (o *CreateDepositAddressRequest) GetCryptoNetwork() CryptoNetwork {
	if o == nil {
		var ret CryptoNetwork
		return ret
	}

	return o.CryptoNetwork
}

// GetCryptoNetworkOk returns a tuple with the CryptoNetwork field value
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetCryptoNetworkOk() (*CryptoNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CryptoNetwork, true
}

// SetCryptoNetwork sets field value
func (o *CreateDepositAddressRequest) SetCryptoNetwork(v CryptoNetwork) {
	o.CryptoNetwork = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *CreateDepositAddressRequest) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *CreateDepositAddressRequest) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *CreateDepositAddressRequest) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *CreateDepositAddressRequest) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *CreateDepositAddressRequest) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *CreateDepositAddressRequest) SetRefId(v string) {
	o.RefId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreateDepositAddressRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateDepositAddressRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CreateDepositAddressRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateDepositAddressRequest) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateDepositAddressRequest) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreateDepositAddressRequest) SetAccountId(v string) {
	o.AccountId = &v
}

// GetConversionTargetAsset returns the ConversionTargetAsset field value if set, zero value otherwise.
func (o *CreateDepositAddressRequest) GetConversionTargetAsset() DepositAddressConversionTargetAsset {
	if o == nil || IsNil(o.ConversionTargetAsset) {
		var ret DepositAddressConversionTargetAsset
		return ret
	}
	return *o.ConversionTargetAsset
}

// GetConversionTargetAssetOk returns a tuple with the ConversionTargetAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDepositAddressRequest) GetConversionTargetAssetOk() (*DepositAddressConversionTargetAsset, bool) {
	if o == nil || IsNil(o.ConversionTargetAsset) {
		return nil, false
	}
	return o.ConversionTargetAsset, true
}

// HasConversionTargetAsset returns a boolean if a field has been set.
func (o *CreateDepositAddressRequest) HasConversionTargetAsset() bool {
	if o != nil && !IsNil(o.ConversionTargetAsset) {
		return true
	}

	return false
}

// SetConversionTargetAsset gets a reference to the given DepositAddressConversionTargetAsset and assigns it to the ConversionTargetAsset field.
func (o *CreateDepositAddressRequest) SetConversionTargetAsset(v DepositAddressConversionTargetAsset) {
	o.ConversionTargetAsset = &v
}

func (o CreateDepositAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDepositAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["profile_id"] = o.ProfileId
	toSerialize["crypto_network"] = o.CryptoNetwork
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.ConversionTargetAsset) {
		toSerialize["conversion_target_asset"] = o.ConversionTargetAsset
	}
	return toSerialize, nil
}

func (o *CreateDepositAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"profile_id",
		"crypto_network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDepositAddressRequest := _CreateDepositAddressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDepositAddressRequest)

	if err != nil {
		return err
	}

	*o = CreateDepositAddressRequest(varCreateDepositAddressRequest)

	return err
}

type NullableCreateDepositAddressRequest struct {
	value *CreateDepositAddressRequest
	isSet bool
}

func (v NullableCreateDepositAddressRequest) Get() *CreateDepositAddressRequest {
	return v.value
}

func (v *NullableCreateDepositAddressRequest) Set(val *CreateDepositAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDepositAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDepositAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDepositAddressRequest(val *CreateDepositAddressRequest) *NullableCreateDepositAddressRequest {
	return &NullableCreateDepositAddressRequest{value: val, isSet: true}
}

func (v NullableCreateDepositAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDepositAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


