/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// InstitutionType the model 'InstitutionType'
type InstitutionType string

// List of InstitutionType
const (
	InstitutionType_TRUST InstitutionType = "TRUST"
	InstitutionType_CORPORATION InstitutionType = "CORPORATION"
	InstitutionType_LLC InstitutionType = "LLC"
	InstitutionType_PARTNERSHIP InstitutionType = "PARTNERSHIP"
)

// All allowed values of InstitutionType enum
var AllowedInstitutionTypeEnumValues = []InstitutionType{
	"TRUST",
	"CORPORATION",
	"LLC",
	"PARTNERSHIP",
}

func (v *InstitutionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstitutionType(value)
	for _, existing := range AllowedInstitutionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstitutionType", value)
}

// NewInstitutionTypeFromValue returns a pointer to a valid InstitutionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstitutionTypeFromValue(v string) (*InstitutionType, error) {
	ev := InstitutionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstitutionType: valid values are %v", v, AllowedInstitutionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstitutionType) IsValid() bool {
	for _, existing := range AllowedInstitutionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstitutionType value
func (v InstitutionType) Ptr() *InstitutionType {
	return &v
}

type NullableInstitutionType struct {
	value *InstitutionType
	isSet bool
}

func (v NullableInstitutionType) Get() *InstitutionType {
	return v.value
}

func (v *NullableInstitutionType) Set(val *InstitutionType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionType(val *InstitutionType) *NullableInstitutionType {
	return &NullableInstitutionType{value: val, isSet: true}
}

func (v NullableInstitutionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

