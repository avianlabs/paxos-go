/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the QuoteExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteExecution{}

// QuoteExecution A QuoteExecution is an order to buy or sell an asset at a particular held Quote.
type QuoteExecution struct {
	// The UUID of the quote execution.
	Id string `json:"id"`
	// The ID of the profile under which this order executed.
	ProfileId string `json:"profile_id"`
	// The ID of the quote used to create this quote execution.
	QuoteId string `json:"quote_id"`
	// A unique identifier for the quote execution creation (for idempotence).
	RefId *string `json:"ref_id,omitempty"`
	Status QuoteExecutionStatus `json:"status"`
	Market Market `json:"market"`
	Side OrderSide `json:"side"`
	// The guaranteed price of the quote.
	Price string `json:"price"`
	// The amount of assets (crypto) in the transaction.
	BaseAmount string `json:"base_amount"`
	// The \"base\" side of the trading pair (crypto - like BTC, ETH, PAXG).
	BaseAsset string `json:"base_asset"`
	// The amount of quote currency (cash) in the transaction.
	QuoteAmount string `json:"quote_amount"`
	// The \"quote\" side of the trading pair (fiat - like USD, EUR, SGD).
	QuoteAsset string `json:"quote_asset"`
	// The time at which the quote execution was created.
	CreatedAt time.Time `json:"created_at"`
	// The time at which the quote execution was settled, completing its lifecycle.
	SettledAt *time.Time `json:"settled_at,omitempty"`
	// Client-specified metadata.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// The identity under which this quote execution is placed.
	IdentityId *string `json:"identity_id,omitempty"`
	// The account under which this quote execution is placed.
	AccountId *string `json:"account_id,omitempty"`
	// The ID of the profile under which to deposit the funds.
	RecipientProfileId *string `json:"recipient_profile_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuoteExecution QuoteExecution

// NewQuoteExecution instantiates a new QuoteExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteExecution(id string, profileId string, quoteId string, status QuoteExecutionStatus, market Market, side OrderSide, price string, baseAmount string, baseAsset string, quoteAmount string, quoteAsset string, createdAt time.Time) *QuoteExecution {
	this := QuoteExecution{}
	this.Id = id
	this.ProfileId = profileId
	this.QuoteId = quoteId
	this.Status = status
	this.Market = market
	this.Side = side
	this.Price = price
	this.BaseAmount = baseAmount
	this.BaseAsset = baseAsset
	this.QuoteAmount = quoteAmount
	this.QuoteAsset = quoteAsset
	this.CreatedAt = createdAt
	return &this
}

// NewQuoteExecutionWithDefaults instantiates a new QuoteExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteExecutionWithDefaults() *QuoteExecution {
	this := QuoteExecution{}
	return &this
}

// GetId returns the Id field value
func (o *QuoteExecution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuoteExecution) SetId(v string) {
	o.Id = v
}

// GetProfileId returns the ProfileId field value
func (o *QuoteExecution) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *QuoteExecution) SetProfileId(v string) {
	o.ProfileId = v
}

// GetQuoteId returns the QuoteId field value
func (o *QuoteExecution) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *QuoteExecution) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *QuoteExecution) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *QuoteExecution) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *QuoteExecution) SetRefId(v string) {
	o.RefId = &v
}

// GetStatus returns the Status field value
func (o *QuoteExecution) GetStatus() QuoteExecutionStatus {
	if o == nil {
		var ret QuoteExecutionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetStatusOk() (*QuoteExecutionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *QuoteExecution) SetStatus(v QuoteExecutionStatus) {
	o.Status = v
}

// GetMarket returns the Market field value
func (o *QuoteExecution) GetMarket() Market {
	if o == nil {
		var ret Market
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetMarketOk() (*Market, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *QuoteExecution) SetMarket(v Market) {
	o.Market = v
}

// GetSide returns the Side field value
func (o *QuoteExecution) GetSide() OrderSide {
	if o == nil {
		var ret OrderSide
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetSideOk() (*OrderSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *QuoteExecution) SetSide(v OrderSide) {
	o.Side = v
}

// GetPrice returns the Price field value
func (o *QuoteExecution) GetPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *QuoteExecution) SetPrice(v string) {
	o.Price = v
}

// GetBaseAmount returns the BaseAmount field value
func (o *QuoteExecution) GetBaseAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetBaseAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAmount, true
}

// SetBaseAmount sets field value
func (o *QuoteExecution) SetBaseAmount(v string) {
	o.BaseAmount = v
}

// GetBaseAsset returns the BaseAsset field value
func (o *QuoteExecution) GetBaseAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseAsset
}

// GetBaseAssetOk returns a tuple with the BaseAsset field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetBaseAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAsset, true
}

// SetBaseAsset sets field value
func (o *QuoteExecution) SetBaseAsset(v string) {
	o.BaseAsset = v
}

// GetQuoteAmount returns the QuoteAmount field value
func (o *QuoteExecution) GetQuoteAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteAmount
}

// GetQuoteAmountOk returns a tuple with the QuoteAmount field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetQuoteAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteAmount, true
}

// SetQuoteAmount sets field value
func (o *QuoteExecution) SetQuoteAmount(v string) {
	o.QuoteAmount = v
}

// GetQuoteAsset returns the QuoteAsset field value
func (o *QuoteExecution) GetQuoteAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteAsset
}

// GetQuoteAssetOk returns a tuple with the QuoteAsset field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetQuoteAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteAsset, true
}

// SetQuoteAsset sets field value
func (o *QuoteExecution) SetQuoteAsset(v string) {
	o.QuoteAsset = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *QuoteExecution) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *QuoteExecution) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSettledAt returns the SettledAt field value if set, zero value otherwise.
func (o *QuoteExecution) GetSettledAt() time.Time {
	if o == nil || IsNil(o.SettledAt) {
		var ret time.Time
		return ret
	}
	return *o.SettledAt
}

// GetSettledAtOk returns a tuple with the SettledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetSettledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SettledAt) {
		return nil, false
	}
	return o.SettledAt, true
}

// HasSettledAt returns a boolean if a field has been set.
func (o *QuoteExecution) HasSettledAt() bool {
	if o != nil && !IsNil(o.SettledAt) {
		return true
	}

	return false
}

// SetSettledAt gets a reference to the given time.Time and assigns it to the SettledAt field.
func (o *QuoteExecution) SetSettledAt(v time.Time) {
	o.SettledAt = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *QuoteExecution) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *QuoteExecution) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *QuoteExecution) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *QuoteExecution) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *QuoteExecution) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *QuoteExecution) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *QuoteExecution) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *QuoteExecution) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *QuoteExecution) SetAccountId(v string) {
	o.AccountId = &v
}

// GetRecipientProfileId returns the RecipientProfileId field value if set, zero value otherwise.
func (o *QuoteExecution) GetRecipientProfileId() string {
	if o == nil || IsNil(o.RecipientProfileId) {
		var ret string
		return ret
	}
	return *o.RecipientProfileId
}

// GetRecipientProfileIdOk returns a tuple with the RecipientProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteExecution) GetRecipientProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientProfileId) {
		return nil, false
	}
	return o.RecipientProfileId, true
}

// HasRecipientProfileId returns a boolean if a field has been set.
func (o *QuoteExecution) HasRecipientProfileId() bool {
	if o != nil && !IsNil(o.RecipientProfileId) {
		return true
	}

	return false
}

// SetRecipientProfileId gets a reference to the given string and assigns it to the RecipientProfileId field.
func (o *QuoteExecution) SetRecipientProfileId(v string) {
	o.RecipientProfileId = &v
}

func (o QuoteExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["profile_id"] = o.ProfileId
	toSerialize["quote_id"] = o.QuoteId
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	toSerialize["status"] = o.Status
	toSerialize["market"] = o.Market
	toSerialize["side"] = o.Side
	toSerialize["price"] = o.Price
	toSerialize["base_amount"] = o.BaseAmount
	toSerialize["base_asset"] = o.BaseAsset
	toSerialize["quote_amount"] = o.QuoteAmount
	toSerialize["quote_asset"] = o.QuoteAsset
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.SettledAt) {
		toSerialize["settled_at"] = o.SettledAt
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.IdentityId) {
		toSerialize["identity_id"] = o.IdentityId
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.RecipientProfileId) {
		toSerialize["recipient_profile_id"] = o.RecipientProfileId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuoteExecution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"profile_id",
		"quote_id",
		"status",
		"market",
		"side",
		"price",
		"base_amount",
		"base_asset",
		"quote_amount",
		"quote_asset",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteExecution := _QuoteExecution{}

	err = json.Unmarshal(data, &varQuoteExecution)

	if err != nil {
		return err
	}

	*o = QuoteExecution(varQuoteExecution)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "profile_id")
		delete(additionalProperties, "quote_id")
		delete(additionalProperties, "ref_id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "market")
		delete(additionalProperties, "side")
		delete(additionalProperties, "price")
		delete(additionalProperties, "base_amount")
		delete(additionalProperties, "base_asset")
		delete(additionalProperties, "quote_amount")
		delete(additionalProperties, "quote_asset")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "settled_at")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "identity_id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "recipient_profile_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuoteExecution struct {
	value *QuoteExecution
	isSet bool
}

func (v NullableQuoteExecution) Get() *QuoteExecution {
	return v.value
}

func (v *NullableQuoteExecution) Set(val *QuoteExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteExecution(val *QuoteExecution) *NullableQuoteExecution {
	return &NullableQuoteExecution{value: val, isSet: true}
}

func (v NullableQuoteExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


