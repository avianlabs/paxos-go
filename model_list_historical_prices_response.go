/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
)

// checks if the ListHistoricalPricesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListHistoricalPricesResponse{}

// ListHistoricalPricesResponse struct for ListHistoricalPricesResponse
type ListHistoricalPricesResponse struct {
	TotalCount *int32 `json:"total_count,omitempty"`
	// List of historical prices.
	Items []HistoricalPrice `json:"items,omitempty"`
}

// NewListHistoricalPricesResponse instantiates a new ListHistoricalPricesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListHistoricalPricesResponse() *ListHistoricalPricesResponse {
	this := ListHistoricalPricesResponse{}
	return &this
}

// NewListHistoricalPricesResponseWithDefaults instantiates a new ListHistoricalPricesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListHistoricalPricesResponseWithDefaults() *ListHistoricalPricesResponse {
	this := ListHistoricalPricesResponse{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ListHistoricalPricesResponse) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListHistoricalPricesResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ListHistoricalPricesResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *ListHistoricalPricesResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ListHistoricalPricesResponse) GetItems() []HistoricalPrice {
	if o == nil || IsNil(o.Items) {
		var ret []HistoricalPrice
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListHistoricalPricesResponse) GetItemsOk() ([]HistoricalPrice, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ListHistoricalPricesResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []HistoricalPrice and assigns it to the Items field.
func (o *ListHistoricalPricesResponse) SetItems(v []HistoricalPrice) {
	o.Items = v
}

func (o ListHistoricalPricesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListHistoricalPricesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCount) {
		toSerialize["total_count"] = o.TotalCount
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableListHistoricalPricesResponse struct {
	value *ListHistoricalPricesResponse
	isSet bool
}

func (v NullableListHistoricalPricesResponse) Get() *ListHistoricalPricesResponse {
	return v.value
}

func (v *NullableListHistoricalPricesResponse) Set(val *ListHistoricalPricesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListHistoricalPricesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListHistoricalPricesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListHistoricalPricesResponse(val *ListHistoricalPricesResponse) *NullableListHistoricalPricesResponse {
	return &NullableListHistoricalPricesResponse{value: val, isSet: true}
}

func (v NullableListHistoricalPricesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListHistoricalPricesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


