/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// PassthroughVerificationField the model 'PassthroughVerificationField'
type PassthroughVerificationField string

// List of PassthroughVerificationField
const (
	PassthroughVerificationField_FULL_LEGAL_NAME PassthroughVerificationField = "FULL_LEGAL_NAME"
	PassthroughVerificationField_ADDRESS PassthroughVerificationField = "ADDRESS"
	PassthroughVerificationField_DATE_OF_BIRTH PassthroughVerificationField = "DATE_OF_BIRTH"
	PassthroughVerificationField_CIP_ID PassthroughVerificationField = "CIP_ID"
)

// All allowed values of PassthroughVerificationField enum
var AllowedPassthroughVerificationFieldEnumValues = []PassthroughVerificationField{
	"FULL_LEGAL_NAME",
	"ADDRESS",
	"DATE_OF_BIRTH",
	"CIP_ID",
}

func (v *PassthroughVerificationField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PassthroughVerificationField(value)
	for _, existing := range AllowedPassthroughVerificationFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PassthroughVerificationField", value)
}

// NewPassthroughVerificationFieldFromValue returns a pointer to a valid PassthroughVerificationField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPassthroughVerificationFieldFromValue(v string) (*PassthroughVerificationField, error) {
	ev := PassthroughVerificationField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PassthroughVerificationField: valid values are %v", v, AllowedPassthroughVerificationFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PassthroughVerificationField) IsValid() bool {
	for _, existing := range AllowedPassthroughVerificationFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PassthroughVerificationField value
func (v PassthroughVerificationField) Ptr() *PassthroughVerificationField {
	return &v
}

type NullablePassthroughVerificationField struct {
	value *PassthroughVerificationField
	isSet bool
}

func (v NullablePassthroughVerificationField) Get() *PassthroughVerificationField {
	return v.value
}

func (v *NullablePassthroughVerificationField) Set(val *PassthroughVerificationField) {
	v.value = val
	v.isSet = true
}

func (v NullablePassthroughVerificationField) IsSet() bool {
	return v.isSet
}

func (v *NullablePassthroughVerificationField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePassthroughVerificationField(val *PassthroughVerificationField) *NullablePassthroughVerificationField {
	return &NullablePassthroughVerificationField{value: val, isSet: true}
}

func (v NullablePassthroughVerificationField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePassthroughVerificationField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

