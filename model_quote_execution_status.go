/*
Paxos API

<p>Welcome to Paxos APIs. At Paxos, our mission is to enable the movement of any asset, any time, in a trustworthy way. These APIs serve that mission by making it easier than ever for you to directly integrate our product capabilities into your application, leveraging the speed, stability, and security of the Paxos platform.</p> <p>The documentation that follows gives you access to our Crypto Brokerage, Trading, and Exchange products. It includes APIs for market data, orders, and the held rate quote flow.</p> <p>To test in our sandbox environment, <a href=\"https://account.sandbox.paxos.com\" target=\"_blank\">sign up</a> for an account. For more information about Paxos and our APIs, visit <a href=\"https://www.paxos.com/\" target=\"_blank\">Paxos.com</a>.</p> 

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paxos

import (
	"encoding/json"
	"fmt"
)

// QuoteExecutionStatus A QuoteExecution begins in state `CREATED` and transitions to end state `SETTLED` when all accounting movements are complete.
type QuoteExecutionStatus string

// List of QuoteExecutionStatus
const (
	CREATED QuoteExecutionStatus = "CREATED"
	SETTLED QuoteExecutionStatus = "SETTLED"
)

// All allowed values of QuoteExecutionStatus enum
var AllowedQuoteExecutionStatusEnumValues = []QuoteExecutionStatus{
	"CREATED",
	"SETTLED",
}

func (v *QuoteExecutionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QuoteExecutionStatus(value)
	for _, existing := range AllowedQuoteExecutionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QuoteExecutionStatus", value)
}

// NewQuoteExecutionStatusFromValue returns a pointer to a valid QuoteExecutionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQuoteExecutionStatusFromValue(v string) (*QuoteExecutionStatus, error) {
	ev := QuoteExecutionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QuoteExecutionStatus: valid values are %v", v, AllowedQuoteExecutionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QuoteExecutionStatus) IsValid() bool {
	for _, existing := range AllowedQuoteExecutionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QuoteExecutionStatus value
func (v QuoteExecutionStatus) Ptr() *QuoteExecutionStatus {
	return &v
}

type NullableQuoteExecutionStatus struct {
	value *QuoteExecutionStatus
	isSet bool
}

func (v NullableQuoteExecutionStatus) Get() *QuoteExecutionStatus {
	return v.value
}

func (v *NullableQuoteExecutionStatus) Set(val *QuoteExecutionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteExecutionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteExecutionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteExecutionStatus(val *QuoteExecutionStatus) *NullableQuoteExecutionStatus {
	return &NullableQuoteExecutionStatus{value: val, isSet: true}
}

func (v NullableQuoteExecutionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteExecutionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

